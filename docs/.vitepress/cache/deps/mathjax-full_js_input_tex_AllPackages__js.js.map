{
  "version": 3,
  "sources": ["../../../../node_modules/mathjax-full/ts/input/tex/action/ActionConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/ams/AmsItems.ts", "../../../../node_modules/mathjax-full/ts/input/tex/ams/AmsMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/ams/AmsMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/ams/AmsConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/amscd/AmsCdMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/amscd/AmsCdMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/amscd/AmsCdConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/bbox/BboxConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/boldsymbol/BoldsymbolConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/braket/BraketItems.ts", "../../../../node_modules/mathjax-full/ts/input/tex/braket/BraketMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/braket/BraketMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/braket/BraketConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/bussproofs/BussproofsUtil.ts", "../../../../node_modules/mathjax-full/ts/input/tex/bussproofs/BussproofsItems.ts", "../../../../node_modules/mathjax-full/ts/input/tex/bussproofs/BussproofsMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/bussproofs/BussproofsMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/bussproofs/BussproofsConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/enclose/EncloseConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/cancel/CancelConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/empheq/EmpheqUtil.ts", "../../../../node_modules/mathjax-full/ts/input/tex/cases/CasesConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/centernot/CenternotConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/color/ColorMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/color/ColorConstants.ts", "../../../../node_modules/mathjax-full/ts/input/tex/color/ColorUtil.ts", "../../../../node_modules/mathjax-full/ts/input/tex/color/ColorConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/colorv2/ColorV2Configuration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/colortbl/ColortblConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/newcommand/NewcommandUtil.ts", "../../../../node_modules/mathjax-full/ts/input/tex/newcommand/NewcommandMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/newcommand/NewcommandItems.ts", "../../../../node_modules/mathjax-full/ts/input/tex/configmacros/ConfigMacrosConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/empheq/EmpheqConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/newcommand/NewcommandMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/newcommand/NewcommandConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/extpfeil/ExtpfeilConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/gensymb/GensymbConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/html/HtmlMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/html/HtmlConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/mathtools/MathtoolsUtil.ts", "../../../../node_modules/mathjax-full/ts/input/tex/mathtools/MathtoolsMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/mathtools/MathtoolsMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/mathtools/MathtoolsTags.ts", "../../../../node_modules/mathjax-full/ts/input/tex/mathtools/MathtoolsItems.ts", "../../../../node_modules/mathjax-full/ts/input/tex/mathtools/MathtoolsConfiguration.ts", "../../../../node_modules/mhchemparser/dist/mhchemParser.js", "../../../../node_modules/mathjax-full/ts/input/tex/mhchem/MhchemConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/noerrors/NoErrorsConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/noundefined/NoUndefinedConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/physics/PhysicsItems.ts", "../../../../node_modules/mathjax-full/ts/input/tex/physics/PhysicsMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/physics/PhysicsMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/physics/PhysicsConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/setoptions/SetOptionsConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/tagformat/TagFormatConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/textmacros/TextMacrosMethods.ts", "../../../../node_modules/mathjax-full/ts/input/tex/textmacros/TextParser.ts", "../../../../node_modules/mathjax-full/ts/input/tex/textcomp/TextcompMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/textcomp/TextcompConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/textmacros/TextMacrosMappings.ts", "../../../../node_modules/mathjax-full/ts/input/tex/textmacros/TextMacrosConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/upgreek/UpgreekConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/unicode/UnicodeConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/verb/VerbConfiguration.ts", "../../../../node_modules/mathjax-full/ts/input/tex/AllPackages.ts"],
  "sourcesContent": ["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the action package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport BaseMethods from '../base/BaseMethods.js';\n\n\n// Namespace\nexport let ActionMethods: Record<string, ParseMethod> = {};\n\nActionMethods.Macro = BaseMethods.Macro;\n\n/**\n * Implement \\toggle {math1} {math2} ... \\endtoggle\n *    (as an <maction actiontype=\"toggle\">)\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nActionMethods.Toggle = function(parser: TexParser, name: string) {\n  const children = [];\n  let arg;\n  while ((arg = parser.GetArgument(name)) !== '\\\\endtoggle') {\n    children.push(\n      new TexParser(arg, parser.stack.env, parser.configuration).mml());\n  }\n  parser.Push(\n    parser.create('node', 'maction', children, {actiontype: 'toggle'}));\n};\n\n\n/**\n * Implement \\mathtip{math}{tip}\n *   (an an <maction actiontype=\"tooltip\">)\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nActionMethods.Mathtip = function(parser: TexParser, name: string) {\n  const arg = parser.ParseArg(name);\n  const tip = parser.ParseArg(name);\n  parser.Push(\n    parser.create('node', 'maction', [arg, tip], {actiontype: 'tooltip'}));\n};\n\n\nnew CommandMap('action-macros', {\n  toggle:  'Toggle',\n  mathtip: 'Mathtip',\n  texttip: ['Macro', '\\\\mathtip{#1}{\\\\text{#2}}', 2]\n}, ActionMethods);\n\n\nexport const ActionConfiguration = Configuration.create(\n  'action', {handler: {macro: ['action-macros']}}\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview StackItems needed for parsing AMS math commands.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {ArrayItem, EqnArrayItem} from '../base/BaseItems.js';\nimport ParseUtil from '../ParseUtil.js';\nimport NodeUtil from '../NodeUtil.js';\nimport TexError from '../TexError.js';\nimport {TexConstant} from '../TexConstants.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\n\n\n/**\n * Item dealing with multiline environments as a special case of arrays. Note,\n * that all other AMS equation environments (e.g., align, split) can be handled\n * by the regular EqnArrayItem class.\n *\n * Handles tagging information according to the given tagging style.\n */\nexport class MultlineItem extends ArrayItem {\n\n  /**\n   * @override\n   */\n  constructor(factory: any, ...args: any[]) {\n    super(factory);\n    this.factory.configuration.tags.start('multline', true, args[0]);\n  }\n\n\n  /**\n   * @override\n   */\n  get kind() {\n    return 'multline';\n  }\n\n\n  /**\n   * @override\n   */\n  public EndEntry() {\n    if (this.table.length) {\n      ParseUtil.fixInitialMO(this.factory.configuration, this.nodes);\n    }\n    const shove = this.getProperty('shove');\n    const mtd = this.create('node',\n                            'mtd', this.nodes, shove ? {columnalign: shove} : {});\n    this.setProperty('shove', null);\n    this.row.push(mtd);\n    this.Clear();\n  }\n\n  /**\n   * @override\n   */\n  public EndRow() {\n    if (this.row.length !== 1) {\n      // @test MultlineRowsOneCol\n      throw new TexError(\n        'MultlineRowsOneCol',\n        'The rows within the %1 environment must have exactly one column',\n        'multline');\n    }\n    let row = this.create('node', 'mtr', this.row);\n    this.table.push(row);\n    this.row = [];\n  }\n\n  /**\n   * @override\n   */\n  public EndTable() {\n    super.EndTable();\n    if (this.table.length) {\n      let m = this.table.length - 1, label = -1;\n      if (!NodeUtil.getAttribute(\n        NodeUtil.getChildren(this.table[0])[0], 'columnalign')) {\n        NodeUtil.setAttribute(NodeUtil.getChildren(this.table[0])[0],\n                              'columnalign', TexConstant.Align.LEFT);\n      }\n      if (!NodeUtil.getAttribute(\n        NodeUtil.getChildren(this.table[m])[0], 'columnalign')) {\n        NodeUtil.setAttribute(NodeUtil.getChildren(this.table[m])[0],\n                              'columnalign', TexConstant.Align.RIGHT);\n      }\n      let tag = this.factory.configuration.tags.getTag();\n      if (tag) {\n        label = (this.arraydef.side === TexConstant.Align.LEFT ? 0 : this.table.length - 1);\n        const mtr = this.table[label];\n        const mlabel = this.create('node', 'mlabeledtr',\n                                   [tag].concat(NodeUtil.getChildren(mtr)));\n        NodeUtil.copyAttributes(mtr, mlabel);\n        this.table[label] = mlabel;\n      }\n    }\n    this.factory.configuration.tags.end();\n  }\n}\n\n/**\n * StackItem for handling flalign, xalignat, and xxalignat environments.\n */\nexport class FlalignItem extends EqnArrayItem {\n\n  /**\n   * @override\n   */\n  get kind() {\n    return 'flalign';\n  }\n\n\n  /**\n   * @override\n   */\n  constructor(factory: any, public name: string, public numbered: boolean,\n              public padded: boolean, public center: boolean) {\n    super(factory);\n    this.factory.configuration.tags.start(name, numbered, numbered);\n  }\n\n  /**\n   * @override\n   */\n  public EndEntry() {\n    super.EndEntry();\n    const n = this.getProperty('xalignat') as number;\n    if (!n) return;\n    if (this.row.length > n) {\n      throw new TexError('XalignOverflow', 'Extra %1 in row of %2', '&', this.name);\n    }\n  }\n\n\n  /**\n   * @override\n   */\n  public EndRow() {\n    let cell: MmlNode;\n    let row = this.row;\n    //\n    //  For xalignat and xxalignat, pad the row to the expected number if it is too short.\n    //\n    const n = this.getProperty('xalignat') as number;\n    while (row.length < n) {\n      row.push(this.create('node', 'mtd'));\n    }\n    //\n    //  Insert padding cells between pairs of entries, as needed for \"fit\" columns,\n    //    and include initial and end cells if that is needed.\n    //\n    this.row = [];\n    if (this.padded) {\n      this.row.push(this.create('node', 'mtd'));\n    }\n    while ((cell = row.shift())) {\n      this.row.push(cell);\n      cell = row.shift();\n      if (cell) this.row.push(cell);\n      if (row.length || this.padded) {\n        this.row.push(this.create('node', 'mtd'));\n      }\n    }\n    //\n    if (this.row.length > this.maxrow) {\n      this.maxrow = this.row.length;\n    }\n    super.EndRow();\n    //\n    // For full-width environments with labels that aren't supposed to take up space,\n    //   move the label into a zero-width mpadded element that laps in the proper direction.\n    //\n    const mtr = this.table[this.table.length - 1];\n    if (this.getProperty('zeroWidthLabel') && mtr.isKind('mlabeledtr')) {\n      const mtd = NodeUtil.getChildren(mtr)[0];\n      const side = this.factory.configuration.options['tagSide'];\n      const def = {width: 0, ...(side === 'right' ? {lspace: '-1width'} : {})};\n      const mpadded = this.create('node', 'mpadded', NodeUtil.getChildren(mtd), def);\n      mtd.setChildren([mpadded]);\n    }\n  }\n\n\n  /**\n   * @override\n   */\n  public EndTable() {\n    super.EndTable();\n    if (this.center) {\n      //\n      //  If there is only one equation (one pair):\n      //    Don't make it 100%, and don't change the indentalign.\n      //\n      if (this.maxrow <= 2) {\n        const def = this.arraydef;\n        delete def.width;\n        delete this.global.indentalign;\n      }\n    }\n  }\n\n}\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview The AMS Parse methods.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {StackItem} from '../StackItem.js';\nimport {ParseMethod} from '../Types.js';\nimport ParseUtil from '../ParseUtil.js';\nimport ParseMethods from '../ParseMethods.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {TexConstant} from '../TexConstants.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {Macro} from '../Symbol.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ArrayItem} from '../base/BaseItems.js';\nimport {FlalignItem} from './AmsItems.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport {MmlMunderover} from '../../../core/MmlTree/MmlNodes/munderover.js';\nimport {MmlNode, AbstractMmlTokenNode} from '../../../core/MmlTree/MmlNode.js';\n\n\n// Namespace\nexport const AmsMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Handle AMS array environments.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n * @param {boolean} numbered Environment numbered.\n * @param {boolean} taggable Environment taggable (e.g., align* is taggable,\n *     split is not).\n * @param {string} align Column alignment.\n * @param {string} spacing Column spacing.\n * @param {string} style Display style indicator.\n */\nAmsMethods.AmsEqnArray = function(parser: TexParser, begin: StackItem,\n                                      numbered: boolean, taggable: boolean,\n                                      align: string, spacing: string,\n                                      style: string) {\n  // @test Aligned, Gathered\n  const args = parser.GetBrackets('\\\\begin{' + begin.getName() + '}');\n  const array = BaseMethods.EqnArray(parser, begin, numbered, taggable, align, spacing, style);\n  return ParseUtil.setArrayAlign(array as ArrayItem, args);\n};\n\n\n/**\n * Handle AMS  alignat environments.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n * @param {boolean} numbered Environment numbered.\n * @param {boolean} taggable Environment taggable (e.g., align* is taggable,\n *     split is not).\n */\nAmsMethods.AlignAt = function(parser: TexParser, begin: StackItem,\n                              numbered: boolean, taggable: boolean) {\n  const name = begin.getName();\n  let n, valign, align = '', spacing = [];\n  if (!taggable) {\n    // @test Alignedat\n    valign = parser.GetBrackets('\\\\begin{' + name + '}');\n  }\n  n = parser.GetArgument('\\\\begin{' + name + '}');\n  if (n.match(/[^0-9]/)) {\n    // @test PositiveIntegerArg\n    throw new TexError('PositiveIntegerArg',\n                        'Argument to %1 must me a positive integer',\n                        '\\\\begin{' + name + '}');\n  }\n  let count = parseInt(n, 10);\n  while (count > 0) {\n    align  += 'rl';\n    spacing.push('0em 0em');\n    count--;\n  }\n  let spaceStr = spacing.join(' ');\n  if (taggable) {\n    // @test Alignat, Alignat Star\n    return AmsMethods.EqnArray(parser, begin, numbered, taggable, align, spaceStr);\n  }\n  // @test Alignedat\n  let array = AmsMethods.EqnArray(parser, begin, numbered, taggable, align, spaceStr);\n  return ParseUtil.setArrayAlign(array as ArrayItem, valign);\n};\n\n\n/**\n * Implements multline environment (mostly handled through STACKITEM below)\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n * @param {boolean} numbered Environment numbered.\n */\nAmsMethods.Multline = function (parser: TexParser, begin: StackItem, numbered: boolean) {\n  // @test Shove*, Multline\n  parser.Push(begin);\n  ParseUtil.checkEqnEnv(parser);\n  const item = parser.itemFactory.create('multline', numbered, parser.stack) as ArrayItem;\n  item.arraydef = {\n    displaystyle: true,\n    rowspacing: '.5em',\n    columnspacing: '100%',\n    width: parser.options.ams['multlineWidth'],\n    side: parser.options['tagSide'],\n    minlabelspacing: parser.options['tagIndent'],\n    framespacing: parser.options.ams['multlineIndent'] + ' 0',\n    frame: '',   // Use frame spacing with no actual frame\n    'data-width-includes-label': true // take label space out of 100% width\n  };\n  return item;\n};\n\n\n/**\n * Generate an align at environment.\n * @param {TexParser} parser The current TeX parser.\n * @param {StackItem} begin The begin stackitem.\n * @param {boolean} numbered Is this a numbered array.\n * @param {boolean} padded Is it padded.\n */\nAmsMethods.XalignAt = function(parser: TexParser, begin: StackItem,\n                                  numbered: boolean, padded: boolean) {\n  let n = parser.GetArgument('\\\\begin{' + begin.getName() + '}');\n  if (n.match(/[^0-9]/)) {\n    throw new TexError('PositiveIntegerArg',\n                       'Argument to %1 must me a positive integer',\n                       '\\\\begin{' + begin.getName() + '}');\n  }\n  const align = (padded ? 'crl' : 'rlc');\n  const width = (padded ? 'fit auto auto' : 'auto auto fit');\n  const item = AmsMethods.FlalignArray(parser, begin, numbered, padded, false, align, width, true) as FlalignItem;\n  item.setProperty('xalignat', 2 * parseInt(n));\n  return item;\n};\n\n\n/**\n * Generate an flalign environment.\n * @param {TexParser} parser The current TeX parser.\n * @param {StackItem} begin The begin stackitem.\n * @param {boolean} numbered Is this a numbered array.\n * @param {boolean} padded Is it padded.\n * @param {boolean} center Is it centered.\n * @param {string} align The horizontal alignment for columns\n * @param {string} width The column widths of the table\n * @param {boolean} zeroWidthLabel True if the label should be in llap/rlap\n */\nAmsMethods.FlalignArray = function(parser: TexParser, begin: StackItem, numbered: boolean,\n                                  padded: boolean, center: boolean, align: string,\n                                  width: string, zeroWidthLabel: boolean = false) {\n  parser.Push(begin);\n  ParseUtil.checkEqnEnv(parser);\n  align = align\n    .split('')\n    .join(' ')\n    .replace(/r/g, 'right')\n    .replace(/l/g, 'left')\n    .replace(/c/g, 'center');\n  const item = parser.itemFactory.create(\n    'flalign', begin.getName(), numbered, padded, center, parser.stack) as FlalignItem;\n  item.arraydef = {\n    width: '100%',\n    displaystyle: true,\n    columnalign: align,\n    columnspacing: '0em',\n    columnwidth: width,\n    rowspacing: '3pt',\n    side: parser.options['tagSide'],\n    minlabelspacing: (zeroWidthLabel ? '0' : parser.options['tagIndent']),\n    'data-width-includes-label': true,\n  };\n  item.setProperty('zeroWidthLabel', zeroWidthLabel);\n  return item;\n};\n\n\nexport const NEW_OPS = 'ams-declare-ops';\n\n/**\n * Handle DeclareMathOperator.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsMethods.HandleDeclareOp =  function (parser: TexParser, name: string) {\n  let star = (parser.GetStar() ? '*' : '');\n  let cs = ParseUtil.trimSpaces(parser.GetArgument(name));\n  if (cs.charAt(0) === '\\\\') {\n    cs = cs.substr(1);\n  }\n  let op = parser.GetArgument(name);\n  (parser.configuration.handlers.retrieve(NEW_OPS) as CommandMap).\n    add(cs, new Macro(cs, AmsMethods.Macro, [`\\\\operatorname${star}{${op}}`]));\n};\n\n\n/**\n * Handle operatorname.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsMethods.HandleOperatorName = function(parser: TexParser, name: string) {\n  // @test Operatorname\n  const star = parser.GetStar();\n  //\n  //  Parse the argument using operator letters and grouping multiple letters.\n  //\n  let op = ParseUtil.trimSpaces(parser.GetArgument(name));\n  let mml = new TexParser(op, {\n    ...parser.stack.env,\n    font: TexConstant.Variant.NORMAL,\n    multiLetterIdentifiers: /^[-*a-z]+/i as any,\n    operatorLetters: true\n  }, parser.configuration).mml();\n  //\n  //  If we get something other than a single mi, wrap in a TeXAtom.\n  //\n  if (!mml.isKind('mi')) {\n    mml = parser.create('node', 'TeXAtom', [mml]);\n  }\n  //\n  //  Mark the limit properties and the TeX class.\n  //\n  NodeUtil.setProperties(mml, {movesupsub: star, movablelimits: true, texClass: TEXCLASS.OP});\n  //\n  //  Skip a following \\limits macro if not a starred operator\n  //\n  if (!star) {\n    const c = parser.GetNext(), i = parser.i;\n    if (c === '\\\\' && ++parser.i && parser.GetCS() !== 'limits') {\n      parser.i = i;\n    }\n  }\n  //\n  parser.Push(mml);\n};\n\n/**\n * Handle sideset.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsMethods.SideSet = function (parser: TexParser, name: string) {\n  //\n  //  Get the pre- and post-scripts, and any extra material from the arguments\n  //\n  const [preScripts, preRest] = splitSideSet(parser.ParseArg(name));\n  const [postScripts, postRest] = splitSideSet(parser.ParseArg(name));\n  const base = parser.ParseArg(name);\n  let mml = base;\n  //\n  //  If there are pre-scripts...\n  //\n  if (preScripts) {\n    //\n    //  If there is other material...\n    //\n    if (preRest) {\n      //\n      //  Replace the empty base of the prescripts with a phantom element of the\n      //    original base, with width 0 (but still of the correct height and depth).\n      //    so the scripts will be at the right heights.\n      //\n      preScripts.replaceChild(\n        parser.create('node', 'mphantom', [\n          parser.create('node', 'mpadded', [ParseUtil.copyNode(base, parser)], {width: 0})\n        ]),\n        NodeUtil.getChildAt(preScripts, 0)\n      );\n    } else {\n      //\n      //  If there is no extra meterial, make a mmultiscripts element\n      //\n      mml = parser.create('node', 'mmultiscripts', [base]);\n      //\n      //  Add any postscripts\n      //\n      if (postScripts) {\n        NodeUtil.appendChildren(mml, [\n          NodeUtil.getChildAt(postScripts, 1) || parser.create('node', 'none'),\n          NodeUtil.getChildAt(postScripts, 2) || parser.create('node', 'none')\n        ]);\n      }\n      //\n      //  Add the prescripts (left aligned)\n      //\n      NodeUtil.setProperty(mml, 'scriptalign', 'left');\n      NodeUtil.appendChildren(mml, [\n        parser.create('node', 'mprescripts'),\n        NodeUtil.getChildAt(preScripts, 1) || parser.create('node', 'none'),\n        NodeUtil.getChildAt(preScripts, 2) || parser.create('node', 'none')\n      ]);\n    }\n  }\n  //\n  //  If there are postscripts and we didn't make a mmultiscript element above...\n  //\n  if (postScripts && mml === base) {\n    //\n    //  Replace the emtpy base with actual base, and use that as the mml\n    //\n    postScripts.replaceChild(base, NodeUtil.getChildAt(postScripts, 0));\n    mml = postScripts;\n  }\n  //\n  //  Put the needed pieces into a TeXAtom of class OP.\n  //  Note that the postScripts are in the mml element,\n  //    either as part of the mmultiscripts node, or the\n  //    msubsup with the base inserted into it.\n  //\n  const mrow = parser.create('node', 'TeXAtom', [], {texClass: TEXCLASS.OP, movesupsub: true, movablelimits: true});\n  if (preRest) {\n    preScripts && mrow.appendChild(preScripts);\n    mrow.appendChild(preRest);\n  }\n  mrow.appendChild(mml);\n  postRest && mrow.appendChild(postRest);\n  parser.Push(mrow);\n};\n\n/**\n * Utility for breaking the \\sideset scripts from any other material.\n * @param {MmlNode} mml The node to check.\n * @return {[MmlNode, MmlNode]} The msubsup with the scripts together with any extra nodes.\n */\nfunction splitSideSet(mml: MmlNode): [MmlNode, MmlNode] {\n    if (!mml || (mml.isInferred && mml.childNodes.length === 0)) return [null, null];\n    if (mml.isKind('msubsup') && checkSideSetBase(mml)) return [mml, null];\n    const child = NodeUtil.getChildAt(mml, 0);\n    if (!(mml.isInferred && child && checkSideSetBase(child))) return [null, mml];\n    mml.childNodes.splice(0, 1); // remove first child\n    return [child, mml];\n}\n\n/**\n * Utility for checking if a \\sideset argument has scripts with an empty base.\n * @param {MmlNode} mml The node to check.\n * @return {boolean} True if the base is not and empty mi element.\n */\nfunction checkSideSetBase(mml: MmlNode): boolean {\n  const base = mml.childNodes[0];\n  return base && base.isKind('mi') && (base as AbstractMmlTokenNode).getText() === '';\n}\n\n\n/**\n * Handle extra letters in \\operatorname (- and *), default to normal otherwise.\n * @param {TexParser} parser The calling parser.\n * @param {string} c The letter being checked\n */\nAmsMethods.operatorLetter = function (parser: TexParser, c: string) {\n  return parser.stack.env.operatorLetters ? ParseMethods.variable(parser, c) : false;\n};\n\n\n/**\n * Handle multi integral signs.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} integral The actual integral sign.\n */\nAmsMethods.MultiIntegral = function(parser: TexParser, name: string,\n                                    integral: string) {\n  let next = parser.GetNext();\n  if (next === '\\\\') {\n    // @test MultiInt with Command\n    let i = parser.i;\n    next = parser.GetArgument(name);\n    parser.i = i;\n    if (next === '\\\\limits') {\n      if (name === '\\\\idotsint') {\n       // @test MultiInt with Limits\n        integral = '\\\\!\\\\!\\\\mathop{\\\\,\\\\,' + integral + '}';\n      }\n      else {\n        // Question: This is not used anymore?\n        integral = '\\\\!\\\\!\\\\!\\\\mathop{\\\\,\\\\,\\\\,' + integral + '}';\n      }\n    }\n  }\n  // @test MultiInt, MultiInt in Context\n  parser.string = integral + ' ' + parser.string.slice(parser.i);\n  parser.i = 0;\n};\n\n\n/**\n *  Handle stretchable arrows.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {number} chr The arrow character in hex code.\n * @param {number} l Left width.\n * @param {number} r Right width.\n */\nAmsMethods.xArrow = function(parser: TexParser, name: string,\n                             chr: number, l: number, r: number) {\n  let def = {width: '+' + ParseUtil.Em((l + r) / 18), lspace: ParseUtil.Em(l / 18)};\n  let bot = parser.GetBrackets(name);\n  let first = parser.ParseArg(name);\n  let dstrut = parser.create('node', 'mspace', [], {depth: '.25em'});\n  let arrow = parser.create('token',\n    'mo', {stretchy: true, texClass: TEXCLASS.REL}, String.fromCodePoint(chr));\n  arrow = parser.create('node', 'mstyle', [arrow], {scriptlevel: 0});\n  let mml = parser.create('node', 'munderover', [arrow]) as MmlMunderover;\n  let mpadded = parser.create('node', 'mpadded', [first, dstrut], def);\n  NodeUtil.setAttribute(mpadded, 'voffset', '-.2em');\n  NodeUtil.setAttribute(mpadded, 'height', '-.2em');\n  NodeUtil.setChild(mml, mml.over, mpadded);\n  if (bot) {\n    // @test Above Below Left Arrow, Above Below Right Arrow\n    let bottom = new TexParser(bot, parser.stack.env, parser.configuration).mml();\n    let bstrut = parser.create('node', 'mspace', [], {height: '.75em'});\n    mpadded = parser.create('node', 'mpadded', [bottom, bstrut], def);\n    NodeUtil.setAttribute(mpadded, 'voffset', '.15em');\n    NodeUtil.setAttribute(mpadded, 'depth', '-.15em');\n    NodeUtil.setChild(mml, mml.under, mpadded);\n  }\n  // @test Above Left Arrow, Above Right Arrow, Above Left Arrow in Context,\n  //       Above Right Arrow in Context\n  NodeUtil.setProperty(mml, 'subsupOK', true);\n  parser.Push(mml);\n};\n\n\n/**\n * Record presence of \\shoveleft and \\shoveright\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} shove The shove value.\n */\nAmsMethods.HandleShove = function(parser: TexParser, _name: string,\n                                  shove: string) {\n  let top = parser.stack.Top();\n  // @test Shove (Left|Right) (Top|Middle|Bottom)\n  if (top.kind !== 'multline') {\n    // @test Shove Error Environment\n    throw new TexError('CommandOnlyAllowedInEnv',\n                        '%1 only allowed in %2 environment',\n                        parser.currentCS, 'multline');\n  }\n  if (top.Size()) {\n    // @test Shove Error (Top|Middle|Bottom)\n    throw new TexError('CommandAtTheBeginingOfLine',\n                        '%1 must come at the beginning of the line', parser.currentCS);\n  }\n  top.setProperty('shove', shove);\n};\n\n\n/**\n * Handle \\cfrac\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsMethods.CFrac = function(parser: TexParser, name: string) {\n  let lr  = ParseUtil.trimSpaces(parser.GetBrackets(name, ''));\n  let num = parser.GetArgument(name);\n  let den = parser.GetArgument(name);\n  let lrMap: {[key: string]: string} = {\n    l: TexConstant.Align.LEFT, r: TexConstant.Align.RIGHT, '': ''};\n  let numNode = new TexParser('\\\\strut\\\\textstyle{' + num + '}',\n                              parser.stack.env, parser.configuration).mml();\n  let denNode = new TexParser('\\\\strut\\\\textstyle{' + den + '}',\n                              parser.stack.env, parser.configuration).mml();\n  let frac = parser.create('node', 'mfrac', [numNode, denNode]);\n  lr = lrMap[lr];\n  if (lr == null) {\n    // @test Center Fraction Error\n    throw new TexError('IllegalAlign', 'Illegal alignment specified in %1', parser.currentCS);\n  }\n  if (lr) {\n    // @test Right Fraction, Left Fraction\n    NodeUtil.setProperties(frac, {numalign: lr, denomalign: lr});\n  }\n  // @test Center Fraction\n  parser.Push(frac);\n};\n\n\n/**\n * Implement AMS generalized fraction.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} left Left delimiter.\n * @param {string} right Right delimiter.\n * @param {string} thick Line thickness.\n * @param {string} style Math style.\n */\nAmsMethods.Genfrac = function(parser: TexParser, name: string, left: string,\n                              right: string, thick: string, style: string) {\n  if (left  == null) { // @test Genfrac\n    left = parser.GetDelimiterArg(name);\n  }\n  if (right == null) { // @test Genfrac\n    right = parser.GetDelimiterArg(name);\n  }\n  if (thick == null) { // @test Genfrac\n    thick = parser.GetArgument(name);\n  }\n  if (style == null) { // @test Genfrac\n    style = ParseUtil.trimSpaces(parser.GetArgument(name));\n  }\n  let num = parser.ParseArg(name);\n  let den = parser.ParseArg(name);\n  let frac = parser.create('node', 'mfrac', [num, den]);\n  if (thick !== '') {\n    // @test Normal Binomial, Text Binomial, Display Binomial\n    NodeUtil.setAttribute(frac, 'linethickness', thick);\n  }\n  if (left || right) {\n    // @test Normal Binomial, Text Binomial, Display Binomial\n    NodeUtil.setProperty(frac, 'withDelims', true);\n    frac = ParseUtil.fixedFence(parser.configuration, left, frac, right);\n  }\n  if (style !== '') {\n    let styleDigit = parseInt(style, 10);\n    let styleAlpha = ['D', 'T', 'S', 'SS'][styleDigit];\n    if (styleAlpha == null) {\n      // @test Genfrac Error\n      throw new TexError('BadMathStyleFor', 'Bad math style for %1', parser.currentCS);\n    }\n    frac = parser.create('node', 'mstyle', [frac]);\n    if (styleAlpha === 'D') {\n      // @test Display Fraction, Display Sub Fraction, Display Binomial,\n      //       Display Sub Binomial\n      NodeUtil.setProperties(frac, {displaystyle: true, scriptlevel: 0});\n    }\n    else {\n      // @test Text Fraction, Text Sub Fraction, Text Binomial,\n      //       Text Sub Binomial\n      NodeUtil.setProperties(frac, {displaystyle: false,\n                                      scriptlevel: styleDigit - 1});\n    }\n  }\n  // @test Text Fraction, Normal Sub Binomial, Normal Binomial\n  parser.Push(frac);\n};\n\n\n\n/**\n * Add the tag to the environment (to be added to the table row later).\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsMethods.HandleTag = function(parser: TexParser, name: string) {\n  if (!parser.tags.currentTag.taggable && parser.tags.env) {\n    // @test Illegal Tag Error\n    throw new TexError('CommandNotAllowedInEnv',\n                        '%1 not allowed in %2 environment',\n                        parser.currentCS, parser.tags.env);\n  }\n  if (parser.tags.currentTag.tag) {\n    // @test Double Tag Error\n    throw new TexError('MultipleCommand', 'Multiple %1', parser.currentCS);\n  }\n  let star = parser.GetStar();\n  let tagId = ParseUtil.trimSpaces(parser.GetArgument(name));\n  parser.tags.tag(tagId, star);\n};\n\n\nAmsMethods.HandleNoTag = BaseMethods.HandleNoTag;\n\nAmsMethods.HandleRef = BaseMethods.HandleRef;\n\nAmsMethods.Macro = BaseMethods.Macro;\n\nAmsMethods.Accent = BaseMethods.Accent;\n\nAmsMethods.Tilde = BaseMethods.Tilde;\n\nAmsMethods.Array = BaseMethods.Array;\n\nAmsMethods.Spacer = BaseMethods.Spacer;\n\nAmsMethods.NamedOp = BaseMethods.NamedOp;\n\nAmsMethods.EqnArray = BaseMethods.EqnArray;\n\nAmsMethods.Equation = BaseMethods.Equation;\n", "\n/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for TeX parsing of the AMS math package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {AmsMethods} from './AmsMethods.js';\nimport *  as sm from '../SymbolMap.js';\nimport {TexConstant} from '../TexConstants.js';\nimport ParseMethods from '../ParseMethods.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport {MATHSPACE} from '../../../util/lengths.js';\n\n\n/**\n * Operators from the AMS Math package.\n */\nnew sm.CharacterMap('AMSmath-mathchar0mo', ParseMethods.mathchar0mo, {\n  iiiint:     ['\\u2A0C', {texClass: TEXCLASS.OP}]\n});\n\n/**\n * Extra characters that are letters in \\operatorname\n */\nnew sm.RegExpMap('AMSmath-operatorLetter', AmsMethods.operatorLetter, /[-*]/i);\n\n/**\n * Macros from the AMS Math package.\n */\nnew sm.CommandMap('AMSmath-macros', {\n  mathring:   ['Accent', '02DA'],  // or 0x30A\n  nobreakspace: 'Tilde',\n  negmedspace:    ['Spacer', MATHSPACE.negativemediummathspace],\n  negthickspace:  ['Spacer', MATHSPACE.negativethickmathspace],\n\n  idotsint:   ['MultiIntegral', '\\\\int\\\\cdots\\\\int'],\n\n  dddot:      ['Accent', '20DB'],\n  ddddot:     ['Accent', '20DC'],\n\n  sideset:     'SideSet',\n\n  boxed:      ['Macro', '\\\\fbox{$\\\\displaystyle{#1}$}', 1],\n\n  tag:         'HandleTag',\n  notag:       'HandleNoTag',\n  eqref:       ['HandleRef', true],\n\n  substack:   ['Macro', '\\\\begin{subarray}{c}#1\\\\end{subarray}', 1],\n\n  injlim:     ['NamedOp', 'inj&thinsp;lim'],\n  projlim:    ['NamedOp', 'proj&thinsp;lim'],\n  varliminf:  ['Macro', '\\\\mathop{\\\\underline{\\\\mmlToken{mi}{lim}}}'],\n  varlimsup:  ['Macro', '\\\\mathop{\\\\overline{\\\\mmlToken{mi}{lim}}}'],\n  varinjlim:  ['Macro', '\\\\mathop{\\\\underrightarrow{\\\\mmlToken{mi}{lim}}}'],\n  varprojlim: ['Macro', '\\\\mathop{\\\\underleftarrow{\\\\mmlToken{mi}{lim}}}'],\n\n  DeclareMathOperator: 'HandleDeclareOp',\n  operatorname:        'HandleOperatorName',\n\n  genfrac:     'Genfrac',\n  frac:       ['Genfrac', '', '', '', ''],\n  tfrac:      ['Genfrac', '', '', '', '1'],\n  dfrac:      ['Genfrac', '', '', '', '0'],\n  binom:      ['Genfrac', '(', ')', '0', ''],\n  tbinom:     ['Genfrac', '(', ')', '0', '1'],\n  dbinom:     ['Genfrac', '(', ')', '0', '0'],\n\n  cfrac:       'CFrac',\n\n  shoveleft:  ['HandleShove', TexConstant.Align.LEFT],\n  shoveright: ['HandleShove', TexConstant.Align.RIGHT],\n\n  xrightarrow: ['xArrow', 0x2192, 5, 10],\n  xleftarrow:  ['xArrow', 0x2190, 10, 5]\n}, AmsMethods);\n\n\n/**\n * Environments from the AMS Math package.\n */\nnew sm.EnvironmentMap('AMSmath-environment', ParseMethods.environment, {\n  'equation*':   ['Equation', null, false],\n  'eqnarray*':   ['EqnArray', null, false, true, 'rcl',\n                  ParseUtil.cols(0, MATHSPACE.thickmathspace), '.5em'],\n  align:         ['EqnArray', null, true, true,  'rl',  ParseUtil.cols(0, 2)],\n  'align*':      ['EqnArray', null, false, true, 'rl',  ParseUtil.cols(0, 2)],\n  multline:      ['Multline', null, true],\n  'multline*':   ['Multline', null, false],\n  split:         ['EqnArray', null, false, false, 'rl', ParseUtil.cols(0)],\n  gather:        ['EqnArray', null, true, true,  'c'],\n  'gather*':     ['EqnArray', null, false, true, 'c'],\n\n  alignat:       ['AlignAt', null, true, true],\n  'alignat*':    ['AlignAt', null, false, true],\n  alignedat:     ['AlignAt', null, false, false],\n\n  aligned:       ['AmsEqnArray', null, null, null, 'rl', ParseUtil.cols(0, 2), '.5em', 'D'],\n  gathered:      ['AmsEqnArray', null, null, null, 'c', null, '.5em', 'D'],\n\n  xalignat:      ['XalignAt', null, true, true],\n  'xalignat*':   ['XalignAt', null, false, true],\n  xxalignat:     ['XalignAt', null, false, false],\n  flalign:       ['FlalignArray', null, true, false, true, 'rlc', 'auto auto fit'],\n  'flalign*':    ['FlalignArray', null, false, false, true, 'rlc', 'auto auto fit'],\n\n  subarray:      ['Array', null, null, null, null, ParseUtil.cols(0), '0.1em', 'S', 1],\n  smallmatrix:   ['Array', null, null, null, 'c', ParseUtil.cols(1 / 3),\n                  '.2em', 'S', 1],\n  matrix:       ['Array', null, null, null, 'c'],\n  pmatrix:      ['Array', null, '(', ')', 'c'],\n  bmatrix:      ['Array', null, '[', ']', 'c'],\n  Bmatrix:      ['Array', null, '\\\\{', '\\\\}', 'c'],\n  vmatrix:      ['Array', null, '\\\\vert', '\\\\vert', 'c'],\n  Vmatrix:      ['Array', null, '\\\\Vert', '\\\\Vert', 'c'],\n  cases:        ['Array', null, '\\\\{', '.', 'll', null, '.2em', 'T']\n}, AmsMethods);\n\n\n/**\n * Delimiters from the AMS Math package.\n */\nnew sm.DelimiterMap('AMSmath-delimiter', ParseMethods.delimiter, {\n  '\\\\lvert':     ['\\u007C', {texClass: TEXCLASS.OPEN}],\n  '\\\\rvert':     ['\\u007C', {texClass: TEXCLASS.CLOSE}],\n  '\\\\lVert':     ['\\u2016', {texClass: TEXCLASS.OPEN}],\n  '\\\\rVert':     ['\\u2016', {texClass: TEXCLASS.CLOSE}]\n});\n\n\n/**\n * Identifiers from the AMS Symbols package.\n */\nnew sm.CharacterMap('AMSsymbols-mathchar0mi', ParseMethods.mathchar0mi, {\n  // Lowercase Greek letters\n  digamma:                '\\u03DD',\n  varkappa:               '\\u03F0',\n\n  // Uppercase Greek letters\n  varGamma:               ['\\u0393', {mathvariant: TexConstant.Variant.ITALIC}],\n  varDelta:               ['\\u0394', {mathvariant: TexConstant.Variant.ITALIC}],\n  varTheta:               ['\\u0398', {mathvariant: TexConstant.Variant.ITALIC}],\n  varLambda:              ['\\u039B', {mathvariant: TexConstant.Variant.ITALIC}],\n  varXi:                  ['\\u039E', {mathvariant: TexConstant.Variant.ITALIC}],\n  varPi:                  ['\\u03A0', {mathvariant: TexConstant.Variant.ITALIC}],\n  varSigma:               ['\\u03A3', {mathvariant: TexConstant.Variant.ITALIC}],\n  varUpsilon:             ['\\u03A5', {mathvariant: TexConstant.Variant.ITALIC}],\n  varPhi:                 ['\\u03A6', {mathvariant: TexConstant.Variant.ITALIC}],\n  varPsi:                 ['\\u03A8', {mathvariant: TexConstant.Variant.ITALIC}],\n  varOmega:               ['\\u03A9', {mathvariant: TexConstant.Variant.ITALIC}],\n\n  // Hebrew letters\n  beth:                   '\\u2136',\n  gimel:                  '\\u2137',\n  daleth:                 '\\u2138',\n\n  // Miscellaneous symbols\n  //    hbar:                   '\\u0127',  // in TeX/jax.js\n  backprime:              ['\\u2035', {variantForm: true}],\n  hslash:                 '\\u210F',\n  varnothing:             ['\\u2205', {variantForm: true}],\n  blacktriangle:          '\\u25B4',\n  triangledown:           ['\\u25BD', {variantForm: true}],\n  blacktriangledown:      '\\u25BE',\n  square:                 '\\u25FB',\n  Box:                    '\\u25FB',\n  blacksquare:            '\\u25FC',\n  lozenge:                '\\u25CA',\n  Diamond:                '\\u25CA',\n  blacklozenge:           '\\u29EB',\n  circledS:               ['\\u24C8', {mathvariant: TexConstant.Variant.NORMAL}],\n  bigstar:                '\\u2605',\n  //    angle:                  '\\u2220',  // in TeX/jax.js\n  sphericalangle:         '\\u2222',\n  measuredangle:          '\\u2221',\n  nexists:                '\\u2204',\n  complement:             '\\u2201',\n  mho:                    '\\u2127',\n  eth:                    ['\\u00F0', {mathvariant: TexConstant.Variant.NORMAL}],\n  Finv:                   '\\u2132',\n  diagup:                 '\\u2571',\n  Game:                   '\\u2141',\n  diagdown:               '\\u2572',\n  Bbbk:                   ['\\u006B',\n                           {mathvariant: TexConstant.Variant.DOUBLESTRUCK}],\n\n  yen:                    '\\u00A5',\n  circledR:               '\\u00AE',\n  checkmark:              '\\u2713',\n  maltese:                '\\u2720'\n});\n\n\n/**\n * Operators from the AMS Symbols package.\n */\nnew sm.CharacterMap('AMSsymbols-mathchar0mo', ParseMethods.mathchar0mo, {\n  // Binary operators\n  dotplus:                '\\u2214',\n  ltimes:                 '\\u22C9',\n  smallsetminus:          ['\\u2216', {variantForm: true}],\n  rtimes:                 '\\u22CA',\n  Cap:                    '\\u22D2',\n  doublecap:              '\\u22D2',\n  leftthreetimes:         '\\u22CB',\n  Cup:                    '\\u22D3',\n  doublecup:              '\\u22D3',\n  rightthreetimes:        '\\u22CC',\n  barwedge:               '\\u22BC',\n  curlywedge:             '\\u22CF',\n  veebar:                 '\\u22BB',\n  curlyvee:               '\\u22CE',\n  doublebarwedge:         '\\u2A5E',\n  boxminus:               '\\u229F',\n  circleddash:            '\\u229D',\n  boxtimes:               '\\u22A0',\n  circledast:             '\\u229B',\n  boxdot:                 '\\u22A1',\n  circledcirc:            '\\u229A',\n  boxplus:                '\\u229E',\n  centerdot:              ['\\u22C5', {variantForm: true}],\n  divideontimes:          '\\u22C7',\n  intercal:               '\\u22BA',\n\n  // Binary relations\n  leqq:                   '\\u2266',\n  geqq:                   '\\u2267',\n  leqslant:               '\\u2A7D',\n  geqslant:               '\\u2A7E',\n  eqslantless:            '\\u2A95',\n  eqslantgtr:             '\\u2A96',\n  lesssim:                '\\u2272',\n  gtrsim:                 '\\u2273',\n  lessapprox:             '\\u2A85',\n  gtrapprox:              '\\u2A86',\n  approxeq:               '\\u224A',\n  lessdot:                '\\u22D6',\n  gtrdot:                 '\\u22D7',\n  lll:                    '\\u22D8',\n  llless:                 '\\u22D8',\n  ggg:                    '\\u22D9',\n  gggtr:                  '\\u22D9',\n  lessgtr:                '\\u2276',\n  gtrless:                '\\u2277',\n  lesseqgtr:              '\\u22DA',\n  gtreqless:              '\\u22DB',\n  lesseqqgtr:             '\\u2A8B',\n  gtreqqless:             '\\u2A8C',\n  doteqdot:               '\\u2251',\n  Doteq:                  '\\u2251',\n  eqcirc:                 '\\u2256',\n  risingdotseq:           '\\u2253',\n  circeq:                 '\\u2257',\n  fallingdotseq:          '\\u2252',\n  triangleq:              '\\u225C',\n  backsim:                '\\u223D',\n  thicksim:               ['\\u223C', {variantForm: true}],\n  backsimeq:              '\\u22CD',\n  thickapprox:            ['\\u2248', {variantForm: true}],\n  subseteqq:              '\\u2AC5',\n  supseteqq:              '\\u2AC6',\n  Subset:                 '\\u22D0',\n  Supset:                 '\\u22D1',\n  sqsubset:               '\\u228F',\n  sqsupset:               '\\u2290',\n  preccurlyeq:            '\\u227C',\n  succcurlyeq:            '\\u227D',\n  curlyeqprec:            '\\u22DE',\n  curlyeqsucc:            '\\u22DF',\n  precsim:                '\\u227E',\n  succsim:                '\\u227F',\n  precapprox:             '\\u2AB7',\n  succapprox:             '\\u2AB8',\n  vartriangleleft:        '\\u22B2',\n  lhd:                    '\\u22B2',\n  vartriangleright:       '\\u22B3',\n  rhd:                    '\\u22B3',\n  trianglelefteq:         '\\u22B4',\n  unlhd:                  '\\u22B4',\n  trianglerighteq:        '\\u22B5',\n  unrhd:                  '\\u22B5',\n  vDash:                  ['\\u22A8', {variantForm: true}],\n  Vdash:                  '\\u22A9',\n  Vvdash:                 '\\u22AA',\n  smallsmile:             ['\\u2323', {variantForm: true}],\n  shortmid:               ['\\u2223', {variantForm: true}],\n  smallfrown:             ['\\u2322', {variantForm: true}],\n  shortparallel:          ['\\u2225', {variantForm: true}],\n  bumpeq:                 '\\u224F',\n  between:                '\\u226C',\n  Bumpeq:                 '\\u224E',\n  pitchfork:              '\\u22D4',\n  varpropto:              ['\\u221D', {variantForm: true}],\n  backepsilon:            '\\u220D',\n  blacktriangleleft:      '\\u25C2',\n  blacktriangleright:     '\\u25B8',\n  therefore:              '\\u2234',\n  because:                '\\u2235',\n  eqsim:                  '\\u2242',\n  vartriangle:            ['\\u25B3', {variantForm: true}],\n  Join:                   '\\u22C8',\n\n  // Negated relations\n  nless:                  '\\u226E',\n  ngtr:                   '\\u226F',\n  nleq:                   '\\u2270',\n  ngeq:                   '\\u2271',\n  nleqslant:              ['\\u2A87', {variantForm: true}],\n  ngeqslant:              ['\\u2A88', {variantForm: true}],\n  nleqq:                  ['\\u2270', {variantForm: true}],\n  ngeqq:                  ['\\u2271', {variantForm: true}],\n  lneq:                   '\\u2A87',\n  gneq:                   '\\u2A88',\n  lneqq:                  '\\u2268',\n  gneqq:                  '\\u2269',\n  lvertneqq:              ['\\u2268', {variantForm: true}],\n  gvertneqq:              ['\\u2269', {variantForm: true}],\n  lnsim:                  '\\u22E6',\n  gnsim:                  '\\u22E7',\n  lnapprox:               '\\u2A89',\n  gnapprox:               '\\u2A8A',\n  nprec:                  '\\u2280',\n  nsucc:                  '\\u2281',\n  npreceq:                ['\\u22E0', {variantForm: true}],\n  nsucceq:                ['\\u22E1', {variantForm: true}],\n  precneqq:               '\\u2AB5',\n  succneqq:               '\\u2AB6',\n  precnsim:               '\\u22E8',\n  succnsim:               '\\u22E9',\n  precnapprox:            '\\u2AB9',\n  succnapprox:            '\\u2ABA',\n  nsim:                   '\\u2241',\n  ncong:                  '\\u2247',\n  nshortmid:              ['\\u2224', {variantForm: true}],\n  nshortparallel:         ['\\u2226', {variantForm: true}],\n  nmid:                   '\\u2224',\n  nparallel:              '\\u2226',\n  nvdash:                 '\\u22AC',\n  nvDash:                 '\\u22AD',\n  nVdash:                 '\\u22AE',\n  nVDash:                 '\\u22AF',\n  ntriangleleft:          '\\u22EA',\n  ntriangleright:         '\\u22EB',\n  ntrianglelefteq:        '\\u22EC',\n  ntrianglerighteq:       '\\u22ED',\n  nsubseteq:              '\\u2288',\n  nsupseteq:              '\\u2289',\n  nsubseteqq:             ['\\u2288', {variantForm: true}],\n  nsupseteqq:             ['\\u2289', {variantForm: true}],\n  subsetneq:              '\\u228A',\n  supsetneq:              '\\u228B',\n  varsubsetneq:           ['\\u228A', {variantForm: true}],\n  varsupsetneq:           ['\\u228B', {variantForm: true}],\n  subsetneqq:             '\\u2ACB',\n  supsetneqq:             '\\u2ACC',\n  varsubsetneqq:          ['\\u2ACB', {variantForm: true}],\n  varsupsetneqq:          ['\\u2ACC', {variantForm: true}],\n\n\n  // Arrows\n  leftleftarrows:         '\\u21C7',\n  rightrightarrows:       '\\u21C9',\n  leftrightarrows:        '\\u21C6',\n  rightleftarrows:        '\\u21C4',\n  Lleftarrow:             '\\u21DA',\n  Rrightarrow:            '\\u21DB',\n  twoheadleftarrow:       '\\u219E',\n  twoheadrightarrow:      '\\u21A0',\n  leftarrowtail:          '\\u21A2',\n  rightarrowtail:         '\\u21A3',\n  looparrowleft:          '\\u21AB',\n  looparrowright:         '\\u21AC',\n  leftrightharpoons:      '\\u21CB',\n  rightleftharpoons:      ['\\u21CC', {variantForm: true}],\n  curvearrowleft:         '\\u21B6',\n  curvearrowright:        '\\u21B7',\n  circlearrowleft:        '\\u21BA',\n  circlearrowright:       '\\u21BB',\n  Lsh:                    '\\u21B0',\n  Rsh:                    '\\u21B1',\n  upuparrows:             '\\u21C8',\n  downdownarrows:         '\\u21CA',\n  upharpoonleft:          '\\u21BF',\n  upharpoonright:         '\\u21BE',\n  downharpoonleft:        '\\u21C3',\n  restriction:            '\\u21BE',\n  multimap:               '\\u22B8',\n  downharpoonright:       '\\u21C2',\n  leftrightsquigarrow:    '\\u21AD',\n  rightsquigarrow:        '\\u21DD',\n  leadsto:                '\\u21DD',\n  dashrightarrow:         '\\u21E2',\n  dashleftarrow:          '\\u21E0',\n\n  // Negated arrows\n  nleftarrow:             '\\u219A',\n  nrightarrow:            '\\u219B',\n  nLeftarrow:             '\\u21CD',\n  nRightarrow:            '\\u21CF',\n  nleftrightarrow:        '\\u21AE',\n  nLeftrightarrow:        '\\u21CE'\n});\n\n\n/**\n * Delimiters from the AMS Symbols package.\n */\nnew sm.DelimiterMap('AMSsymbols-delimiter', ParseMethods.delimiter, {\n  // corners\n  '\\\\ulcorner':           '\\u231C',\n  '\\\\urcorner':           '\\u231D',\n  '\\\\llcorner':           '\\u231E',\n  '\\\\lrcorner':           '\\u231F'\n});\n\n\n/**\n * Macros from the AMS Symbols package.\n */\nnew sm.CommandMap('AMSsymbols-macros', {\n  implies:    ['Macro', '\\\\;\\\\Longrightarrow\\\\;'],\n  impliedby:  ['Macro', '\\\\;\\\\Longleftarrow\\\\;']\n}, AmsMethods);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the AMS package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport {MultlineItem, FlalignItem} from './AmsItems.js';\nimport {AbstractTags} from '../Tags.js';\nimport {NEW_OPS} from './AmsMethods.js';\nimport './AmsMappings.js';\nimport {CommandMap} from '../SymbolMap.js';\n\n\n/**\n * Standard AMS style tagging.\n * @constructor\n * @extends {AbstractTags}\n */\nexport class AmsTags extends AbstractTags { }\n\n\n/**\n * Init method for AMS package.\n * @param {ParserConfiguration} config The current configuration.\n */\nlet init = function(config: ParserConfiguration) {\n  new CommandMap(NEW_OPS, {}, {});\n  config.append(Configuration.local({handler: {macro: [NEW_OPS]},\n                                    priority: -1}));\n};\n\nexport const AmsConfiguration = Configuration.create(\n  'ams', {\n    handler: {\n      character: ['AMSmath-operatorLetter'],\n      delimiter: ['AMSsymbols-delimiter', 'AMSmath-delimiter'],\n      macro: ['AMSsymbols-mathchar0mi', 'AMSsymbols-mathchar0mo',\n              'AMSsymbols-delimiter', 'AMSsymbols-macros',\n              'AMSmath-mathchar0mo', 'AMSmath-macros', 'AMSmath-delimiter'],\n      environment: ['AMSmath-environment']\n    },\n    items: {\n      [MultlineItem.prototype.kind]: MultlineItem,\n      [FlalignItem.prototype.kind]: FlalignItem,\n    },\n    tags: {'ams': AmsTags},\n    init: init,\n    config: (_config: ParserConfiguration, jax: any)  => {\n      //\n      //  Move multlineWidth from old location to ams block (remove in next version)\n      //\n      if (jax.parseOptions.options.multlineWidth) {\n        jax.parseOptions.options.ams.multlineWidth = jax.parseOptions.options.multlineWidth;\n      }\n      delete jax.parseOptions.options.multlineWidth;\n    },\n    options: {\n      multlineWidth: '',\n      ams: {\n        multlineWidth: '100%',  // The width to use for multline environments.\n        multlineIndent: '1em',  // The margin to use on both sides of multline environments.\n      }\n    }\n  }\n);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Methods for the AMScd package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport TexParser from '../TexParser.js';\nimport {ParseMethod} from '../Types.js';\nimport {StackItem, EnvList} from '../StackItem.js';\nimport {ArrayItem} from '../base/BaseItems.js';\nimport {Other} from '../base/BaseConfiguration.js';\nimport {MmlMunderover} from '../../../core/MmlTree/MmlNodes/munderover.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport NodeUtil from '../NodeUtil.js';\n\n\n// Namespace\nlet AmsCdMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Handles CD environment for commutative diagrams.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n */\nAmsCdMethods.CD = function(parser: TexParser, begin: StackItem) {\n  parser.Push(begin);\n  let item = parser.itemFactory.create('array') as ArrayItem;\n  let options = parser.configuration.options.amscd;\n  item.setProperties({\n    minw: parser.stack.env.CD_minw || options.harrowsize,\n    minh: parser.stack.env.CD_minh || options.varrowsize\n  });\n  item.arraydef = {\n      columnalign: 'center',\n      columnspacing: options.colspace,\n      rowspacing: options.rowspace,\n      displaystyle: true\n  };\n  return item;\n};\n\n\n/**\n * Converts arrows.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsCdMethods.arrow = function(parser: TexParser, name: string) {\n  let c = parser.string.charAt(parser.i);\n  if (!c.match(/[><VA.|=]/)) {\n    return Other(parser, name);\n  } else {\n    parser.i++;\n  }\n  let first = parser.stack.Top();\n  if (!first.isKind('array') || first.Size()) {\n    AmsCdMethods.cell(parser, name);\n    first = parser.stack.Top();\n  }\n  let top = first as ArrayItem;\n  //\n  //  Add enough cells to place the arrow correctly\n  //\n  let arrowRow = ((top.table.length % 2) === 1);\n  let n = (top.row.length + (arrowRow ? 0 : 1)) % 2;\n  while (n) {\n    AmsCdMethods.cell(parser, name);\n    n--;\n  }\n\n  let mml;\n  let hdef = {minsize: top.getProperty('minw'), stretchy: true},\n  vdef = {minsize: top.getProperty('minh'),\n          stretchy: true, symmetric: true, lspace: 0, rspace: 0};\n\n  if (c === '.') {\n  } else if (c === '|') {\n    mml = parser.create('token', 'mo',  vdef, '\\u2225');\n  } else if (c === '=') {\n    mml = parser.create('token', 'mo', hdef, '=');\n  } else {\n    //\n    //  for @>>> @<<< @VVV and @AAA, get the arrow and labels\n    //\n    // TODO: cleanup!\n    let arrow: string = ({\n      '>': '\\u2192', '<': '\\u2190', 'V': '\\u2193', 'A': '\\u2191'} as {[key: string]: string}) [c];\n    let a = parser.GetUpTo(name + c, c);\n    let b = parser.GetUpTo(name + c, c);\n    if (c === '>' || c === '<') {\n      //\n      //  Lay out horizontal arrows with munderover if it has labels\n      //\n      mml = parser.create('token', 'mo', hdef, arrow);\n      if (!a) {\n        a = '\\\\kern ' + top.getProperty('minw');\n      } // minsize needs work\n      if (a || b) {\n        let pad: EnvList = {width: '+.67em', lspace: '.33em'};\n        mml = parser.create('node', 'munderover', [mml]) as MmlMunderover;\n        if (a) {\n          let nodeA = new TexParser(a, parser.stack.env, parser.configuration).mml();\n          let mpadded = parser.create('node', 'mpadded', [nodeA], pad);\n          NodeUtil.setAttribute(mpadded, 'voffset', '.1em');\n          NodeUtil.setChild(mml, mml.over, mpadded);\n        }\n        if (b) {\n          let nodeB = new TexParser(b, parser.stack.env, parser.configuration).mml();\n          NodeUtil.setChild(mml, mml.under, parser.create('node', 'mpadded', [nodeB], pad));\n        }\n        if (parser.configuration.options.amscd.hideHorizontalLabels) {\n          mml = parser.create('node', 'mpadded', mml, {depth: 0, height: '.67em'});\n        }\n      }\n    } else {\n      //\n      //  Lay out vertical arrows with mrow if there are labels\n      //\n      let arrowNode = parser.create('token', 'mo', vdef, arrow);\n      mml = arrowNode;\n      if (a || b) {\n        mml = parser.create('node', 'mrow');\n        if (a) {\n          NodeUtil.appendChildren(\n            mml, [new TexParser('\\\\scriptstyle\\\\llap{' + a + '}', parser.stack.env, parser.configuration).mml()]);\n        }\n        arrowNode.texClass = TEXCLASS.ORD;\n        NodeUtil.appendChildren(mml, [arrowNode]);\n        if (b) {\n          NodeUtil.appendChildren(mml, [new TexParser('\\\\scriptstyle\\\\rlap{' + b + '}',\n                                                      parser.stack.env, parser.configuration).mml()]);\n        }\n      }\n    }\n  }\n  if (mml) {\n    parser.Push(mml);\n  }\n  AmsCdMethods.cell(parser, name);\n};\n\n\n/**\n * Converts a cell in the diagram.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsCdMethods.cell = function(parser: TexParser, name: string) {\n  let top = parser.stack.Top() as ArrayItem;\n  if ((top.table || []).length % 2 === 0 && (top.row || []).length === 0) {\n    //\n    // Add a strut to the first cell in even rows to get\n    // better spacing of arrow rows.\n    //\n    parser.Push(parser.create('node', 'mpadded', [], {height: '8.5pt', depth: '2pt'}));\n  }\n  parser.Push(parser.itemFactory.create('cell').setProperties({isEntry: true, name: name}));\n};\n\n\n/**\n * Sets minimal width for arrows.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsCdMethods.minCDarrowwidth = function(parser: TexParser, name: string) {\n  parser.stack.env.CD_minw = parser.GetDimen(name);\n};\n\n\n/**\n * Sets minimal height for arrows.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nAmsCdMethods.minCDarrowheight = function(parser: TexParser, name: string) {\n  parser.stack.env.CD_minh = parser.GetDimen(name);\n};\n\n\nexport default AmsCdMethods;\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Symbol mappings for the AMScd package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport * as sm from '../SymbolMap.js';\nimport ParseMethods from '../ParseMethods.js';\nimport AmsCdMethods from './AmsCdMethods.js';\n\n\nnew sm.EnvironmentMap('amscd_environment', ParseMethods.environment,\n                      {CD: 'CD'}, AmsCdMethods);\n\nnew sm.CommandMap('amscd_macros', {\n  minCDarrowwidth: 'minCDarrowwidth',\n  minCDarrowheight: 'minCDarrowheight',\n}, AmsCdMethods);\n\nnew sm.MacroMap('amscd_special', {'@': 'arrow'}, AmsCdMethods);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the AMScd package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport './AmsCdMappings.js';\n\n\nexport const AmsCdConfiguration = Configuration.create(\n  'amscd', {\n    handler: {\n      character: ['amscd_special'],\n      macro: ['amscd_macros'],\n      environment: ['amscd_environment']\n    },\n    options: {\n      amscd: {\n        colspace: '5pt',\n        rowspace: '5pt',\n        harrowsize: '2.75em',\n        varrowsize: '1.75em',\n        hideHorizontalLabels: false\n      }\n    }\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the bbox package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport TexError from '../TexError.js';\n\n\n// Namespace\nexport let BboxMethods: Record<string, ParseMethod> = {};\n\n/**\n * Implements MathJax Bbox macro to pad and colorize background boxes.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nBboxMethods.BBox = function(parser: TexParser, name: string) {\n  const bbox = parser.GetBrackets(name, '');\n  let math = parser.ParseArg(name);\n  const parts = bbox.split(/,/);\n  let def, background, style;\n  for (let i = 0, m = parts.length; i < m; i++) {\n    const part = parts[i].trim();\n    const match = part.match(/^(\\.\\d+|\\d+(\\.\\d*)?)(pt|em|ex|mu|px|in|cm|mm)$/);\n    if (match) {\n      // @test Bbox-Padding\n      if (def) {\n        // @test Bbox-Padding-Error\n        throw new TexError('MultipleBBoxProperty', '%1 specified twice in %2', 'Padding', name);\n      }\n      const pad = BBoxPadding(match[1] + match[3]);\n      if (pad) {\n        // @test Bbox-Padding\n        def = {\n          height: '+' + pad,\n          depth: '+' + pad,\n          lspace: pad,\n          width: '+' + (2 * parseInt(match[1], 10)) + match[3]\n        };\n      }\n    } else if (part.match(/^([a-z0-9]+|\\#[0-9a-f]{6}|\\#[0-9a-f]{3})$/i)) {\n      // @test Bbox-Background\n      if (background) {\n        // @test Bbox-Background-Error\n        throw new TexError('MultipleBBoxProperty', '%1 specified twice in %2',\n                           'Background', name);\n      }\n      background = part;\n    } else if (part.match(/^[-a-z]+:/i)) {\n      // @test Bbox-Frame\n      if (style) {\n        // @test Bbox-Frame-Error\n        throw new TexError('MultipleBBoxProperty', '%1 specified twice in %2',\n                           'Style', name);\n      }\n      style = BBoxStyle(part);\n    } else if (part !== '') {\n      // @test Bbox-General-Error\n      throw new TexError(\n        'InvalidBBoxProperty',\n        '\"%1\" doesn\\'t look like a color, a padding dimension, or a style',\n        part);\n    }\n  }\n  if (def) {\n    // @test Bbox-Padding\n    math = parser.create('node', 'mpadded', [math], def);\n  }\n  if (background || style) {\n    def = {};\n    if (background) {\n      // @test Bbox-Background\n      Object.assign(def, {mathbackground: background});\n    }\n    if (style) {\n      // @test Bbox-Frame\n      Object.assign(def, {style: style});\n    }\n    math = parser.create('node', 'mstyle', [math], def);\n  }\n  parser.Push(math);\n};\n\n\n// Dummy methods. Need to be made Safe with security check.\nlet BBoxStyle = function(styles: string) {\n  return styles;\n};\n\nlet BBoxPadding = function(pad: string) {\n  return pad;\n};\n\n\nnew CommandMap('bbox', {bbox: 'BBox'}, BboxMethods);\n\n\nexport const BboxConfiguration = Configuration.create(\n  'bbox', {handler: {macro: ['bbox']}}\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the boldsymbol package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport {Configuration} from '../Configuration.js';\nimport NodeUtil from '../NodeUtil.js';\nimport TexParser from '../TexParser.js';\nimport {TexConstant} from '../TexConstants.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport {NodeFactory} from '../NodeFactory.js';\nimport ParseOptions from '../ParseOptions.js';\n\nlet BOLDVARIANT: {[key: string]: string} = {};\nBOLDVARIANT[TexConstant.Variant.NORMAL] = TexConstant.Variant.BOLD;\nBOLDVARIANT[TexConstant.Variant.ITALIC]    = TexConstant.Variant.BOLDITALIC;\nBOLDVARIANT[TexConstant.Variant.FRAKTUR]   = TexConstant.Variant.BOLDFRAKTUR;\nBOLDVARIANT[TexConstant.Variant.SCRIPT]    = TexConstant.Variant.BOLDSCRIPT;\nBOLDVARIANT[TexConstant.Variant.SANSSERIF] = TexConstant.Variant.BOLDSANSSERIF;\nBOLDVARIANT['-tex-calligraphic']   = '-tex-bold-calligraphic';\nBOLDVARIANT['-tex-oldstyle']       = '-tex-bold-oldstyle';\nBOLDVARIANT['-tex-mathit']         = TexConstant.Variant.BOLDITALIC;\n\n\n// Namespace\nexport let BoldsymbolMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Parse function for boldsymbol macro.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the macro.\n */\nBoldsymbolMethods.Boldsymbol = function(parser: TexParser, name: string) {\n  let boldsymbol = parser.stack.env['boldsymbol'];\n  parser.stack.env['boldsymbol'] = true;\n  let mml = parser.ParseArg(name);\n  parser.stack.env['boldsymbol'] = boldsymbol;\n  parser.Push(mml);\n};\n\n\nnew CommandMap('boldsymbol', {boldsymbol: 'Boldsymbol'}, BoldsymbolMethods);\n\n\n/**\n * Creates token nodes in bold font if possible.\n * @param {NodeFactory} factory The current node factory.\n * @param {string} kind The type of token node to create.\n * @param {any} def Properties for the node.\n * @param {string} text The text content.\n * @return {MmlNode} The generated token node.\n */\nexport function createBoldToken(factory: NodeFactory, kind: string,\n                                def: any, text: string): MmlNode  {\n  let token = NodeFactory.createToken(factory, kind, def, text);\n  if (kind !== 'mtext' &&\n      factory.configuration.parser.stack.env['boldsymbol']) {\n    NodeUtil.setProperty(token, 'fixBold', true);\n    factory.configuration.addNode('fixBold', token);\n  }\n  return token;\n}\n\n\n/**\n * Postprocessor to rewrite token nodes to bold font, if possible.\n * @param {ParseOptions} data The parse options.\n */\nexport function rewriteBoldTokens(arg: {data: ParseOptions}) {\n  for (let node of arg.data.getList('fixBold')) {\n    if (NodeUtil.getProperty(node, 'fixBold')) {\n      let variant = NodeUtil.getAttribute(node, 'mathvariant') as string;\n      if (variant == null) {\n        NodeUtil.setAttribute(node, 'mathvariant', TexConstant.Variant.BOLD);\n      } else {\n        NodeUtil.setAttribute(node,\n                              'mathvariant', BOLDVARIANT[variant] || variant);\n      }\n      NodeUtil.removeProperties(node, 'fixBold');\n    }\n  }\n}\n\n\nexport const BoldsymbolConfiguration = Configuration.create(\n    'boldsymbol', {\n        handler: {macro: ['boldsymbol']},\n        nodes: {'token': createBoldToken},\n        postprocessors: [rewriteBoldTokens]\n    }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Stack items for parsing the braket package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {CheckType, BaseItem, StackItem} from '../StackItem.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport ParseUtil from '../ParseUtil.js';\n\n\n/**\n * A bra-ket command. Collates elements from the opening brace to the closing\n * brace, adding bars to a given maximal number (e.g., only one in case of\n * set). To finalise it adds the surrounding angle brackets or braces.\n */\nexport class BraketItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  get kind() {\n    return 'braket';\n  }\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('close')) {\n      return [[this.factory.create('mml', this.toMml())], true];\n    }\n    if (item.isKind('mml')) {\n      this.Push(item.toMml());\n      if (this.getProperty('single')) {\n        return [[this.toMml()], true];\n      }\n      return BaseItem.fail;\n    }\n    return super.checkItem(item);\n  }\n\n\n  /**\n   * @override\n   */\n  public toMml() {\n    let inner = super.toMml();\n    let open = this.getProperty('open') as string;\n    let close = this.getProperty('close') as string;\n    if (this.getProperty('stretchy')) {\n      return ParseUtil.fenced(this.factory.configuration, open, inner, close);\n    }\n    let attrs = {fence: true, stretchy: false, symmetric: true, texClass: TEXCLASS.OPEN};\n    let openNode = this.create('token', 'mo', attrs, open);\n    attrs.texClass = TEXCLASS.CLOSE;\n    let closeNode = this.create('token', 'mo', attrs, close);\n    let mrow = this.create('node', 'mrow', [openNode, inner, closeNode],\n                         {open: open, close: close, texClass: TEXCLASS.INNER});\n    return mrow;\n  }\n\n}\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Methods for TeX parsing of the braket package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {ParseMethod} from '../Types.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport TexParser from '../TexParser.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport TexError from '../TexError.js';\n\n\nlet BraketMethods: Record<string, ParseMethod> = {};\n\nBraketMethods.Macro = BaseMethods.Macro;\n\n\n/**\n * Generate a bra-ket expression.\n * @param {TexParser} parser The current TeX parser.\n * @param {string} name Name of the current control sequence.\n * @param {string} open Opening delimiter.\n * @param {string} close Closing delimiter.\n * @param {boolean} stretchy Is it stretchy.\n * @param {number} barmax Maximum number of bars allowed.\n */\nBraketMethods.Braket = function(parser: TexParser, _name: string,\n                                open: string, close: string,\n                                stretchy: boolean, barmax: number) {\n  let next = parser.GetNext();\n  if (next === '') {\n    throw new TexError('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n  }\n  let single = true;\n  if (next === '{') {\n    parser.i++;\n    single = false;\n  }\n  parser.Push(\n    parser.itemFactory.create('braket')\n      .setProperties({barmax: barmax, barcount: 0, open: open,\n                      close: close, stretchy: stretchy, single: single}));\n};\n\n\n/**\n * Generate a bar. If inside a bra-ket expressions it's handled accordingly.\n * @param {TexParser} parser The current TeX parser.\n * @param {string} name Name of the current control sequence.\n */\nBraketMethods.Bar = function(parser: TexParser, name: string) {\n  let c = name === '|' ? '|' : '\\u2225';\n  let top = parser.stack.Top();\n  if (top.kind !== 'braket' ||\n      top.getProperty('barcount') >= top.getProperty('barmax')) {\n    let mml = parser.create('token', 'mo', {texClass: TEXCLASS.ORD, stretchy: false}, c);\n    parser.Push(mml);\n    return;\n  }\n  if (c === '|' && parser.GetNext() === '|') {\n    parser.i++;\n    c = '\\u2225';\n  }\n  let stretchy = top.getProperty('stretchy');\n  if (!stretchy) {\n    let node = parser.create('token', 'mo', {stretchy: false, braketbar: true}, c);\n    parser.Push(node);\n    return;\n  }\n  let node = parser.create('node', 'TeXAtom', [], {texClass: TEXCLASS.CLOSE});\n  parser.Push(node);\n  top.setProperty('barcount', top.getProperty('barcount') as number + 1);\n  node = parser.create('token', 'mo', {stretchy: true, braketbar: true}, c);\n  parser.Push(node);\n  node = parser.create('node', 'TeXAtom', [], {texClass: TEXCLASS.OPEN});\n  parser.Push(node);\n};\n\n\nexport default BraketMethods;\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for TeX parsing of the braket package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {CommandMap, MacroMap} from '../SymbolMap.js';\nimport BraketMethods from './BraketMethods.js';\n\n\n/**\n * Macros for braket package.\n */\nnew CommandMap('Braket-macros', {\n  bra: ['Macro', '{\\\\langle {#1} \\\\vert}', 1],\n  ket: ['Macro', '{\\\\vert {#1} \\\\rangle}', 1],\n  braket: ['Braket', '\\u27E8', '\\u27E9', false, Infinity],\n  'set': ['Braket', '{', '}', false, 1],\n  Bra: ['Macro', '{\\\\left\\\\langle {#1} \\\\right\\\\vert}', 1],\n  Ket: ['Macro', '{\\\\left\\\\vert {#1} \\\\right\\\\rangle}', 1],\n  Braket: ['Braket', '\\u27E8', '\\u27E9', true, Infinity],\n  Set: ['Braket', '{', '}', true, 1],\n  // Not part of the LaTeX package:\n  ketbra: ['Macro', '{\\\\vert {#1} \\\\rangle\\\\langle {#2} \\\\vert}', 2],\n  Ketbra: ['Macro', '{\\\\left\\\\vert {#1} \\\\right\\\\rangle\\\\left\\\\langle {#2} \\\\right\\\\vert}', 2],\n  // Treatment of bar.\n  '|': 'Bar'\n}, BraketMethods);\n\n\n/**\n * Character map for braket package.\n */\nnew MacroMap('Braket-characters', {\n  '|': 'Bar'\n}, BraketMethods);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the Braket package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {BraketItem} from './BraketItems.js';\nimport './BraketMappings.js';\n\n\nexport const BraketConfiguration = Configuration.create(\n  'braket', {\n    handler: {\n      character: ['Braket-characters'],\n      macro: ['Braket-macros']\n    },\n    items: {\n      [BraketItem.prototype.kind]: BraketItem,\n    }\n  }\n);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Postfilter utility for the Bussproofs package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport ParseOptions from '../ParseOptions.js';\nimport NodeUtil from '../NodeUtil.js';\nimport ParseUtil from '../ParseUtil.js';\n\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport {Property} from '../../../core/Tree/Node.js';\nimport {MathItem} from '../../../core/MathItem.js';\nimport {MathDocument} from '../../../core/MathDocument.js';\n\n\ntype MATHITEM = MathItem<any, any, any>;\ntype MATHDOCUMENT = MathDocument<any, any, any>;\n\ntype FilterData = {math: MATHITEM, document: MATHDOCUMENT, data: ParseOptions};\n\n/**\n *  Global constants local to the module. They instantiate an output jax for\n *  bounding box computation.\n */\nlet doc: MATHDOCUMENT = null;\nlet item: MATHITEM = null;\n\n\n/**\n * Get the bounding box of a node.\n * @param {MmlNode} node The target node.\n */\nlet getBBox = function(node: MmlNode) {\n  item.root = node;\n    let {w: width} = (doc.outputJax as any).getBBox(item, doc);\n  return width;\n};\n\n\n/**\n * Get the actual table that represents the inference rule, i.e., the rule\n * without the label. We ignore preceding elements or spaces.\n *\n * @param {MmlNode} node The out node representing the inference.\n * @return {MmlNode} The actual table representing the inference rule.\n */\nlet getRule = function(node: MmlNode): MmlNode {\n  let i = 0;\n  while (node && !NodeUtil.isType(node, 'mtable')) {\n    if (NodeUtil.isType(node, 'text')) {\n      return null;\n    }\n    if (NodeUtil.isType(node, 'mrow')) {\n      node = node.childNodes[0] as MmlNode;\n      i = 0;\n      continue;\n    }\n    node = node.parent.childNodes[i] as MmlNode;\n    i++;\n  }\n  return node;\n};\n\n\n/*******************************\n * Convenience methods for retrieving bits of the proof tree.\n */\n\n/**\n * Gets premises of an inference rule.\n * @param {MmlNode} rule The rule.\n * @param {string} direction Up or down.\n * @return {MmlNode} The premisses.\n */\nlet getPremises = function(rule: MmlNode, direction: string): MmlNode {\n  return rule.childNodes[direction === 'up' ? 1 : 0].childNodes[0].\n    childNodes[0].childNodes[0].childNodes[0] as MmlNode;\n};\n\n\n/**\n * Gets nth premise.\n * @param {MmlNode} premises The premises.\n * @param {number} n Number of premise to get.\n * @return {MmlNode} The nth premise.\n */\nlet getPremise = function(premises: MmlNode, n: number): MmlNode {\n  return premises.childNodes[n].childNodes[0].childNodes[0] as MmlNode;\n};\n\n\n/**\n * Gets first premise.\n * @param {MmlNode} premises The premises.\n * @return {MmlNode} The first premise.\n */\nlet firstPremise = function(premises: MmlNode): MmlNode {\n  return getPremise(premises, 0) as MmlNode;\n};\n\n\n/**\n * Gets last premise.\n * @param {MmlNode} premises The premises.\n * @return {MmlNode} The last premise.\n */\nlet lastPremise = function(premises: MmlNode): MmlNode {\n  return getPremise(premises, premises.childNodes.length - 1);\n};\n\n\n/**\n * Get conclusion in an inference rule.\n * @param {MmlNode} rule The rule.\n * @param {string} direction Up or down.\n * @return {MmlNode} The conclusion.\n */\nlet getConclusion = function(rule: MmlNode, direction: string): MmlNode {\n  return rule.childNodes[direction === 'up' ? 0 : 1].childNodes[0].childNodes[0].childNodes[0] as MmlNode;\n};\n\n\n/**\n * Gets the actual column element in an inference rule. I.e., digs down through\n * row, padding and space elements.\n * @param {MmlNode} inf The rule.\n * @return {MmlNode} The mtd element.\n */\nlet getColumn = function(inf: MmlNode): MmlNode {\n  while (inf && !NodeUtil.isType(inf, 'mtd')) {\n    inf = inf.parent as MmlNode;\n  }\n  return inf;\n};\n\n\n/**\n * Gets the next sibling of an inference rule.\n * @param {MmlNode} inf The inference rule.\n * @return {MmlNode} The next sibling.\n */\nlet nextSibling = function(inf: MmlNode): MmlNode {\n  return inf.parent.childNodes[inf.parent.childNodes.indexOf(inf) + 1] as MmlNode;\n};\n\n\n/**\n * Gets the previous sibling of an inference rule.\n * @param {MmlNode} inf The inference rule.\n * @return {MmlNode} The previous sibling.\n */\n// @ts-ignore\nlet previousSibling = function(inf: MmlNode): MmlNode {\n  return inf.parent.childNodes[inf.parent.childNodes.indexOf(inf) - 1] as MmlNode;\n};\n\n\n/**\n * Get the parent inference rule.\n * @param {MmlNode} inf The inference rule.\n * @return {MmlNode} Its parent.\n */\nlet getParentInf = function(inf: MmlNode): MmlNode {\n  while (inf && getProperty(inf, 'inference') == null) {\n    inf = inf.parent as MmlNode;\n  }\n  return inf;\n};\n\n\n// Computes bbox spaces\n//\n//\n\n/**\n * Computes spacing left or right of an inference rule. In the case of\n * right: right space + right label\n * left: left space + left label\n * @param {MmlNode} inf The overall proof tree.\n * @param {MmlNode} rule The particular inference rule.\n * @param {boolean = false} right True for right, o/w left.\n * @return {number} The spacing next to the rule.\n */\nlet getSpaces = function(inf: MmlNode, rule: MmlNode, right: boolean = false): number {\n  let result = 0;\n  if (inf === rule) {\n    return result;\n  }\n  if (inf !== rule.parent) {\n    let children = inf.childNodes as MmlNode[];\n    let index = right ? children.length - 1 : 0;\n    if (NodeUtil.isType(children[index], 'mspace')) {\n      result += getBBox(children[index]);\n    }\n    inf = rule.parent;\n  }\n  if (inf === rule) {\n    return result;\n  }\n  let children = inf.childNodes as MmlNode[];\n  let index = right ? children.length - 1 : 0;\n  if (children[index] !== rule) {\n    result += getBBox(children[index]);\n  }\n  return result;\n};\n\n\n// - Get rule T from Wrapper W.\n// - Get conclusion C in T.\n// - w: Preceding/following space/label.\n// - (x - y)/2: Distance from left boundary to middle of C.\n/**\n * Computes an space adjustment value to move the inference rule.\n * @param {MmlNode} inf The inference rule.\n * @param {boolean = false} right True if adjustments are on the right.\n * @return {number} The adjustment value.\n */\nlet adjustValue = function(inf: MmlNode, right: boolean = false): number {\n  let rule = getRule(inf);\n  let conc = getConclusion(rule, getProperty(rule, 'inferenceRule') as string);\n  // TODO:  Here we have to improve sequent adjustment!\n  let w = getSpaces(inf, rule, right);\n  let x = getBBox(rule);\n  let y = getBBox(conc);\n  return w + ((x - y) / 2);\n};\n\n\n/**\n * Adds (positive or negative) space in the column containing the inference rule.\n * @param {ParseOptions} config The parser configuration.\n * @param {MmlNode} inf The inference rule to place.\n * @param {number} space The space to be added.\n * @param {boolean = false} right True if adjustment is on the right.\n */\nlet addSpace = function(config: ParseOptions, inf: MmlNode,\n                        space: number, right: boolean = false) {\n  if (getProperty(inf, 'inferenceRule') ||\n      getProperty(inf, 'labelledRule')) {\n    const mrow = config.nodeFactory.create('node', 'mrow');\n    inf.parent.replaceChild(mrow, inf);\n    mrow.setChildren([inf]);\n    moveProperties(inf, mrow);\n    inf = mrow;\n  }\n  // TODO: Simplify below as we now have a definite mrow.\n  const index = right ? inf.childNodes.length - 1 : 0;\n  let mspace = inf.childNodes[index] as MmlNode;\n  if (NodeUtil.isType(mspace, 'mspace')) {\n    NodeUtil.setAttribute(\n      mspace, 'width',\n      ParseUtil.Em(ParseUtil.dimen2em(\n        NodeUtil.getAttribute(mspace, 'width') as string) + space));\n    return;\n  }\n  mspace = config.nodeFactory.create('node', 'mspace', [],\n                                     {width: ParseUtil.Em(space)});\n  if (right) {\n    inf.appendChild(mspace);\n    return;\n  }\n  mspace.parent = inf;\n  inf.childNodes.unshift(mspace);\n};\n\n\n/**\n * Propagates properties up the tree.\n * @param {MmlNode} src The source node.\n * @param {MmlNode} dest The destination node.\n */\nlet moveProperties = function(src: MmlNode, dest: MmlNode) {\n  let props = ['inference', 'proof', 'maxAdjust', 'labelledRule'];\n  props.forEach(x => {\n    let value = getProperty(src, x);\n    if (value != null) {\n      setProperty(dest, x, value);\n      removeProperty(src, x);\n    }\n  });\n};\n\n\n\n/********************************\n * The following methods deal with sequents. There are still issues with the\n * spatial layout, though.\n */\n// Sequents look like this: table row 3 cells\n// The table has the 'sequent' property.\n// The row is the node that is actually saved in the config object.\n/**\n * Method to adjust sequent positioning after the tree is computed.\n * @param {ParseOptions} config Parser configuration options.\n */\nlet adjustSequents = function(config: ParseOptions) {\n  let sequents = config.nodeLists['sequent'];\n  if (!sequents) {\n    return;\n  }\n  for (let i = sequents.length - 1, seq; seq = sequents[i]; i--) {\n    if (getProperty(seq, 'sequentProcessed')) {\n      removeProperty(seq, 'sequentProcessed');\n      continue;\n    }\n    let collect = [];\n    let inf = getParentInf(seq);\n    if (getProperty(inf, 'inference') !== 1) {\n      continue;\n    }\n    collect.push(seq);\n    while (getProperty(inf, 'inference') === 1) {\n      // In case we have a table with a label.\n      inf = getRule(inf);\n      let premise = firstPremise(getPremises(inf, getProperty(inf, 'inferenceRule') as string));\n      let sequent = (getProperty(premise, 'inferenceRule')) ?\n        // If the first premise is an inference rule, check the conclusions for a sequent.\n        getConclusion(premise, getProperty(premise, 'inferenceRule') as string) :\n        // Otherwise it is a hyp and we have to check the formula itself.\n        premise;\n      if (getProperty(sequent, 'sequent')) {\n        seq = sequent.childNodes[0] as MmlNode;\n        collect.push(seq);\n        setProperty(seq, 'sequentProcessed', true);\n      }\n      inf = premise;\n    }\n    adjustSequentPairwise(config, collect);\n  }\n};\n\n\n/**\n * Add spaces to the sequents where necessary.\n * @param {ParseOptions} config Parser configuration options.\n * @param {MmlNode} sequent The sequent inference rule.\n * @param {number} position Position of formula to adjust (0 or 2).\n * @param {string} direction Left or right of the turnstyle.\n * @param {number} width The space to add to the formulas.\n */\nconst addSequentSpace = function(config: ParseOptions, sequent: MmlNode,\n                                 position: number, direction: string, width: number) {\n  let mspace = config.nodeFactory.create('node', 'mspace', [],\n                                         {width: ParseUtil.Em(width)});\n  if (direction === 'left') {\n    let row = sequent.childNodes[position].childNodes[0] as MmlNode;\n    mspace.parent = row;\n    row.childNodes.unshift(mspace);\n  } else {\n    sequent.childNodes[position].appendChild(mspace);\n  }\n  setProperty(sequent.parent, 'sequentAdjust_' + direction, width);\n};\n\n\n/**\n * Adjusts the sequent positioning for a list of inference rules by pairwise\n * adjusting the width of formulas in sequents. I.e.,\n *    A,B |- C\n * ------------\n *    A |- B,C\n *\n * will be adjusted to\n *\n *    A, B |- C\n * ----------------\n *       A |- B,C\n *\n * @param {ParseOptions} config Parser configuration options.\n * @param {MmlNode[]} sequents The list of sequents.\n */\nconst adjustSequentPairwise = function(config: ParseOptions, sequents: MmlNode[]) {\n  let top = sequents.pop();\n  while (sequents.length) {\n    let bottom = sequents.pop();\n    let [left, right] = compareSequents(top, bottom);\n    if (getProperty(top.parent, 'axiom')) {\n      addSequentSpace(config, left < 0 ? top : bottom, 0, 'left', Math.abs(left));\n      addSequentSpace(config, right < 0 ? top : bottom, 2, 'right', Math.abs(right));\n    }\n    top = bottom;\n  }\n};\n\n\n/**\n * Compares the top and bottom sequent of a inference rule\n * Top:     A |- B\n *        ----------\n * Bottom:  C |- D\n *\n * @param {MmlNode} top Top sequent.\n * @param {MmlNode} bottom Bottom sequent.\n * @return {[number, number]} The delta for left and right side of the sequents.\n */\nconst compareSequents = function(top: MmlNode, bottom: MmlNode): [number, number] {\n  const tr = getBBox(top.childNodes[2] as MmlNode);\n  const br = getBBox(bottom.childNodes[2] as MmlNode);\n  const tl = getBBox(top.childNodes[0] as MmlNode);\n  const bl = getBBox(bottom.childNodes[0] as MmlNode);\n  // Deltas\n  const dl = tl - bl;\n  const dr = tr - br;\n  return [dl, dr];\n};\n\n// For every inference rule we adjust the width of ruler by subtracting and\n// adding suitable spaces around the rule. The algorithm in detail.\n//\n// Notions that we need:\n//\n//\n// * Inference: The inference consisting either of an inference rule or a\n//              structure containing the rule plus 0 - 2 labels and spacing\n//              elements.  s l{0,1} t r{0,1} s', m,n \\in IN_0\n//\n//              Technically this is realised as nested rows, if the spaces\n//              and/or labels exist:\n//              mr s mr l t r /mr s' /mr\n//\n// * InferenceRule: The rule without the labels and spacing.\n//\n// * Conclusion: The element forming the conclusion of the rule. In\n//               downwards inferences this is the final row of the table.\n//\n// * Premises: The premises of the rule. In downwards inferences this is the\n//             first row of the rule. Note that this is a rule itself,\n//             with one column for each premise and an empty column\n//             inbetween.\n//\n// * |x|: Width of bounding box of element x.\n//\n// Left adjustment:\n//\n// * For the given inference I:\n//    + compute rule R of I\n//    + compute premises P of I\n//    + compute premise P_f, P_l as first and last premise of I\n//\n// * If P_f is an inference rule:\n//    + compute adjust value a_f for wrapper W_f of P_f\n//    + add -a_f space to wrapper W_f\n//    + add  a_f space to wrapper W\n//\n// * If P_l is an inference rule:\n//   + compute adjust value a_l for wrapper W_l of P_l\n//   + if I has (right) label L: a_l = a_l + |L|\n//   + add -a_l space to P_l\n//   + a_l = max(a_l, A_I), where A_I is saved ajust value in the\n//     \"maxAdjust\" attribute of I.\n//\n//   + Case I is proof: Add a_l space to inf. (Correct after proof.)\n//   + Case I has sibling: Add a_l space to sibling.  (Correct after column.)\n//   + Otherwise: Propagate a_l by\n//                ++ find direct parent infererence rule I'\n//                ++ Set A_{I'} = a_l.\n//\n/**\n * Implements the above algorithm.\n * @param {FilterData} arg The parser configuration and mathitem to filter.\n */\nexport let balanceRules = function(arg: FilterData) {\n  item = new arg.document.options.MathItem('', null, arg.math.display);\n  let config = arg.data;\n  adjustSequents(config);\n  let inferences = config.nodeLists['inference'] || [];\n  for (let inf of inferences) {\n    let isProof = getProperty(inf, 'proof');\n    // This currently only works with downwards rules.\n    let rule = getRule(inf);\n    let premises = getPremises(rule, getProperty(rule, 'inferenceRule') as string);\n    let premiseF = firstPremise(premises);\n    if (getProperty(premiseF, 'inference')) {\n      let adjust = adjustValue(premiseF);\n      if (adjust) {\n        addSpace(config, premiseF, -adjust);\n        let w = getSpaces(inf, rule, false);\n        addSpace(config, inf, adjust - w);\n      }\n    }\n    // Right adjust:\n    let premiseL = lastPremise(premises);\n    if (getProperty(premiseL, 'inference') == null) {\n      continue;\n    }\n    let adjust = adjustValue(premiseL, true);\n    addSpace(config, premiseL, -adjust, true);\n    let w = getSpaces(inf, rule, true);\n    let maxAdjust = getProperty(inf, 'maxAdjust') as number;\n    if (maxAdjust != null) {\n      adjust = Math.max(adjust, maxAdjust);\n    }\n    let column: MmlNode;\n    if (isProof || !(column = getColumn(inf))) {\n      // After the tree we add a space with the accumulated max value.\n      // If the element is not in a column, we know we have some noise and the\n      // proof is an mrow around the final inference.\n      addSpace(config,\n               // in case the rule has been moved into an mrow in Left Adjust.\n               getProperty(inf, 'proof') ? inf : inf.parent, adjust - w, true);\n      continue;\n    }\n    let sibling = nextSibling(column);\n    if (sibling) {\n      // If there is a next column, it is the empty one and we make it wider by\n      // the accumulated max value.\n      const pos = config.nodeFactory.create('node', 'mspace', [],\n                                            {width: adjust - w + 'em'});\n      sibling.appendChild(pos);\n      inf.removeProperty('maxAdjust');\n      continue;\n    }\n    let parentRule = getParentInf(column);\n    if (!parentRule) {\n      continue;\n    }\n    // We are currently in rightmost inference, so we propagate the max\n    // correction value up in the tree.\n    adjust = getProperty(parentRule, 'maxAdjust') ?\n      Math.max(getProperty(parentRule, 'maxAdjust') as number, adjust) : adjust;\n    setProperty(parentRule, 'maxAdjust', adjust);\n  }\n};\n\n\n/**\n * Facilities for semantically relevant properties. These are used by SRE and\n * are always prefixed with bspr_.\n */\nlet property_prefix = 'bspr_';\nlet blacklistedProperties = {\n  [property_prefix + 'maxAdjust']: true\n};\n\n\n/**\n * Sets a bussproofs property used for postprocessing and to convey\n * semantics. Uses the bspr prefix.\n * @param {MmlNode} node The node.\n * @param {string} property The property to set.\n * @param {Property} value Its value.\n */\nexport let setProperty = function(node: MmlNode, property: string, value: Property) {\n  NodeUtil.setProperty(node, property_prefix + property, value);\n};\n\n\n/**\n * Gets a bussproofs property.\n * @param {MmlNode} node The node.\n * @param {string} property The property to retrieve.\n * @return {Property} The property object.\n */\nexport let getProperty = function(node: MmlNode, property: string): Property {\n  return NodeUtil.getProperty(node, property_prefix + property);\n};\n\n\n/**\n * Removes a bussproofs property.\n * @param {MmlNode} node\n * @param {string} property\n */\nexport let removeProperty = function(node: MmlNode, property: string) {\n  node.removeProperty(property_prefix + property);\n};\n\n\n/**\n * Postprocessor that adds properties as attributes to the nodes, unless they\n * are blacklisted.\n * @param {FilterData} arg The object to post-process.\n */\nexport let makeBsprAttributes = function(arg: FilterData) {\n  arg.data.root.walkTree((mml: MmlNode, _data?: any) => {\n    let attr: string[] = [];\n    mml.getPropertyNames().forEach(x => {\n      if (!blacklistedProperties[x] && x.match(RegExp('^' + property_prefix))) {\n        attr.push(x + ':' + mml.getProperty(x));\n      }\n    });\n    if (attr.length) {\n      NodeUtil.setAttribute(mml, 'semantics', attr.join(';'));\n    }\n  });\n};\n\n/**\n * Preprocessor that sets the document and jax for bounding box computations\n * @param {FilterData} arg The object to pre-process.\n */\nexport let saveDocument = function (arg: FilterData) {\n  doc = arg.document;\n  if (!('getBBox' in doc.outputJax)) {\n    throw Error('The bussproofs extension requires an output jax with a getBBox() method');\n  }\n};\n\n/**\n * Clear the document when we are done\n * @param {FilterData} arg The object to pre-process.\n */\nexport let clearDocument = function (_arg: FilterData) {\n  doc = null;\n};\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Items for TeX parsing of bussproofs.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport TexError from '../TexError.js';\nimport {BaseItem, CheckType, StackItem} from '../StackItem.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport Stack from '../Stack.js';\nimport * as BussproofsUtil from './BussproofsUtil.js';\n\n\nexport class ProofTreeItem extends BaseItem {\n\n\n  /**\n   * The current left label.\n   * @type {MmlNode[]}\n   */\n  public leftLabel: MmlNode[] = null;\n\n  /**\n   * The current right label.\n   * @type {MmlNode[]}\n   */\n  public rigthLabel: MmlNode[] = null;\n\n  private innerStack: Stack = new Stack(this.factory, {}, true);\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'proofTree';\n  }\n\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('end') && item.getName() === 'prooftree') {\n      let node = this.toMml();\n      BussproofsUtil.setProperty(node, 'proof', true);\n      return [[this.factory.create('mml', node), item], true];\n    }\n    if (item.isKind('stop')) {\n      throw new TexError('EnvMissingEnd', 'Missing \\\\end{%1}', this.getName());\n    }\n    this.innerStack.Push(item);\n    return BaseItem.fail;\n  }\n\n\n  /**\n   * @override\n   */\n  public toMml() {\n    const tree = super.toMml();\n    const start = this.innerStack.Top();\n    if (start.isKind('start') && !start.Size()) {\n      return tree;\n    }\n    this.innerStack.Push(this.factory.create('stop'));\n    let prefix = this.innerStack.Top().toMml();\n    return this.create('node', 'mrow', [prefix, tree], {});\n  }\n}\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for TeX parsing for the bussproofs package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {ParseMethod} from '../Types.js';\nimport TexError from '../TexError.js';\nimport TexParser from '../TexParser.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {StackItem} from '../StackItem.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport * as BussproofsUtil from './BussproofsUtil.js';\n\n\n// Namespace\nlet BussproofsMethods: Record<string, ParseMethod> = {};\n\n/**\n * Implements the proof tree environment.\n * @param {TexParser} parser The current parser.\n * @param {StackItem} begin The opening element of the environment.\n * @return {StackItem} The proof tree stackitem.\n */\n// TODO: Error handling if we have leftover elements or elements are not in the\n// required order.\nBussproofsMethods.Prooftree = function(parser: TexParser, begin: StackItem): StackItem {\n  parser.Push(begin);\n  // TODO: Check if opening a proof tree is legal.\n  let newItem = parser.itemFactory.create('proofTree').\n    setProperties({name: begin.getName(),\n                   line: 'solid', currentLine: 'solid', rootAtTop: false});\n  // parser.Push(item);\n  return newItem;\n};\n\n\n/**\n * Implements the Axiom command.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n */\nBussproofsMethods.Axiom = function(parser: TexParser, name: string) {\n  let top = parser.stack.Top();\n  // TODO: Label error\n  if (top.kind !== 'proofTree') {\n    throw new TexError('IllegalProofCommand',\n                       'Proof commands only allowed in prooftree environment.');\n  }\n  let content = paddedContent(parser, parser.GetArgument(name));\n  BussproofsUtil.setProperty(content, 'axiom', true);\n  top.Push(content);\n};\n\n\n/**\n * Pads content of an inference rule.\n * @param {TexParser} parser The calling parser.\n * @param {string} content The content to be padded.\n * @return {MmlNode} The mrow element with padded content.\n */\nconst paddedContent = function(parser: TexParser, content: string): MmlNode {\n  // Add padding on either site.\n  let nodes = ParseUtil.internalMath(parser, ParseUtil.trimSpaces(content), 0);\n  if (!nodes[0].childNodes[0].childNodes.length) {\n    return parser.create('node', 'mrow', []);\n  }\n  let lpad = parser.create('node', 'mspace', [], {width: '.5ex'});\n  let rpad = parser.create('node', 'mspace', [], {width: '.5ex'});\n  return parser.create('node', 'mrow', [lpad, ...nodes, rpad]);\n};\n\n\n/**\n * Implements the Inference rule commands.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n * @param {number} n Number of premises for this inference rule.\n */\nBussproofsMethods.Inference = function(parser: TexParser, name: string, n: number) {\n  let top = parser.stack.Top();\n  if (top.kind !== 'proofTree') {\n    throw new TexError('IllegalProofCommand',\n                       'Proof commands only allowed in prooftree environment.');\n  }\n  if (top.Size() < n) {\n    throw new TexError('BadProofTree', 'Proof tree badly specified.');\n  }\n  const rootAtTop = top.getProperty('rootAtTop') as boolean;\n  const childCount = (n === 1 && !top.Peek()[0].childNodes.length) ? 0 : n;\n  let children: MmlNode[] = [];\n  do {\n    if (children.length) {\n      children.unshift(parser.create('node', 'mtd', [], {}));\n    }\n    children.unshift(\n      parser.create('node', 'mtd', [top.Pop()],\n                    {'rowalign': (rootAtTop ? 'top' : 'bottom')}));\n    n--;\n  } while (n > 0);\n  let row = parser.create('node', 'mtr', children, {});\n  let table = parser.create('node', 'mtable', [row], {framespacing: '0 0'});\n  let conclusion = paddedContent(parser, parser.GetArgument(name));\n  let style = top.getProperty('currentLine') as string;\n  if (style !== top.getProperty('line')) {\n    top.setProperty('currentLine', top.getProperty('line'));\n  }\n  let rule = createRule(\n    parser, table, [conclusion], top.getProperty('left') as MmlNode,\n    top.getProperty('right') as MmlNode, style, rootAtTop);\n  top.setProperty('left', null);\n  top.setProperty('right', null);\n  BussproofsUtil.setProperty(rule, 'inference', childCount);\n  parser.configuration.addNode('inference', rule);\n  top.Push(rule);\n};\n\n\n/**\n * Creates a ND style inference rule.\n * @param {TexParser} parser The calling parser.\n * @param {MmlNode} premise The premise (a single table).\n * @param {MmlNode[]} conclusions Elements that are combined into the conclusion.\n * @param {MmlNode|null} left The left label if it exists.\n * @param {MmlNode|null} right The right label if it exists.\n * @param {string} style Style of inference rule line.\n * @param {boolean} rootAtTop Direction of inference rule: true for root at top.\n */\nfunction createRule(parser: TexParser, premise: MmlNode,\n                    conclusions: MmlNode[], left: MmlNode | null,\n                    right: MmlNode | null, style: string,\n                    rootAtTop: boolean) {\n  const upper = parser.create(\n    'node', 'mtr', [parser.create('node', 'mtd', [premise], {})], {});\n  const lower = parser.create(\n    'node', 'mtr', [parser.create('node', 'mtd', conclusions, {})], {});\n  let rule = parser.create('node', 'mtable', rootAtTop ? [lower, upper] : [upper, lower],\n                           {align: 'top 2', rowlines: style, framespacing: '0 0'});\n  BussproofsUtil.setProperty(rule, 'inferenceRule', rootAtTop ? 'up' : 'down');\n  let leftLabel, rightLabel;\n  if (left) {\n    leftLabel = parser.create(\n      'node', 'mpadded', [left],\n      {height: '+.5em', width: '+.5em', voffset: '-.15em'});\n    BussproofsUtil.setProperty(leftLabel, 'prooflabel', 'left');\n  }\n  if (right) {\n    rightLabel = parser.create(\n      'node', 'mpadded', [right],\n      {height: '+.5em', width: '+.5em', voffset: '-.15em'});\n    BussproofsUtil.setProperty(rightLabel, 'prooflabel', 'right');\n  }\n  let children, label;\n  if (left && right) {\n    children = [leftLabel, rule, rightLabel];\n    label = 'both';\n  } else if (left) {\n    children = [leftLabel, rule];\n    label = 'left';\n  } else if (right) {\n    children = [rule, rightLabel];\n    label = 'right';\n  } else {\n    return rule;\n  }\n  rule = parser.create('node', 'mrow', children);\n  BussproofsUtil.setProperty(rule, 'labelledRule', label);\n  return rule;\n}\n\n\n/**\n * Implements the label command.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n * @param {string} side The side of the label.\n */\nBussproofsMethods.Label = function(parser: TexParser, name: string, side: string) {\n  let top = parser.stack.Top();\n  // Label error\n  if (top.kind !== 'proofTree') {\n    throw new TexError('IllegalProofCommand',\n                       'Proof commands only allowed in prooftree environment.');\n  }\n  let content = ParseUtil.internalMath(parser, parser.GetArgument(name), 0);\n  let label = (content.length > 1) ?\n    parser.create('node', 'mrow', content, {}) : content[0];\n  top.setProperty(side, label);\n};\n\n\n/**\n * Sets line style for inference rules.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n * @param {string} style The line style to set.\n * @param {boolean} always Set as permanent style.\n */\nBussproofsMethods.SetLine = function(parser: TexParser, _name: string, style: string, always: boolean) {\n  let top = parser.stack.Top();\n  // Label error\n  if (top.kind !== 'proofTree') {\n    throw new TexError('IllegalProofCommand',\n                       'Proof commands only allowed in prooftree environment.');\n  }\n  top.setProperty('currentLine', style);\n  if (always) {\n    top.setProperty('line', style);\n  }\n};\n\n\n/**\n * Implements commands indicating where the root of the proof tree is.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n * @param {string} where If true root is at top, otherwise at bottom.\n */\nBussproofsMethods.RootAtTop = function(parser: TexParser, _name: string, where: boolean) {\n  let top = parser.stack.Top();\n  if (top.kind !== 'proofTree') {\n    throw new TexError('IllegalProofCommand',\n                       'Proof commands only allowed in prooftree environment.');\n  }\n  top.setProperty('rootAtTop', where);\n};\n\n\n/**\n * Implements Axiom command for sequents.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n */\nBussproofsMethods.AxiomF = function(parser: TexParser, name: string) {\n  let top = parser.stack.Top();\n  if (top.kind !== 'proofTree') {\n    throw new TexError('IllegalProofCommand',\n                       'Proof commands only allowed in prooftree environment.');\n  }\n  let line = parseFCenterLine(parser, name);\n  BussproofsUtil.setProperty(line, 'axiom', true);\n  top.Push(line);\n};\n\n\n/**\n * Parses a line with a sequent (i.e., one containing \\\\fcenter).\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the calling command.\n * @return {MmlNode} The parsed line.\n */\nfunction parseFCenterLine(parser: TexParser, name: string): MmlNode {\n  let dollar = parser.GetNext();\n  if (dollar !== '$') {\n    throw new TexError('IllegalUseOfCommand',\n                       'Use of %1 does not match it\\'s definition.', name);\n  }\n  parser.i++;\n  let axiom = parser.GetUpTo(name, '$');\n  if (axiom.indexOf('\\\\fCenter') === -1) {\n    throw new TexError('IllegalUseOfCommand',\n                       'Missing \\\\fCenter in %1.', name);\n  }\n  // Check for fCenter and throw error?\n  let [prem, conc] = axiom.split('\\\\fCenter');\n  let premise = (new TexParser(prem, parser.stack.env, parser.configuration)).mml();\n  let conclusion = (new TexParser(conc, parser.stack.env, parser.configuration)).mml();\n  let fcenter = (new TexParser('\\\\fCenter', parser.stack.env, parser.configuration)).mml();\n  const left = parser.create('node', 'mtd', [premise], {});\n  const middle = parser.create('node', 'mtd', [fcenter], {});\n  const right = parser.create('node', 'mtd', [conclusion], {});\n  const row = parser.create('node', 'mtr', [left, middle, right], {});\n  const table = parser.create('node', 'mtable', [row], {columnspacing: '.5ex', columnalign: 'center 2'});\n  BussproofsUtil.setProperty(table, 'sequent', true);\n  parser.configuration.addNode('sequent', row);\n  return table;\n}\n\n\n/**\n * Placeholder for Fcenter macro that can be overwritten with renewcommand.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n */\nBussproofsMethods.FCenter = function(_parser: TexParser, _name: string) { };\n\n\n/**\n * Implements inference rules for sequents.\n * @param {TexParser} parser The current parser.\n * @param {string} name The name of the command.\n * @param {number} n Number of premises for this inference rule.\n */\nBussproofsMethods.InferenceF = function(parser: TexParser, name: string, n: number) {\n  let top = parser.stack.Top();\n  if (top.kind !== 'proofTree') {\n    throw new TexError('IllegalProofCommand',\n                       'Proof commands only allowed in prooftree environment.');\n  }\n  if (top.Size() < n) {\n    throw new TexError('BadProofTree', 'Proof tree badly specified.');\n  }\n  const rootAtTop = top.getProperty('rootAtTop') as boolean;\n  const childCount = (n === 1 && !top.Peek()[0].childNodes.length) ? 0 : n;\n  let children: MmlNode[] = [];\n  do {\n    if (children.length) {\n      children.unshift(parser.create('node', 'mtd', [], {}));\n    }\n    children.unshift(\n      parser.create('node', 'mtd', [top.Pop()],\n                    {'rowalign': (rootAtTop ? 'top' : 'bottom')}));\n    n--;\n  } while (n > 0);\n  let row = parser.create('node', 'mtr', children, {});\n  let table = parser.create('node', 'mtable', [row], {framespacing: '0 0'});\n\n  let conclusion = parseFCenterLine(parser, name); // TODO: Padding\n  let style = top.getProperty('currentLine') as string;\n  if (style !== top.getProperty('line')) {\n    top.setProperty('currentLine', top.getProperty('line'));\n  }\n  let rule = createRule(\n    parser, table, [conclusion], top.getProperty('left') as MmlNode,\n    top.getProperty('right') as MmlNode, style, rootAtTop);\n  top.setProperty('left', null);\n  top.setProperty('right', null);\n  BussproofsUtil.setProperty(rule, 'inference', childCount);\n  parser.configuration.addNode('inference', rule);\n  top.Push(rule);\n};\n\nexport default BussproofsMethods;\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for TeX parsing for Bussproofs package commands.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport BussproofsMethods from './BussproofsMethods.js';\nimport ParseMethods from '../ParseMethods.js';\nimport {CommandMap, EnvironmentMap} from '../SymbolMap.js';\n\n\n/**\n * Macros for bussproofs etc.\n */\nnew CommandMap('Bussproofs-macros', {\n  AxiomC:           'Axiom',\n  UnaryInfC:        ['Inference', 1],\n  BinaryInfC:       ['Inference', 2],\n  TrinaryInfC:      ['Inference', 3],\n  QuaternaryInfC:   ['Inference', 4],\n  QuinaryInfC:      ['Inference', 5],\n  RightLabel:       ['Label', 'right'],\n  LeftLabel:        ['Label', 'left'],\n  // Abbreviations are automatically enabled\n  AXC:              'Axiom',\n  UIC:              ['Inference', 1],\n  BIC:              ['Inference', 2],\n  TIC:              ['Inference', 3],\n  RL:               ['Label', 'right'],\n  LL:               ['Label', 'left'],\n\n  noLine:           ['SetLine', 'none', false],\n  singleLine:       ['SetLine', 'solid', false],\n  solidLine:        ['SetLine', 'solid', false],\n  dashedLine:       ['SetLine', 'dashed', false],\n  // Not yet implemented in CSS!\n  // doubleLine:       ['SetLine', 'double', false],\n  // dottedLine:       ['SetLine', 'dotted', false],\n\n  alwaysNoLine:           ['SetLine', 'none', true],\n  alwaysSingleLine:       ['SetLine', 'solid', true],\n  alwaysSolidLine:        ['SetLine', 'solid', true],\n  alwaysDashedLine:       ['SetLine', 'dashed', true],\n  // Not yet implemented in CSS!\n  // alwaysDoubleLine:       ['SetLine', 'double', true],\n  // alwaysDottedLine:       ['SetLine', 'dotted', true],\n\n  rootAtTop: ['RootAtTop', true],\n  alwaysRootAtTop: ['RootAtTop', true],\n\n  rootAtBottom: ['RootAtTop', false],\n  alwaysRootAtBottom: ['RootAtTop', false],\n  // TODO: always commands should be persistent.\n\n  fCenter:         'FCenter',\n  Axiom:           'AxiomF',\n  UnaryInf:        ['InferenceF', 1],\n  BinaryInf:        ['InferenceF', 2],\n  TrinaryInf:        ['InferenceF', 3],\n  QuaternaryInf:        ['InferenceF', 4],\n  QuinaryInf:        ['InferenceF', 5]\n}, BussproofsMethods);\n\n\nnew EnvironmentMap('Bussproofs-environments', ParseMethods.environment, {\n  prooftree:        ['Prooftree', null, false]\n}, BussproofsMethods);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the Bussproofs package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {ProofTreeItem} from './BussproofsItems.js';\nimport {saveDocument, clearDocument, balanceRules, makeBsprAttributes} from './BussproofsUtil.js';\nimport './BussproofsMappings.js';\n\n\nexport const BussproofsConfiguration = Configuration.create(\n  'bussproofs', {\n    handler: {\n      macro: ['Bussproofs-macros'],\n      environment: ['Bussproofs-environments']\n    },\n    items: {\n      [ProofTreeItem.prototype.kind]: ProofTreeItem,\n    },\n    preprocessors: [\n      [saveDocument, 1]\n    ],\n    postprocessors: [\n      [clearDocument, 3],\n      [makeBsprAttributes, 2],\n      [balanceRules, 1]\n    ]\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the enclose package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport ParseUtil from '../ParseUtil.js';\n\n\n/**\n * The attributes allowed in \\enclose{notation}[attributes]{math}\n * @type {{[key: string]: number}}\n */\nexport const ENCLOSE_OPTIONS: {[key: string]: number} = {\n  'data-arrowhead': 1,\n  color: 1,\n  mathcolor: 1,\n  background: 1,\n  mathbackground: 1,\n  'data-padding': 1,\n  'data-thickness': 1\n};\n\n\n// Namespace\nexport let EncloseMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Implements \\enclose{notation}[attr]{math}\n * (create <menclose notation=\"notation\">math</menclose>)\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nEncloseMethods.Enclose = function(parser: TexParser, name: string) {\n  let notation = parser.GetArgument(name).replace(/,/g, ' ');\n  const attr = parser.GetBrackets(name, '');\n  const math = parser.ParseArg(name);\n  const def = ParseUtil.keyvalOptions(attr, ENCLOSE_OPTIONS);\n  def.notation = notation;\n  parser.Push(parser.create('node', 'menclose', [math], def));\n};\n\n\nnew CommandMap('enclose', {enclose: 'Enclose'}, EncloseMethods);\n\n\nexport const EncloseConfiguration = Configuration.create(\n  'enclose', {handler: {macro: ['enclose']}}\n);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the cancel package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\nimport {TexConstant} from '../TexConstants.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {ENCLOSE_OPTIONS} from '../enclose/EncloseConfiguration.js';\n\n\n// Namespace\nexport let CancelMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Parse function for cancel macros of the form \\(b|x)?cancel[attributes]{math}\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n * @param {string} notation The type of cancel notation to use.\n */\nCancelMethods.Cancel = function(parser: TexParser, name: string, notation: string) {\n  const attr = parser.GetBrackets(name, '');\n  const math = parser.ParseArg(name);\n  const def = ParseUtil.keyvalOptions(attr, ENCLOSE_OPTIONS);\n  def['notation'] = notation;\n  parser.Push(parser.create('node', 'menclose', [math], def));\n};\n\n\n/**\n * Parse function implementing \\cancelto{value}[attributes]{math}\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\n\nCancelMethods.CancelTo = function(parser: TexParser, name: string) {\n  const attr = parser.GetBrackets(name, '');\n  let value = parser.ParseArg(name);\n  const math = parser.ParseArg(name);\n  const def = ParseUtil.keyvalOptions(attr, ENCLOSE_OPTIONS);\n  def ['notation'] = [TexConstant.Notation.UPDIAGONALSTRIKE,\n                      TexConstant.Notation.UPDIAGONALARROW,\n                      TexConstant.Notation.NORTHEASTARROW].join(' ');\n  value = parser.create('node', 'mpadded', [value],\n                        {depth: '-.1em', height: '+.1em', voffset: '.1em'});\n  parser.Push(parser.create('node', 'msup',\n                            [parser.create('node', 'menclose', [math], def), value]));\n};\n\n\nnew CommandMap('cancel', {\n  cancel:   ['Cancel', TexConstant.Notation.UPDIAGONALSTRIKE],\n  bcancel:  ['Cancel', TexConstant.Notation.DOWNDIAGONALSTRIKE],\n  xcancel:  ['Cancel', TexConstant.Notation.UPDIAGONALSTRIKE + ' ' +\n             TexConstant.Notation.DOWNDIAGONALSTRIKE],\n  cancelto: 'CancelTo'\n}, CancelMethods);\n\n\nexport const CancelConfiguration = Configuration.create(\n  'cancel', {handler: {macro: ['cancel']}}\n);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Utilities file for the empheq package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\n\nimport ParseUtil from '../ParseUtil.js';\nimport TexParser from '../TexParser.js';\nimport {EnvList} from '../StackItem.js';\nimport {AbstractTags} from '../Tags.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport {MmlMtable} from '../../../core/MmlTree/MmlNodes/mtable.js';\nimport {MmlMtd} from '../../../core/MmlTree/MmlNodes/mtd.js';\nimport {EmpheqBeginItem} from './EmpheqConfiguration.js';\n\nexport const EmpheqUtil = {\n\n  /**\n   * Create the needed envinronment and process it by the give function.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} env         The environment to create.\n   * @param {Function} func      A function to process the environment.\n   * @param {any[]} args         The arguments for func.\n   */\n  environment(parser: TexParser, env: string, func: Function, args: any[]) {\n    const name = args[0];\n    const item = parser.itemFactory.create(name + '-begin').setProperties({name: env, end: name});\n    parser.Push(func(parser, item, ...args.slice(1)));\n  },\n\n  /**\n   * Parse an options string.\n   *\n   * @param {string} text                   The string to parse.\n   * @param {{[key:string]:number} allowed  Object containing options to allow\n   * @return {EnvList}                      The parsed keys\n   */\n  splitOptions(text: string, allowed: {[key: string]: number} = null): EnvList {\n    return ParseUtil.keyvalOptions(text, allowed, true);\n  },\n\n  /**\n   * Find the number of columns in the table.\n   *\n   * @param {MmlMtable} table   The table whose columns to count.\n   * @return {number}           The number of columns in the table.\n   */\n  columnCount(table: MmlMtable): number {\n    let m = 0;\n    for (const row of table.childNodes) {\n      const n = row.childNodes.length - (row.isKind('mlabeledtr') ? 1 : 0);\n      if (n > m) m = n;\n    }\n    return m;\n  },\n\n  /**\n   * Create an mpadded element with no height and depth, but whose\n   *   content is the given TeX code with a phantom that is the height and\n   *   depth of the given table.\n   *\n   * @param {string} tex        The TeX code to put in the box.\n   * @param {MmlTable} table    The table used to size the box.\n   * @param {TexParser} parser  The active tex parser.\n   * @param {string} env        The name of the current environment.\n   * @return {MmlNode}          The mpadded element.\n   */\n  cellBlock(tex: string, table: MmlMtable, parser: TexParser, env: string): MmlNode {\n    const mpadded = parser.create('node', 'mpadded', [], {height: 0, depth: 0, voffset: '-1height'});\n    const result = new TexParser(tex, parser.stack.env, parser.configuration);\n    const mml = result.mml();\n    if (env && result.configuration.tags.label) {\n      (result.configuration.tags.currentTag as any).env = env;\n      (result.configuration.tags as AbstractTags).getTag(true);\n    }\n    for (const child of (mml.isInferred ? mml.childNodes : [mml])) {\n      mpadded.appendChild(child);\n    }\n    mpadded.appendChild(parser.create('node', 'mphantom', [\n      parser.create('node', 'mpadded', [table], {width: 0})\n    ]));\n    return mpadded;\n  },\n\n  /**\n   * Make a copy of the table with only the first row and create a phantom element\n   *   that has its height and depth.\n   *\n   * @param {MmlMtable} original   The original table.\n   * @param {TexParser} parser     The active tex parser.\n   * @return {MmlNode}             The resulting mphantom element.\n   */\n  topRowTable(original: MmlMtable, parser: TexParser): MmlNode {\n    const table = ParseUtil.copyNode(original, parser);\n    table.setChildren(table.childNodes.slice(0, 1));\n    table.attributes.set('align', 'baseline 1');\n    return original.factory.create('mphantom', {}, [parser.create('node', 'mpadded', [table],  {width: 0})]);\n  },\n\n  /**\n   * Add an mpadded element that has zero height and depth but whose content is\n   *   the cell block for the given TeX code followed by a struct the size of the top row.\n   *\n   * @param {MmlMtd} mtd         The mtd to add content to.\n   * @param {string} tex         The TeX string to put into the cell.\n   * @param {MmlMtable} table    The reference table used for its various heights.\n   * @param {TexParser} parser   The active tex parser.\n   * @param {srting} env         The current environment.\n   */\n  rowspanCell(mtd: MmlMtd, tex: string, table: MmlMtable, parser: TexParser, env: string) {\n    mtd.appendChild(\n      parser.create('node', 'mpadded', [\n        this.cellBlock(tex, ParseUtil.copyNode(table, parser), parser, env),\n        this.topRowTable(table, parser)\n      ], {height: 0, depth: 0, voffset: 'height'})\n    );\n  },\n\n  /**\n   * Add something on the left of the original table.\n   *\n   * @param {MmlMtable} table     The table to modify.\n   * @param {MmlMtable} original  The original table.\n   * @param {string} left         The TeX code to add to the left.\n   * @param {TexParser} parser    The active tex parser.\n   * @param {string} env          The current environment.\n   */\n  left(table: MmlMtable, original: MmlMtable, left: string, parser: TexParser, env: string = '') {\n    table.attributes.set('columnalign', 'right ' + (table.attributes.get('columnalign') || ''));\n    table.attributes.set('columnspacing', '0em ' + (table.attributes.get('columnspacing') || ''));\n    let mtd;\n    for (const row of table.childNodes.slice(0).reverse()) {\n      mtd = parser.create('node', 'mtd');\n      row.childNodes.unshift(mtd);\n      mtd.parent = row;\n      if (row.isKind('mlabeledtr')) {\n        row.childNodes[0] = row.childNodes[1];\n        row.childNodes[1] = mtd;\n      }\n    }\n    this.rowspanCell(mtd, left, original, parser, env);\n  },\n\n  /**\n   * Add something on the right of the original table.\n   *\n   * @param {MmlMtable} table     The table to modify.\n   * @param {MmlMtable} original  The original table.\n   * @param {string} right        The TeX code to add to the right.\n   * @param {TexParser} parser    The active tex parser.\n   * @param {string} env          The current environment.\n   */\n  right(table: MmlMtable, original: MmlMtable, right: string, parser: TexParser, env: string = '') {\n    if (table.childNodes.length === 0) {\n      table.appendChild(parser.create('node', 'mtr'));\n    }\n    const m = EmpheqUtil.columnCount(table);\n    const row = table.childNodes[0];\n    while (row.childNodes.length < m) row.appendChild(parser.create('node', 'mtd'));\n    const mtd = row.appendChild(parser.create('node', 'mtd')) as MmlMtd;\n    EmpheqUtil.rowspanCell(mtd, right, original, parser, env);\n    table.attributes.set(\n      'columnalign',\n      (table.attributes.get('columnalign') as string || '').split(/ /).slice(0, m).join(' ') + ' left'\n    );\n    table.attributes.set(\n      'columnspacing',\n      (table.attributes.get('columnspacing') as string || '').split(/ /).slice(0, m - 1).join(' ') + ' 0em'\n    );\n  },\n\n  /**\n   * Add the left- and right-hand material to the table.\n   */\n  adjustTable(empheq: EmpheqBeginItem, parser: TexParser) {\n    const left = empheq.getProperty('left');\n    const right = empheq.getProperty('right');\n    if (left || right) {\n      const table = empheq.Last;\n      const original = ParseUtil.copyNode(table, parser);\n      if (left) this.left(table, original, left, parser);\n      if (right) this.right(table, original, right, parser);\n    }\n  },\n\n  /**\n   * The environments allowed to be used in the empheq environment.\n   */\n  allowEnv: {\n    equation: true,\n    align: true,\n    gather: true,\n    flalign: true,\n    alignat: true,\n    multline: true\n  },\n\n  /**\n   * Checks to see if the given environment is one of the allowed ones.\n   *\n   * @param {string} env   The environment to check.\n   * @return {boolean}     True if the environment is allowed.\n   */\n  checkEnv(env: string): boolean {\n    return this.allowEnv.hasOwnProperty(env.replace(/\\*$/, '')) || false;\n  }\n\n};\n", "import {Configuration} from '../Configuration.js';\nimport {EnvironmentMap, MacroMap} from '../SymbolMap.js';\nimport ParseUtil from '../ParseUtil.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {BeginItem, EqnArrayItem} from '../base/BaseItems.js';\nimport {AmsTags} from '../ams/AmsConfiguration.js';\nimport {StackItem, CheckType} from '../StackItem.js';\nimport {MmlMtable} from '../../../core/MmlTree/MmlNodes/mtable.js';\nimport {EmpheqUtil} from '../empheq/EmpheqUtil.js';\n\n/**\n * The StackItem for the numcases environment.\n */\nexport class CasesBeginItem extends BeginItem {\n\n  /**\n   * @override\n   */\n  get kind() {\n    return 'cases-begin';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem) {\n    if (item.isKind('end') && item.getName() === this.getName()) {\n      if (this.getProperty('end')) {\n        this.setProperty('end', false);\n        return [[], true] as CheckType;\n      }\n    }\n    return super.checkItem(item);\n  }\n\n}\n\n/**\n * A tagging class for the subnumcases environment.\n */\nexport class CasesTags extends AmsTags {\n\n  /**\n   * The counter for the subnumber.\n   */\n  protected subcounter = 0;\n\n  /**\n   * @override\n   */\n  public start(env: string, taggable: boolean, defaultTags: boolean) {\n    this.subcounter = 0;\n    super.start(env, taggable, defaultTags);\n  }\n\n  /**\n   * @override\n   */\n  public autoTag() {\n    if (this.currentTag.tag != null) return;\n    if (this.currentTag.env === 'subnumcases') {\n      if (this.subcounter === 0) this.counter++;\n      this.subcounter++;\n      this.tag(this.formatNumber(this.counter, this.subcounter), false);\n    } else {\n      if (this.subcounter === 0 || this.currentTag.env !== 'numcases-left') this.counter++;\n      this.tag(this.formatNumber(this.counter), false);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public formatNumber(n: number, m: number = null) {\n    return n.toString() + (m === null ? '' : String.fromCharCode(0x60 + m));\n  }\n\n}\n\nexport const CasesMethods = {\n\n  /**\n   * Implements the numcases environment.\n   *\n   * @param {TexParser} texparser   The active tex parser.\n   * @param {CasesBeginItem} begin  The environment begin item.\n   */\n  NumCases(parser: TexParser, begin: CasesBeginItem) {\n    if (parser.stack.env.closing === begin.getName()) {\n      delete parser.stack.env.closing;\n      parser.Push(parser.itemFactory.create('end').setProperty('name', begin.getName())); // finish eqnarray\n      const cases = parser.stack.Top();\n      const table = cases.Last as MmlMtable;\n      const original = ParseUtil.copyNode(table, parser) as MmlMtable;\n      const left = cases.getProperty('left');\n      EmpheqUtil.left(table, original, left + '\\\\empheqlbrace\\\\,', parser, 'numcases-left');\n      parser.Push(parser.itemFactory.create('end').setProperty('name', begin.getName()));\n      return null;\n    } else {\n      const left = parser.GetArgument('\\\\begin{' + begin.getName() + '}');\n      begin.setProperty('left', left);\n      const array = BaseMethods.EqnArray(parser, begin, true, true, 'll', ) as EqnArrayItem;\n      array.arraydef.displaystyle = false;\n      array.arraydef.rowspacing = '.2em';\n      array.setProperty('numCases', true);\n      parser.Push(begin);\n      return array;\n    }\n  },\n\n  /**\n   * Replacement for & in cases environment.\n   */\n  Entry(parser: TexParser, name: string) {\n    if (!parser.stack.Top().getProperty('numCases')) {\n      return BaseMethods.Entry(parser, name);\n    }\n    parser.Push(parser.itemFactory.create('cell').setProperties({isEntry: true, name: name}));\n    //\n    //  Make second column be in \\text{...}\n    //\n    const tex = parser.string;\n    let braces = 0, i = parser.i, m = tex.length;\n    //\n    //  Look through the string character by character...\n    //\n    while (i < m) {\n      const c = tex.charAt(i);\n      if (c === '{') {\n        //\n        //  Increase the nested brace count and go on\n        //\n        braces++;\n        i++;\n      } else if (c === '}') {\n        //\n        //  If there are too many close braces, just end (we will get an\n        //    error message later when the rest of the string is parsed)\n        //  Otherwise\n        //    decrease the nested brace count,\n        //    go on to the next character.\n        //\n        if (braces === 0) {\n          break;\n        } else {\n          braces--;\n          i++;\n        }\n      } else if (c === '&' && braces === 0) {\n        //\n        //  Extra alignment tabs are not allowed in cases\n        //\n        throw new TexError('ExtraCasesAlignTab', 'Extra alignment tab in text for numcase environment');\n      } else if (c === '\\\\' && braces === 0) {\n        //\n        //  If the macro is \\cr or \\\\, end the search, otherwise skip the macro\n        //  (multi-letter names don't matter, as we will skip the rest of the\n        //   characters in the main loop)\n        //\n        const cs = (tex.slice(i + 1).match(/^[a-z]+|./i) || [])[0];\n        if (cs === '\\\\' || cs === 'cr' || cs === 'end' || cs === 'label') {\n          break;\n        } else {\n          i += cs.length;\n        }\n      } else {\n        //\n        //  Go on to the next character\n        //\n        i++;\n      }\n    }\n    //\n    //  Process the second column as text and continue parsing from there,\n    //\n    const text = tex.substr(parser.i, i - parser.i).replace(/^\\s*/, '');\n    parser.PushAll(ParseUtil.internalMath(parser, text, 0));\n    parser.i = i;\n  }\n\n};\n\n/**\n * The environments for this package\n */\nnew EnvironmentMap('cases-env', EmpheqUtil.environment, {\n  numcases: ['NumCases', 'cases'],\n  subnumcases: ['NumCases', 'cases']\n}, CasesMethods);\n\n/**\n * The macros for this package\n */\nnew MacroMap('cases-macros', {\n  '&': 'Entry'\n}, CasesMethods);\n\n//\n//  Define the package for our new environment\n//\nexport const CasesConfiguration = Configuration.create('cases', {\n  handler: {\n    environment: ['cases-env'],\n    character: ['cases-macros']\n  },\n  items: {\n    [CasesBeginItem.prototype.kind]: CasesBeginItem\n  },\n  tags: {'cases': CasesTags}\n});\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the centernot package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport ParseOptions from '../ParseOptions.js';\nimport TexParser from '../TexParser.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport BaseMethods from '../base/BaseMethods.js';\n\nnew CommandMap('centernot', {\n  centerOver: 'CenterOver',\n  centernot: ['Macro', '\\\\centerOver{#1}{{\\u29F8}}', 1]\n}, {\n  /**\n   * Implements \\centerOver{base}{symbol}\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} name        The name of the macro being processed.\n   */\n  CenterOver(parser: TexParser, name: string) {\n    const arg = '{' + parser.GetArgument(name) + '}';\n    const over = parser.ParseArg(name);\n    const base = new TexParser(arg, parser.stack.env, parser.configuration).mml();\n    let mml = parser.create('node', 'TeXAtom', [\n      new TexParser(arg, parser.stack.env, parser.configuration).mml(),\n      parser.create('node', 'mpadded', [\n        parser.create('node', 'mpadded', [over], {width: 0, lspace: '-.5width'}),\n        parser.create('node', 'mphantom', [base])\n      ], {width: 0, lspace: '-.5width'})\n    ]);\n    parser.configuration.addNode('centerOver', base);\n    parser.Push(mml);\n  },\n  Macro: BaseMethods.Macro\n});\n\n/**\n * Filter to copy texClass to the surrounding TeXAtom so that the negated\n *   item has the same class of the base.\n *\n * @param {ParseOptions} data   The active tex parser.\n */\nexport function filterCenterOver({data}: {data: ParseOptions}) {\n  for (const base of data.getList('centerOver')) {\n    const texClass = NodeUtil.getTexClass(base.childNodes[0].childNodes[0] as MmlNode);\n    if (texClass !== null) {\n      NodeUtil.setProperties(base.parent.parent.parent.parent.parent.parent, {texClass});\n    }\n  }\n}\n\n\nexport const CenternotConfiguration = Configuration.create(\n  'centernot', {\n    handler: {macro: ['centernot']},\n    postprocessors: [filterCenterOver]\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 Omar Al-Ithawi and The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Parse methods and helper functtions for the color package.\n *\n * @author i@omardo.com (Omar Al-Ithawi)\n */\n\n\nimport NodeUtil from '../NodeUtil.js';\nimport {ParseMethod} from '../Types.js';\nimport {PropertyList} from '../../../core/Tree/Node.js';\nimport ParseUtil from '../ParseUtil.js';\nimport TexParser from '../TexParser.js';\n\nimport {ColorModel} from './ColorUtil.js';\n\n\n/**\n * Build PropertyList from padding value.\n *\n * @param {string} colorPadding: Padding for \\colorbox and \\fcolorbox.\n * @return {PropertyList} The padding properties.\n */\nfunction padding(colorPadding: string): PropertyList {\n  const pad = `+${colorPadding}`;\n  const unit = colorPadding.replace(/^.*?([a-z]*)$/, '$1');\n  const pad2 = 2 * parseFloat(pad);\n  return {\n    width: `+${pad2}${unit}`,\n    height: pad,\n    depth: pad,\n    lspace: colorPadding,\n  };\n}\n\n\nexport const ColorMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Override \\color macro definition.\n *\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the control sequence.\n */\nColorMethods.Color = function (parser: TexParser, name: string) {\n  const model = parser.GetBrackets(name, '');\n  const colorDef = parser.GetArgument(name);\n  const colorModel: ColorModel = parser.configuration.packageData.get('color').model;\n  const color = colorModel.getColor(model, colorDef);\n\n  const style = parser.itemFactory.create('style')\n    .setProperties({styles: { mathcolor: color }});\n  parser.stack.env['color'] = color;\n\n  parser.Push(style);\n};\n\n\n/**\n * Define the \\textcolor macro.\n *\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the control sequence.\n */\nColorMethods.TextColor = function (parser: TexParser, name: string) {\n  const model = parser.GetBrackets(name, '');\n  const colorDef = parser.GetArgument(name);\n  const colorModel: ColorModel = parser.configuration.packageData.get('color').model;\n  const color = colorModel.getColor(model, colorDef);\n  const old = parser.stack.env['color'];\n\n  parser.stack.env['color'] = color;\n  const math = parser.ParseArg(name);\n\n  if (old) {\n    parser.stack.env['color'] = old;\n  } else {\n    delete parser.stack.env['color'];\n  }\n\n  const node = parser.create('node', 'mstyle', [math], {mathcolor: color});\n  parser.Push(node);\n};\n\n/**\n * Define the \\definecolor macro.\n *\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the control sequence.\n */\nColorMethods.DefineColor = function (parser: TexParser, name: string) {\n  const cname = parser.GetArgument(name);\n  const model = parser.GetArgument(name);\n  const def = parser.GetArgument(name);\n\n  const colorModel: ColorModel = parser.configuration.packageData.get('color').model;\n  colorModel.defineColor(model, cname, def);\n};\n\n/**\n * Produce a text box with a colored background: `\\colorbox`.\n *\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the control sequence.\n */\nColorMethods.ColorBox = function (parser: TexParser, name: string) {\n  const cname = parser.GetArgument(name);\n  const math = ParseUtil.internalMath(parser, parser.GetArgument(name));\n  const colorModel: ColorModel = parser.configuration.packageData.get('color').model;\n\n  const node = parser.create('node', 'mpadded', math, {\n    mathbackground: colorModel.getColor('named', cname)\n  });\n\n  NodeUtil.setProperties(node, padding(parser.options.color.padding));\n  parser.Push(node);\n};\n\n/**\n * Produce a framed text box with a colored background: `\\fcolorbox`.\n *\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the control sequence.\n */\nColorMethods.FColorBox = function (parser: TexParser, name: string) {\n  const fname = parser.GetArgument(name);\n  const cname = parser.GetArgument(name);\n  const math = ParseUtil.internalMath(parser, parser.GetArgument(name));\n  const options = parser.options.color;\n  const colorModel: ColorModel = parser.configuration.packageData.get('color').model;\n\n  const node = parser.create('node', 'mpadded', math, {\n    mathbackground: colorModel.getColor('named', cname),\n    style: `border: ${options.borderWidth} solid ${colorModel.getColor('named', fname)}`\n  });\n\n  NodeUtil.setProperties(node, padding(options.padding));\n  parser.Push(node);\n};\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 Omar Al-Ithawi and The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Constants file for the color package.\n *\n * @author i@omardo.com (Omar Al-Ithawi)\n */\n\nexport const COLORS: Map<string, string> = new Map<string, string>([\n  ['Apricot', '#FBB982'],\n  ['Aquamarine', '#00B5BE'],\n  ['Bittersweet', '#C04F17'],\n  ['Black', '#221E1F'],\n  ['Blue', '#2D2F92'],\n  ['BlueGreen', '#00B3B8'],\n  ['BlueViolet', '#473992'],\n  ['BrickRed', '#B6321C'],\n  ['Brown', '#792500'],\n  ['BurntOrange', '#F7921D'],\n  ['CadetBlue', '#74729A'],\n  ['CarnationPink', '#F282B4'],\n  ['Cerulean', '#00A2E3'],\n  ['CornflowerBlue', '#41B0E4'],\n  ['Cyan', '#00AEEF'],\n  ['Dandelion', '#FDBC42'],\n  ['DarkOrchid', '#A4538A'],\n  ['Emerald', '#00A99D'],\n  ['ForestGreen', '#009B55'],\n  ['Fuchsia', '#8C368C'],\n  ['Goldenrod', '#FFDF42'],\n  ['Gray', '#949698'],\n  ['Green', '#00A64F'],\n  ['GreenYellow', '#DFE674'],\n  ['JungleGreen', '#00A99A'],\n  ['Lavender', '#F49EC4'],\n  ['LimeGreen', '#8DC73E'],\n  ['Magenta', '#EC008C'],\n  ['Mahogany', '#A9341F'],\n  ['Maroon', '#AF3235'],\n  ['Melon', '#F89E7B'],\n  ['MidnightBlue', '#006795'],\n  ['Mulberry', '#A93C93'],\n  ['NavyBlue', '#006EB8'],\n  ['OliveGreen', '#3C8031'],\n  ['Orange', '#F58137'],\n  ['OrangeRed', '#ED135A'],\n  ['Orchid', '#AF72B0'],\n  ['Peach', '#F7965A'],\n  ['Periwinkle', '#7977B8'],\n  ['PineGreen', '#008B72'],\n  ['Plum', '#92268F'],\n  ['ProcessBlue', '#00B0F0'],\n  ['Purple', '#99479B'],\n  ['RawSienna', '#974006'],\n  ['Red', '#ED1B23'],\n  ['RedOrange', '#F26035'],\n  ['RedViolet', '#A1246B'],\n  ['Rhodamine', '#EF559F'],\n  ['RoyalBlue', '#0071BC'],\n  ['RoyalPurple', '#613F99'],\n  ['RubineRed', '#ED017D'],\n  ['Salmon', '#F69289'],\n  ['SeaGreen', '#3FBC9D'],\n  ['Sepia', '#671800'],\n  ['SkyBlue', '#46C5DD'],\n  ['SpringGreen', '#C6DC67'],\n  ['Tan', '#DA9D76'],\n  ['TealBlue', '#00AEB3'],\n  ['Thistle', '#D883B7'],\n  ['Turquoise', '#00B4CE'],\n  ['Violet', '#58429B'],\n  ['VioletRed', '#EF58A0'],\n  ['White', '#FFFFFF'],\n  ['WildStrawberry', '#EE2967'],\n  ['Yellow', '#FFF200'],\n  ['YellowGreen', '#98CC70'],\n  ['YellowOrange', '#FAA21A'],\n]);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 Omar Al-Ithawi and The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Utility functions and classes for the color package.\n *\n * @author i@omardo.com (Omar Al-Ithawi)\n */\n\n\nimport TexError from '../TexError.js';\nimport {COLORS} from './ColorConstants.js';\n\ntype ColorModelProcessor = (def: string) => string;\nconst ColorModelProcessors: Map<string, ColorModelProcessor> = new Map<string, ColorModelProcessor>();\n\n\nexport class ColorModel {\n\n  /**\n   * User defined colors.\n   *\n   * This variable is local to the parser, so two parsers in the same\n   * JavaScript thread can have two different sets of user-defined colors.\n   */\n  private userColors: Map<string, string> = new Map<string, string>();\n\n  /**\n   * Converts a color model from string representation to its CSS format `#44ff00`\n   *\n   * @param {string} model The coloring model type: `rgb` `RGB` or `gray`.\n   * @param {string} def The color definition: `0.5,0,1`, `128,0,255`, `0.5`.\n   * @return {string} The color definition in CSS format e.g. `#44ff00`.\n   */\n  private normalizeColor(model: string, def: string): string {\n    if (!model || model === 'named') {\n      // Allow to define colors directly by using the CSS format e.g. `#888`\n      return def;\n    }\n\n    if (ColorModelProcessors.has(model)) {\n      const modelProcessor = ColorModelProcessors.get(model);\n      return modelProcessor(def);\n    }\n\n    throw new TexError('UndefinedColorModel', 'Color model \\'%1\\' not defined', model);\n  }\n\n  /**\n   * Look up a color based on its model and definition.\n   *\n   * @param {string} model The coloring model type: `named`, `rgb` `RGB` or `gray`.\n   * @param {string} def The color definition: `red, `0.5,0,1`, `128,0,255`, `0.5`.\n   * @return {string} The color definition in CSS format e.g. `#44ff00`.\n   */\n  public getColor(model: string, def: string): string {\n    if (!model || model === 'named') {\n      return this.getColorByName(def);\n    }\n\n    return this.normalizeColor(model, def);\n  }\n\n  /**\n   * Get a named color.\n   *\n   * @param {string} name The color name e.g. `darkblue`.\n   * @return {string} The color definition in CSS format e.g. `#44ff00`.\n   *\n   * To retain backward compatilbity with MathJax v2 this method returns\n   * unknown as-is, this is useful for both passing through CSS format colors like `#ff0`,\n   * or even standard CSS color names that this plugin is unaware of.\n   *\n   * In TeX format, this would help to let `\\textcolor{#f80}{\\text{Orange}}` show an\n   * orange word.\n   */\n  private getColorByName(name: string): string {\n    if (this.userColors.has(name)) {\n      return this.userColors.get(name);\n    }\n\n    if (COLORS.has(name)) {\n      return COLORS.get(name);\n    }\n\n    // Pass the color name as-is to CSS\n    return name;\n  }\n\n  /**\n   * Create a new user-defined color.\n   *\n   * This color is local to the parser, so another MathJax parser won't be poluted.\n   *\n   * @param {string} model The coloring model type: e.g. `rgb`, `RGB` or `gray`.\n   * @param {string} name The color name: `darkblue`.\n   * @param {string} def The color definition in the color model format: `128,0,255`.\n   */\n  public defineColor(model: string, name: string, def: string) {\n    const normalized = this.normalizeColor(model, def);\n    this.userColors.set(name, normalized);\n  }\n}\n\n\n/**\n * Get an rgb color.\n *\n * @param {OptionList} parserOptions The parser options object.\n * @param {string} rgb The color definition in rgb: `0.5,0,1`.\n * @return {string} The color definition in CSS format e.g. `#44ff00`.\n */\nColorModelProcessors.set('rgb', function (rgb: string): string {\n  const rgbParts: string[] = rgb.trim().split(/\\s*,\\s*/);\n  let RGB: string = '#';\n\n  if (rgbParts.length !== 3) {\n    throw new TexError('ModelArg1', 'Color values for the %1 model require 3 numbers', 'rgb');\n  }\n\n  for (const rgbPart of rgbParts) {\n    if (!rgbPart.match(/^(\\d+(\\.\\d*)?|\\.\\d+)$/)) {\n      throw new TexError('InvalidDecimalNumber', 'Invalid decimal number');\n    }\n\n    const n = parseFloat(rgbPart);\n    if (n < 0 || n > 1) {\n      throw new TexError('ModelArg2',\n                         'Color values for the %1 model must be between %2 and %3',\n                         'rgb', '0', '1');\n    }\n\n    let pn = Math.floor(n * 255).toString(16);\n    if (pn.length < 2) {\n      pn = '0' + pn;\n    }\n\n    RGB += pn;\n  }\n\n  return RGB;\n});\n\n/**\n * Get an RGB color.\n *\n * @param {OptionList} parserOptions The parser options object.\n * @param {string} rgb The color definition in RGB: `128,0,255`.\n * @return {string} The color definition in CSS format e.g. `#44ff00`.\n */\nColorModelProcessors.set('RGB', function (rgb: string): string {\n  const rgbParts: string[] = rgb.trim().split(/\\s*,\\s*/);\n  let RGB = '#';\n\n  if (rgbParts.length !== 3) {\n    throw new TexError('ModelArg1', 'Color values for the %1 model require 3 numbers', 'RGB');\n  }\n\n  for (const rgbPart of rgbParts) {\n    if (!rgbPart.match(/^\\d+$/)) {\n      throw new TexError('InvalidNumber', 'Invalid number');\n    }\n\n    const n = parseInt(rgbPart);\n    if (n > 255) {\n      throw new TexError('ModelArg2',\n                         'Color values for the %1 model must be between %2 and %3',\n                         'RGB', '0', '255');\n    }\n\n    let pn = n.toString(16);\n    if (pn.length < 2) {\n      pn = '0' + pn;\n    }\n    RGB += pn;\n  }\n  return RGB;\n});\n\n/**\n * Get a gray-scale value.\n *\n * @param {OptionList} parserOptions The parser options object.\n * @param {string} gray The color definition in RGB: `0.5`.\n * @return {string} The color definition in CSS format e.g. `#808080`.\n */\nColorModelProcessors.set('gray', function (gray: string): string {\n  if (!gray.match(/^\\s*(\\d+(\\.\\d*)?|\\.\\d+)\\s*$/)) {\n    throw new TexError('InvalidDecimalNumber', 'Invalid decimal number');\n  }\n\n  const n: number = parseFloat(gray);\n  if (n < 0 || n > 1) {\n    throw new TexError('ModelArg2',\n                       'Color values for the %1 model must be between %2 and %3',\n                       'gray', '0', '1');\n  }\n  let pn = Math.floor(n * 255).toString(16);\n  if (pn.length < 2) {\n    pn = '0' + pn;\n  }\n\n  return `#${pn}${pn}${pn}`;\n});\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 Omar Al-Ithawi and The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Configuration file for the color package.\n *\n * @author i@omardo.com (Omar Al-Ithawi)\n */\n\n\nimport {CommandMap} from '../SymbolMap.js';\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport {ColorMethods} from './ColorMethods.js';\nimport {ColorModel} from './ColorUtil.js';\nimport {TeX} from '../../tex.js';\n\n/**\n * The color macros\n */\nnew CommandMap('color', {\n  color: 'Color',\n  textcolor: 'TextColor',\n  definecolor: 'DefineColor',\n  colorbox: 'ColorBox',\n  fcolorbox: 'FColorBox'\n}, ColorMethods);\n\n/**\n * Config method for Color package.\n *\n * @param {Configuration} config The current configuration.\n * @param {TeX} jax              The TeX jax having that configuration\n */\nconst config = function(_config: ParserConfiguration, jax: TeX<any, any, any>) {\n  jax.parseOptions.packageData.set('color', {model: new ColorModel()});\n};\n\n/**\n * The configuration for the color macros\n */\nexport const ColorConfiguration = Configuration.create(\n  'color', {\n    handler: {\n      macro: ['color'],\n    },\n    options: {\n      color: {\n        padding: '5px',\n        borderWidth: '2px'\n      }\n    },\n    config: config\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2019-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Configuration file for the v2-compatible color package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {CommandMap} from '../SymbolMap.js';\nimport {Configuration} from '../Configuration.js';\nimport {ParseMethod} from '../Types.js';\nimport TexParser from '../TexParser.js';\n\nexport const ColorV2Methods: Record<string, ParseMethod> = {\n\n  /**\n   * Implements the v2 color macro\n   *\n   * @param {TexParser} parser The calling parser.\n   * @param {string} name The macro name.\n   */\n  Color(parser: TexParser, name: string) {\n    // @test Color Frac\n    const color = parser.GetArgument(name);\n    const old = parser.stack.env['color'];\n    parser.stack.env['color'] = color;\n    const math = parser.ParseArg(name);\n    if (old) {\n      parser.stack.env['color'] = old;\n    } else {\n      delete parser.stack.env['color'];\n    }\n    const node = parser.create('node', 'mstyle', [math], {mathcolor: color});\n    parser.Push(node);\n  }\n\n};\n\n/**\n * The color macros\n */\nnew CommandMap('colorv2', {color: 'Color'}, ColorV2Methods);\n\n/**\n * The configuration for the color macros\n */\nexport const ColorConfiguration = Configuration.create(\n  'colorv2', {handler: {macro: ['colorv2']}}\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview    Configuration file for the colortbl package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {ArrayItem} from '../base/BaseItems.js';\nimport {Configuration, ParserConfiguration, ConfigurationHandler} from '../Configuration.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\n\nimport {TeX} from '../../tex.js';\n\n/**\n * Information about table colors.\n */\nexport interface ColorData {\n  cell: string;\n  row: string;\n  col: string[];\n}\n\n//\n//  Sublcass the ArrayItem to handle colored entries\n//\nexport class ColorArrayItem extends ArrayItem {\n  /**\n   *  Store current color for cell, row, and columns.\n   */\n  public color: ColorData = {\n    cell: '',\n    row: '',\n    col: []\n  };\n\n  /**\n   * True if any cell is colored (we will make sure the edge cells are full sized).\n   */\n  public hasColor: boolean = false;\n\n  /**\n   * @override\n   */\n  public EndEntry() {\n    super.EndEntry();\n    const cell = this.row[this.row.length - 1];\n    const color = this.color.cell || this.color.row || this.color.col[this.row.length - 1];\n    if (color) {\n      cell.attributes.set('mathbackground', color);\n      this.color.cell = '';\n      this.hasColor = true;\n    }\n  }\n\n  /**\n   * @override\n   */\n  public EndRow() {\n    super.EndRow();\n    this.color.row = '';\n  }\n\n  /**\n   * @override\n   */\n  public createMml() {\n    //\n    // If there is any color in the array, give it an empty frame,\n    //   if there isn't one already.  This will make sure the color\n    //   in edge cells extends past their contents.\n    //\n    const mml = super.createMml();\n    let table = (mml.isKind('mrow') ? mml.childNodes[1] : mml) as MmlNode;\n    if (table.isKind('menclose')) {\n      table = table.childNodes[0].childNodes[0] as MmlNode;\n    }\n    if (this.hasColor && table.attributes.get('frame') === 'none') {\n      table.attributes.set('frame', '');\n    }\n    return mml;\n  }\n\n}\n\n//\n//  Define macros for table coloring.\n//\nnew CommandMap('colortbl', {\n  cellcolor: ['TableColor', 'cell'],\n  rowcolor:  ['TableColor', 'row'],\n  columncolor: ['TableColor', 'col']\n}, {\n  /**\n   * Add color to a column, row, or cell.\n   *\n   * @param {TexParser} parser       The active TeX parser\n   * @param {string} name            The name of the macro that is being processed\n   * @param {keyof ColorData} type   The type (col, row, cell) of color being added\n   */\n  TableColor(parser: TexParser, name: string, type: keyof ColorData) {\n    const lookup = parser.configuration.packageData.get('color').model;  // use the color extension's color model\n    const model = parser.GetBrackets(name, '');\n    const color = lookup.getColor(model, parser.GetArgument(name));\n    //\n    // Check that we are in a colorable array.\n    //\n    const top = parser.stack.Top() as ColorArrayItem;\n    if (!(top instanceof ColorArrayItem)) {\n      throw new TexError('UnsupportedTableColor', 'Unsupported use of %1', parser.currentCS);\n    }\n    //\n    //  Check the position of the macro and save the color.\n    //\n    if (type === 'col') {\n      if (top.table.length) {\n        throw new TexError('ColumnColorNotTop', '%1 must be in the top row', name);\n      }\n      top.color.col[top.row.length] = color;\n      //\n      // Ignore the left and right overlap options.\n      //\n      if (parser.GetBrackets(name, '')) {\n        parser.GetBrackets(name, '');\n      }\n    } else {\n      top.color[type] = color;\n      if (type === 'row' && (top.Size() || top.row.length)) {\n        throw new TexError('RowColorNotFirst', '%1 must be at the beginning of a row', name);\n      }\n    }\n  }\n});\n\n/**\n * The configuration function for colortbl.\n *\n * @param {ParserConfiguration} config   The configuration being used.\n * @param {Tex} jax                      The TeX jax using this configuration.\n */\nconst config = function (config: ParserConfiguration, jax: TeX<any, any, any>) {\n  //\n  //  Make sure color is configured.  (It doesn't have to be included in tex.packages.)\n  //\n  if (!jax.parseOptions.packageData.has('color')) {\n    ConfigurationHandler.get('color').config(config, jax);\n  }\n};\n\n//\n//  Create the color-table configuration.\n//\nexport const ColortblConfiguration = Configuration.create('colortbl', {\n  handler: {macro: ['colortbl']},\n  items: {'array': ColorArrayItem},  // overrides original array class\n  priority: 10,                      // make sure we are processed after the base package (to override its array)\n  config: [config, 10]               // make sure we configure after the color package, if it is used.\n});\n", "/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Utility functions for the newcommand package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport ParseUtil from '../ParseUtil.js';\nimport TexError from '../TexError.js';\nimport TexParser from '../TexParser.js';\nimport {Macro, Symbol} from '../Symbol.js';\nimport {Args, Attributes, ParseMethod} from '../Types.js';\nimport * as sm from '../SymbolMap.js';\n\n\nnamespace NewcommandUtil {\n\n  /**\n   * Transforms the attributes of a symbol into the arguments of a macro. E.g.,\n   * Symbol('ell', 'l', {mathvariant: \"italic\"}) is turned into Macro arguments:\n   * ['ell', 'l', 'mathvariant', 'italic'].\n   *\n   * @param {string} name The command name for the symbol.\n   * @param {Symbol} symbol The symbol associated with name.\n   * @return {Args[]} Arguments for a macro.\n   */\n  export function disassembleSymbol(name: string, symbol: Symbol): Args[] {\n    let newArgs = [name, symbol.char] as Args[];\n    // @test Let Relet, Let Let, Let Circular Macro\n    if (symbol.attributes) {\n      // @test Let Relet\n      for (let key in symbol.attributes) {\n        newArgs.push(key);\n        newArgs.push(symbol.attributes[key] as Args);\n      }\n    }\n    return newArgs;\n  }\n\n\n  /**\n   * Assembles a symbol from a list of macro arguments. This is the inverse\n   * method of the one above.\n   *\n   * @param {Args[]} args The arguments of the macro.\n   * @return {Symbol} The Symbol generated from the arguments..\n   */\n  export function assembleSymbol(args: Args[]): Symbol {\n    // @test Let Relet, Let Let, Let Circular Macro\n    let name = args[0] as string;\n    let char = args[1] as string;\n    let attrs: Attributes = {};\n    for (let i = 2; i < args.length; i = i + 2) {\n      // @test Let Relet\n      attrs[args[i] as string] = args[i + 1];\n    }\n    return new Symbol(name, char, attrs);\n  }\n\n  /**\n   * Get the next CS name or give an error.\n   * @param {TexParser} parser The calling parser.\n   * @param {string} cmd The string starting with a control sequence.\n   * @return {string} The control sequence.\n   */\n  export function GetCSname(parser: TexParser, cmd: string): string {\n    // @test Def ReDef, Let Bar, Let Brace Equal\n    let c = parser.GetNext();\n    if (c !== '\\\\') {\n      // @test No CS\n      throw new TexError('MissingCS',\n                          '%1 must be followed by a control sequence', cmd);\n    }\n    let cs = ParseUtil.trimSpaces(parser.GetArgument(cmd));\n    return cs.substr(1);\n  }\n\n  /**\n   * Get a control sequence name as an argument (doesn't require the backslash)\n   * @param {TexParser} parser The calling parser.\n   * @param {string} name The macro that is getting the name.\n   * @return {string} The control sequence.\n   */\n  export function GetCsNameArgument(parser: TexParser, name: string): string {\n    let cs = ParseUtil.trimSpaces(parser.GetArgument(name));\n    if (cs.charAt(0) === '\\\\') {\n      // @test Newcommand Simple\n      cs = cs.substr(1);\n    }\n    if (!cs.match(/^(.|[a-z]+)$/i)) {\n      // @test Illegal CS\n      throw new TexError('IllegalControlSequenceName',\n                         'Illegal control sequence name for %1', name);\n    }\n    return cs;\n  }\n\n  /**\n   * Get the number of arguments for a macro definition\n   * @param {TexParser} parser The calling parser.\n   * @param {string} name The macro that is getting the argument count.\n   * @return {string} The number of arguments (or blank).\n   */\n  export function GetArgCount(parser: TexParser, name: string): string {\n    let n = parser.GetBrackets(name);\n    if (n) {\n      // @test Newcommand Optional, Newcommand Arg, Newcommand Arg Optional\n      // @test Newenvironment Optional, Newenvironment Arg Optional\n      n = ParseUtil.trimSpaces(n);\n      if (!n.match(/^[0-9]+$/)) {\n        // @test Illegal Argument Number\n        throw new TexError('IllegalParamNumber',\n                           'Illegal number of parameters specified in %1', name);\n      }\n    }\n    return n;\n  }\n\n  /**\n   * Get a \\def parameter template.\n   * @param {TexParser} parser The calling parser.\n   * @param {string} cmd The string starting with the template.\n   * @param {string} cs The control sequence of the \\def.\n   * @return {number | string[]} The number of parameters or a string array if\n   *     there is an optional argument.\n   */\n  export function GetTemplate(parser: TexParser, cmd: string, cs: string): number | string[] {\n    // @test Def Double Let, Def ReDef, Def Let\n    let c = parser.GetNext();\n    let params: string[] = [];\n    let n = 0;\n    let i = parser.i;\n    while (parser.i < parser.string.length) {\n      c = parser.GetNext();\n      if (c === '#') {\n        // @test Def ReDef, Def Let, Def Optional Brace\n        if (i !== parser.i) {\n          // @test Def Let, Def Optional Brace\n          params[n] = parser.string.substr(i, parser.i - i);\n        }\n        c = parser.string.charAt(++parser.i);\n        if (!c.match(/^[1-9]$/)) {\n          // @test Illegal Hash\n          throw new TexError('CantUseHash2',\n                              'Illegal use of # in template for %1', cs);\n        }\n        if (parseInt(c) !== ++n) {\n          // @test No Sequence\n          throw new TexError('SequentialParam',\n                              'Parameters for %1 must be numbered sequentially', cs);\n        }\n        i = parser.i + 1;\n      } else if (c === '{') {\n        // @test Def Double Let, Def ReDef, Def Let\n        if (i !== parser.i) {\n          // @test Optional Brace Error\n          params[n] = parser.string.substr(i, parser.i - i);\n        }\n        if (params.length > 0) {\n          // @test Def Let, Def Optional Brace\n          return [n.toString()].concat(params);\n        } else {\n          // @test Def Double Let, Def ReDef\n          return n;\n        }\n      }\n      parser.i++;\n    }\n    // @test No Replacement\n    throw new TexError('MissingReplacementString',\n                        'Missing replacement string for definition of %1', cmd);\n  }\n\n\n  /**\n   * Find a single parameter delimited by a trailing template.\n   * @param {TexParser} parser The calling parser.\n   * @param {string} name The name of the calling command.\n   * @param {string} param The parameter for the macro.\n   */\n  export function GetParameter(parser: TexParser, name: string, param: string) {\n    if (param == null) {\n      // @test Def Let, Def Optional Brace, Def Options CS\n      return parser.GetArgument(name);\n    }\n    let i = parser.i;\n    let j = 0;\n    let hasBraces = 0;\n    while (parser.i < parser.string.length) {\n      let c = parser.string.charAt(parser.i);\n      // @test Def Let, Def Optional Brace, Def Options CS\n      if (c === '{') {\n        // @test Def Optional Brace, Def Options CS\n        if (parser.i === i) {\n          // @test Def Optional Brace\n          hasBraces = 1;\n        }\n        parser.GetArgument(name);\n        j = parser.i - i;\n      } else if (MatchParam(parser, param)) {\n        // @test Def Let, Def Optional Brace, Def Options CS\n        if (hasBraces) {\n          // @test Def Optional Brace\n          i++;\n          j -= 2;\n        }\n        return parser.string.substr(i, j);\n      } else if (c === '\\\\') {\n        // @test Def Options CS\n        parser.i++;\n        j++;\n        hasBraces = 0;\n        let match = parser.string.substr(parser.i).match(/[a-z]+|./i);\n        if (match) {\n          // @test Def Options CS\n          parser.i += match[0].length;\n          j = parser.i - i;\n        }\n      } else {\n        // @test Def Let\n        parser.i++;\n        j++;\n        hasBraces = 0;\n      }\n    }\n    // @test Runaway Argument\n    throw new TexError('RunawayArgument', 'Runaway argument for %1?', name);\n  }\n\n\n  /**\n   * Check if a template is at the current location.\n   * (The match must be exact, with no spacing differences. TeX is\n   *  a little more forgiving than this about spaces after macro names)\n   * @param {TexParser} parser The calling parser.\n   * @param {string} param Tries to match an optional parameter.\n   * @return {number} The number of optional parameters, either 0 or 1.\n   */\n  export function MatchParam(parser: TexParser, param: string): number {\n    // @test Def Let, Def Optional Brace, Def Options CS\n    if (parser.string.substr(parser.i, param.length) !== param) {\n      // @test Def Let, Def Options CS\n      return 0;\n    }\n    if (param.match(/\\\\[a-z]+$/i) &&\n        parser.string.charAt(parser.i + param.length).match(/[a-z]/i)) {\n      // @test (missing)\n      return 0;\n    }\n    // @test Def Let, Def Optional Brace, Def Options CS\n    parser.i += param.length;\n    return 1;\n  }\n\n\n  /**\n   * Adds a new delimiter as extension to the parser.\n   * @param {TexParser} parser The current parser.\n   * @param {string} cs The control sequence of the delimiter.\n   * @param {string} char The corresponding character.\n   * @param {Attributes} attr The attributes needed for parsing.\n   */\n  export function addDelimiter(parser: TexParser, cs: string, char: string, attr: Attributes) {\n    const handlers = parser.configuration.handlers;\n    const handler = handlers.retrieve(NEW_DELIMITER) as sm.DelimiterMap;\n    handler.add(cs, new Symbol(cs, char, attr));\n  }\n\n  /**\n   * Adds a new macro as extension to the parser.\n   * @param {TexParser} parser The current parser.\n   * @param {string} cs The control sequence of the delimiter.\n   * @param {ParseMethod} func The parse method for this macro.\n   * @param {Args[]} attr The attributes needed for parsing.\n   * @param {string=} symbol Optionally original symbol for macro, in case it is\n   *     different from the control sequence.\n   */\n  export function addMacro(parser: TexParser, cs: string, func: ParseMethod, attr: Args[],\n                           symbol: string = '') {\n    const handlers = parser.configuration.handlers;\n    const handler = handlers.retrieve(NEW_COMMAND) as sm.CommandMap;\n    handler.add(cs, new Macro(symbol ? symbol : cs, func, attr));\n  }\n\n\n  /**\n   * Adds a new environment as extension to the parser.\n   * @param {TexParser} parser The current parser.\n   * @param {string} env The environment name.\n   * @param {ParseMethod} func The parse method for this macro.\n   * @param {Args[]} attr The attributes needed for parsing.\n   */\n  export function addEnvironment(parser: TexParser, env: string, func: ParseMethod, attr: Args[]) {\n    const handlers = parser.configuration.handlers;\n    const handler = handlers.retrieve(NEW_ENVIRONMENT) as sm.EnvironmentMap;\n    handler.add(env, new Macro(env, func, attr));\n  }\n\n  /**\n   * Naming constants for the extension mappings.\n   */\n  export const NEW_DELIMITER = 'new-Delimiter';\n  export const NEW_COMMAND = 'new-Command';\n  export const NEW_ENVIRONMENT = 'new-Environment';\n\n}\n\nexport default NewcommandUtil;\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for TeX parsing for definitorial commands.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {ParseMethod} from '../Types.js';\nimport TexError from '../TexError.js';\nimport TexParser from '../TexParser.js';\nimport * as sm from '../SymbolMap.js';\nimport {Symbol, Macro} from '../Symbol.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {StackItem} from '../StackItem.js';\nimport NewcommandUtil from './NewcommandUtil.js';\n\n\n// Namespace\nlet NewcommandMethods: Record<string, ParseMethod> = {};\n\n/**\n * Implements \\newcommand{\\name}[n][default]{...}\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the calling command.\n */\nNewcommandMethods.NewCommand = function(parser: TexParser, name: string) {\n  // @test Newcommand Simple\n  let cs = NewcommandUtil.GetCsNameArgument(parser, name);\n  let n = NewcommandUtil.GetArgCount(parser, name);\n  let opt = parser.GetBrackets(name);\n  let def = parser.GetArgument(name);\n  NewcommandUtil.addMacro(parser, cs, NewcommandMethods.Macro, [def, n, opt]);\n};\n\n\n/**\n * Implements \\newenvironment{name}[n][default]{begincmd}{endcmd}\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the calling command.\n */\nNewcommandMethods.NewEnvironment = function(parser: TexParser, name: string) {\n  // @test Newenvironment Empty, Newenvironment Content\n  let env = ParseUtil.trimSpaces(parser.GetArgument(name));\n  let n = NewcommandUtil.GetArgCount(parser, name);\n  let opt = parser.GetBrackets(name);\n  let bdef = parser.GetArgument(name);\n  let edef = parser.GetArgument(name);\n  NewcommandUtil.addEnvironment(parser, env, NewcommandMethods.BeginEnv, [true, bdef, edef, n, opt]);\n};\n\n\n/**\n * Implements \\def command.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the calling command.\n */\nNewcommandMethods.MacroDef = function(parser: TexParser, name: string) {\n  // @test Def DoubleLet, DefReDef\n  let cs = NewcommandUtil.GetCSname(parser, name);\n  let params = NewcommandUtil.GetTemplate(parser, name, '\\\\' + cs);\n  let def = parser.GetArgument(name);\n  !(params instanceof Array) ?\n    // @test Def DoubleLet, DefReDef\n    NewcommandUtil.addMacro(parser, cs, NewcommandMethods.Macro, [def, params]) :\n    // @test Def Let\n    NewcommandUtil.addMacro(parser, cs, NewcommandMethods.MacroWithTemplate, [def].concat(params));\n};\n\n\n/**\n * Implements the \\let command.\n *\n * All \\let commands create either new delimiters or macros in the extension\n * maps. In the latter case if the let binds a symbol we have to generate a\n * macro with the appropriate parse methods from the SymbolMap. Otherwise we\n * simply copy the macro under a new name.\n *\n * Let does not always work on special characters as TeX does.  For example\n * \"\\let\\car^ a\\car b\" will yield a superscript, on the otherhand\n * \\let\\bgroup={ is possible and will work fine in \\bgroup a } but will fail\n * in \\sqrt\\bgroup a}.\n *\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the calling command.\n */\nNewcommandMethods.Let = function(parser: TexParser, name: string) {\n  const cs = NewcommandUtil.GetCSname(parser, name);\n  let c = parser.GetNext();\n  // @test Let Bar, Let Caret\n  if (c === '=') {\n    // @test Let Brace Equal, Let Brace Equal Stretchy\n    parser.i++;\n    c = parser.GetNext();\n  }\n  const handlers = parser.configuration.handlers;\n  if (c === '\\\\') {\n    // @test Let Bar, Let Brace Equal Stretchy\n    name = NewcommandUtil.GetCSname(parser, name);\n    let macro = handlers.get('delimiter').lookup('\\\\' + name) as Symbol;\n    if (macro) {\n      // @test Let Bar, Let Brace Equal Stretchy\n      NewcommandUtil.addDelimiter(parser, '\\\\' + cs, macro.char, macro.attributes);\n      return;\n    }\n    const map = handlers.get('macro').applicable(name);\n    if (!map) {\n      // @test Let Undefined CS\n      return;\n    }\n    if (map instanceof sm.MacroMap) {\n      // @test Def Let, Newcommand Let\n      const macro = (map as sm.CommandMap).lookup(name) as Macro;\n      NewcommandUtil.addMacro(parser, cs, macro.func, macro.args, macro.symbol);\n      return;\n    }\n    macro = (map as sm.CharacterMap).lookup(name) as Symbol;\n    const newArgs = NewcommandUtil.disassembleSymbol(cs, macro);\n    const method = (p: TexParser, _cs: string, ...rest: any[]) => {\n      // @test Let Relet, Let Let, Let Circular Macro\n      const symb = NewcommandUtil.assembleSymbol(rest);\n      return map.parser(p, symb);\n    };\n    NewcommandUtil.addMacro(parser, cs, method, newArgs);\n    return;\n  }\n  // @test Let Brace Equal, Let Caret\n  parser.i++;\n  const macro = handlers.get('delimiter').lookup(c) as Symbol;\n  if (macro) {\n    // @test Let Paren Delim, Let Paren Stretchy\n    NewcommandUtil.addDelimiter(parser, '\\\\' + cs, macro.char, macro.attributes);\n    return;\n  }\n  // @test Let Brace Equal, Let Caret\n  NewcommandUtil.addMacro(parser, cs, NewcommandMethods.Macro, [c]);\n};\n\n\n/**\n * Process a macro with a parameter template by replacing parameters in the\n * parser's string.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the calling command.\n * @param {string} text The text template of the macro.\n * @param {string} n The number of parameters.\n * @param {string[]} ...params The parameter values.\n */\nNewcommandMethods.MacroWithTemplate = function (parser: TexParser, name: string,\n                                                text: string, n: string,\n                                                ...params: string[]) {\n  const argCount = parseInt(n, 10);\n  // @test Def Let\n  if (argCount) {\n    // @test Def Let\n    let args = [];\n    parser.GetNext();\n    if (params[0] && !NewcommandUtil.MatchParam(parser, params[0])) {\n      // @test Missing Arguments\n      throw new TexError('MismatchUseDef',\n                          'Use of %1 doesn\\'t match its definition', name);\n    }\n    for (let i = 0; i < argCount; i++) {\n      // @test Def Let\n      args.push(NewcommandUtil.GetParameter(parser, name, params[i + 1]));\n    }\n    text = ParseUtil.substituteArgs(parser, args, text);\n  }\n  parser.string = ParseUtil.addArgs(parser, text,\n                                    parser.string.slice(parser.i));\n  parser.i = 0;\n  ParseUtil.checkMaxMacros(parser);\n};\n\n\n/**\n * Process a user-defined environment.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The begin stackitem.\n * @param {string} bdef The begin definition in the newenvironment macro.\n * @param {string} edef The end definition in the newenvironment macro.\n * @param {number} n The number of parameters.\n * @param {string} def Default for an optional parameter.\n */\nNewcommandMethods.BeginEnv = function(parser: TexParser, begin: StackItem,\n                                      bdef: string, edef: string, n: number, def: string) {\n  // @test Newenvironment Empty, Newenvironment Content\n  // We have an end item, and we are supposed to close this environment.\n  if (begin.getProperty('end') && parser.stack.env['closing'] === begin.getName()) {\n    // @test Newenvironment Empty, Newenvironment Content\n    delete parser.stack.env['closing'];\n    // Parse the commands in the end environment definition.\n    let rest = parser.string.slice(parser.i);\n    parser.string = edef;\n    parser.i = 0;\n    parser.Parse();\n    // Reset to parsing the remainder of the expression.\n    parser.string = rest;\n    parser.i = 0;\n    // Close this environment.\n    return parser.itemFactory.create('end').setProperty('name', begin.getName());\n  }\n  if (n) {\n    // @test Newenvironment Optional, Newenvironment Arg Optional\n    let args: string[] = [];\n    if (def != null) {\n      // @test Newenvironment Optional, Newenvironment Arg Optional\n      let optional = parser.GetBrackets('\\\\begin{' + begin.getName() + '}');\n      args.push(optional == null ? def : optional);\n    }\n    for (let i = args.length; i < n; i++) {\n      // @test Newenvironment Arg Optional\n      args.push(parser.GetArgument('\\\\begin{' + begin.getName() + '}'));\n    }\n    bdef = ParseUtil.substituteArgs(parser, args, bdef);\n    edef = ParseUtil.substituteArgs(parser, [], edef); // no args, but get errors for #n in edef\n  }\n  parser.string = ParseUtil.addArgs(parser, bdef,\n                                    parser.string.slice(parser.i));\n  parser.i = 0;\n  return parser.itemFactory.create('beginEnv').setProperty('name', begin.getName());\n};\n\nNewcommandMethods.Macro = BaseMethods.Macro;\n\nexport default NewcommandMethods;\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Items for TeX parsing of new environments.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport TexError from '../TexError.js';\nimport {CheckType, BaseItem, StackItem} from '../StackItem.js';\n\n\n/**\n * Opening Item dealing with definitions of new environments. It's pushed onto\n * the stack whenever a user defined environment is encountered and remains\n * until a corresponding \\\\end collapses the stack.\n */\nexport class BeginEnvItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'beginEnv';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('end')) {\n      // @test Newenvironment Empty, Newenvironment Align\n      if (item.getName() !== this.getName()) {\n        // @test (missing) \\newenvironment{env}{aa}{bb}\\begin{env}cc\\end{equation}\n        throw new TexError('EnvBadEnd', '\\\\begin{%1} ended with \\\\end{%2}',\n                            this.getName(), item.getName());\n      }\n      return [[this.factory.create('mml', this.toMml())], true];\n    }\n    if (item.isKind('stop')) {\n      // @test (missing) \\newenvironment{env}{aa}{bb}\\begin{env}cc\n      throw new TexError('EnvMissingEnd', 'Missing \\\\end{%1}', this.getName());\n    }\n    // @test Newenvironment Empty, Newenvironment Align\n    return super.checkItem(item);\n  }\n\n}\n", "/*************************************************************\n *\n *  Copyright (c) 2019-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview    Configuration file for the configmacros package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport {expandable} from '../../../util/Options.js';\nimport {CommandMap, EnvironmentMap} from '../SymbolMap.js';\nimport ParseMethods from '../ParseMethods.js';\nimport {Macro} from '../Symbol.js';\nimport NewcommandMethods from '../newcommand/NewcommandMethods.js';\nimport {BeginEnvItem} from '../newcommand/NewcommandItems.js';\nimport {TeX} from '../../tex.js';\n\ntype TEX = TeX<any, any, any>;\n\n/**\n * The name to use for the macros map\n */\nconst MACROSMAP = 'configmacros-map';\n\n/**\n * The name to use for the environment map\n */\nconst ENVIRONMENTMAP = 'configmacros-env-map';\n\n/**\n * Create the command map for the macros\n *\n * @param {Configuration} config   The configuration object for the input jax\n */\nfunction configmacrosInit(config: ParserConfiguration) {\n  new CommandMap(MACROSMAP, {}, {});\n  new EnvironmentMap(ENVIRONMENTMAP, ParseMethods.environment, {}, {});\n  config.append(Configuration.local({\n    handler: {\n      macro: [MACROSMAP],\n      environment: [ENVIRONMENTMAP]\n    },\n    priority: 3\n  }));\n}\n\n/**\n * Create the user-defined macros and environments from their options\n *\n * @param {Configuration} config   The configuration object for the input jax\n * @param {TeX} jax                The TeX input jax\n */\nfunction configmacrosConfig(_config: ParserConfiguration, jax: TEX) {\n  configMacros(jax);\n  configEnvironments(jax);\n}\n\n/**\n * Create user-defined macros from the macros option\n *\n * @param {TeX} jax                The TeX input jax\n */\nfunction configMacros(jax: TEX) {\n  const handler = jax.parseOptions.handlers.retrieve(MACROSMAP) as CommandMap;\n  const macros = jax.parseOptions.options.macros;\n  for (const cs of Object.keys(macros)) {\n    const def = (typeof macros[cs] === 'string' ? [macros[cs]] : macros[cs]);\n    const macro = Array.isArray(def[2]) ?\n      new Macro(cs, NewcommandMethods.MacroWithTemplate, def.slice(0, 2).concat(def[2])) :\n      new Macro(cs, NewcommandMethods.Macro, def);\n    handler.add(cs, macro);\n  }\n}\n\n/**\n * Create user-defined environments from the environments option\n *\n * @param {TeX} jax                The TeX input jax\n */\nfunction configEnvironments(jax: TEX) {\n  const handler = jax.parseOptions.handlers.retrieve(ENVIRONMENTMAP) as EnvironmentMap;\n  const environments = jax.parseOptions.options.environments;\n  for (const env of Object.keys(environments)) {\n    handler.add(env, new Macro(env, NewcommandMethods.BeginEnv, [true].concat(environments[env])));\n  }\n}\n\n/**\n * The configuration object for configmacros\n */\nexport const ConfigMacrosConfiguration = Configuration.create(\n  'configmacros', {\n    init: configmacrosInit,\n    config: configmacrosConfig,\n    items: {\n      [BeginEnvItem.prototype.kind]: BeginEnvItem,\n    },\n    options: {\n      macros: expandable({}),\n      environments: expandable({})\n    }\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the empheq package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\n\nimport {Configuration} from '../Configuration.js';\nimport {CommandMap, EnvironmentMap} from '../SymbolMap.js';\nimport ParseUtil from '../ParseUtil.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {BeginItem} from '../base/BaseItems.js';\nimport {StackItem} from '../StackItem.js';\nimport {EmpheqUtil} from './EmpheqUtil.js';\n\n/**\n * A StackItem for empheq environments.\n */\nexport class EmpheqBeginItem extends BeginItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'empheq-begin';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem) {\n    if (item.isKind('end') && item.getName() === this.getName()) {\n      this.setProperty('end', false);\n    }\n    return super.checkItem(item);\n  }\n\n}\n\n/**\n * The methods that implement the empheq package.\n */\nexport const EmpheqMethods = {\n\n  /**\n   * Handle an empheq environment.\n   *\n   * @param {TexParser} parser        The active tex parser.\n   * @param {EmpheqBeginItem} begin   The begin item for this environment.\n   */\n  Empheq(parser: TexParser, begin: EmpheqBeginItem) {\n    if (parser.stack.env.closing === begin.getName()) {\n      delete parser.stack.env.closing;\n      parser.Push(parser.itemFactory.create('end').setProperty('name', parser.stack.global.empheq));\n      parser.stack.global.empheq = '';\n      const empheq = parser.stack.Top() as EmpheqBeginItem;\n      EmpheqUtil.adjustTable(empheq, parser);\n      parser.Push(parser.itemFactory.create('end').setProperty('name', 'empheq'));\n    } else {\n      ParseUtil.checkEqnEnv(parser);\n      delete parser.stack.global.eqnenv;\n      const opts = parser.GetBrackets('\\\\begin{' + begin.getName() + '}') || '';\n      const [env, n] = (parser.GetArgument('\\\\begin{' + begin.getName() + '}') || '').split(/=/);\n      if (!EmpheqUtil.checkEnv(env)) {\n        throw new TexError('UnknownEnv', 'Unknown environment \"%1\"', env);\n      }\n      if (opts) {\n        begin.setProperties(EmpheqUtil.splitOptions(opts, {left: 1, right: 1}));\n      }\n      parser.stack.global.empheq = env;\n      parser.string = '\\\\begin{' + env + '}' + (n ? '{' + n + '}' : '') + parser.string.slice(parser.i);\n      parser.i = 0;\n      parser.Push(begin);\n    }\n  },\n\n  /**\n   * Create an <mo> with a given content\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} name        The name of the macro being processed.\n   * @param {string} c           The character for the <mo>\n   */\n  EmpheqMO(parser: TexParser, _name: string, c: string) {\n    parser.Push(parser.create('token', 'mo', {}, c));\n  },\n\n  /**\n   * Create a delimiter <mo> with a given character\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} name        The name of the macro being processed.\n   */\n  EmpheqDelim(parser: TexParser, name: string) {\n    const c = parser.GetDelimiter(name);\n    parser.Push(parser.create('token', 'mo', {stretchy: true, symmetric: true}, c));\n  }\n\n};\n\n//\n//  Define an environment map to add the new empheq environment\n//\nnew EnvironmentMap('empheq-env', EmpheqUtil.environment, {\n  empheq: ['Empheq', 'empheq'],\n}, EmpheqMethods);\n\n//\n//  Define the empheq characters\n//\nnew CommandMap('empheq-macros', {\n  empheqlbrace:    ['EmpheqMO', '{'],\n  empheqrbrace:    ['EmpheqMO', '}'],\n  empheqlbrack:    ['EmpheqMO', '['],\n  empheqrbrack:    ['EmpheqMO', ']'],\n  empheqlangle:    ['EmpheqMO', '\\u27E8'],\n  empheqrangle:    ['EmpheqMO', '\\u27E9'],\n  empheqlparen:    ['EmpheqMO', '('],\n  empheqrparen:    ['EmpheqMO', ')'],\n  empheqlvert:     ['EmpheqMO', '|'],\n  empheqrvert:     ['EmpheqMO', '|'],\n  empheqlVert:     ['EmpheqMO', '\\u2016'],\n  empheqrVert:     ['EmpheqMO', '\\u2016'],\n  empheqlfloor:    ['EmpheqMO', '\\u230A'],\n  empheqrfloor:    ['EmpheqMO', '\\u230B'],\n  empheqlceil:     ['EmpheqMO', '\\u2308'],\n  empheqrceil:     ['EmpheqMO', '\\u2309'],\n  empheqbiglbrace: ['EmpheqMO', '{'],\n  empheqbigrbrace: ['EmpheqMO', '}'],\n  empheqbiglbrack: ['EmpheqMO', '['],\n  empheqbigrbrack: ['EmpheqMO', ']'],\n  empheqbiglangle: ['EmpheqMO', '\\u27E8'],\n  empheqbigrangle: ['EmpheqMO', '\\u27E9'],\n  empheqbiglparen: ['EmpheqMO', '('],\n  empheqbigrparen: ['EmpheqMO', ')'],\n  empheqbiglvert:  ['EmpheqMO', '|'],\n  empheqbigrvert:  ['EmpheqMO', '|'],\n  empheqbiglVert:  ['EmpheqMO', '\\u2016'],\n  empheqbigrVert:  ['EmpheqMO', '\\u2016'],\n  empheqbiglfloor: ['EmpheqMO', '\\u230A'],\n  empheqbigrfloor: ['EmpheqMO', '\\u230B'],\n  empheqbiglceil:  ['EmpheqMO', '\\u2308'],\n  empheqbigrceil:  ['EmpheqMO', '\\u2309'],\n  empheql:          'EmpheqDelim',\n  empheqr:          'EmpheqDelim',\n  empheqbigl:       'EmpheqDelim',\n  empheqbigr:       'EmpheqDelim'\n}, EmpheqMethods);\n\n//\n//  Define the package for our new environment\n//\nexport const EmpheqConfiguration = Configuration.create('empheq', {\n  handler: {\n    macro: ['empheq-macros'],\n    environment: ['empheq-env'],\n  },\n  items: {\n    [EmpheqBeginItem.prototype.kind]: EmpheqBeginItem\n  }\n});\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for TeX parsing for definitorial commands.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport NewcommandMethods from './NewcommandMethods.js';\nimport {CommandMap} from '../SymbolMap.js';\n\n\n/**\n * Macros for newcommand etc.\n */\nnew CommandMap('Newcommand-macros', {\n  newcommand:       'NewCommand',\n  renewcommand:     'NewCommand',\n  newenvironment:   'NewEnvironment',\n  renewenvironment: 'NewEnvironment',\n  def:              'MacroDef',\n  'let':            'Let'\n}, NewcommandMethods);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the Newcommand package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport {BeginEnvItem} from './NewcommandItems.js';\nimport NewcommandUtil from './NewcommandUtil.js';\nimport './NewcommandMappings.js';\nimport ParseMethods from '../ParseMethods.js';\nimport * as sm from '../SymbolMap.js';\n\n\n/**\n * Init method for Newcommand package.\n * @param {Configuration} config The current configuration.\n */\nlet init = function(config: ParserConfiguration) {\n  new sm.DelimiterMap(NewcommandUtil.NEW_DELIMITER,\n                      ParseMethods.delimiter, {});\n  new sm.CommandMap(NewcommandUtil.NEW_COMMAND, {}, {});\n  new sm.EnvironmentMap(NewcommandUtil.NEW_ENVIRONMENT,\n                        ParseMethods.environment, {}, {});\n  config.append(Configuration.local(\n    {handler: {character: [],\n               delimiter: [NewcommandUtil.NEW_DELIMITER],\n               macro: [NewcommandUtil.NEW_DELIMITER,\n                       NewcommandUtil.NEW_COMMAND],\n               environment: [NewcommandUtil.NEW_ENVIRONMENT]\n              },\n     priority: -1}));\n};\n\n\nexport const NewcommandConfiguration = Configuration.create(\n  'newcommand', {\n    handler: {\n      macro: ['Newcommand-macros']\n    },\n    items: {\n      [BeginEnvItem.prototype.kind]: BeginEnvItem,\n    },\n    options: {maxMacros: 1000},\n    init: init\n  }\n);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the extpfeil package. Note that this is\n *     based on AMS package and Newcommand utilities.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport {AmsMethods} from '../ams/AmsMethods.js';\nimport NewcommandUtil from '../newcommand/NewcommandUtil.js';\nimport {NewcommandConfiguration} from '../newcommand/NewcommandConfiguration.js';\nimport TexError from '../TexError.js';\n\n\n// Namespace\nexport let ExtpfeilMethods: Record<string, ParseMethod> = {};\n\nExtpfeilMethods.xArrow = AmsMethods.xArrow;\n\n/**\n * Implements \\Newextarrow to define a new arrow.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nExtpfeilMethods.NewExtArrow = function(parser: TexParser, name: string) {\n  let cs = parser.GetArgument(name);\n  const space = parser.GetArgument(name);\n  const chr = parser.GetArgument(name);\n  if (!cs.match(/^\\\\([a-z]+|.)$/i)) {\n    throw new TexError('NewextarrowArg1',\n               'First argument to %1 must be a control sequence name', name);\n  }\n  if (!space.match(/^(\\d+),(\\d+)$/)) {\n    throw new TexError(\n      'NewextarrowArg2',\n      'Second argument to %1 must be two integers separated by a comma',\n      name);\n  }\n  if (!chr.match(/^(\\d+|0x[0-9A-F]+)$/i)) {\n    throw new TexError(\n      'NewextarrowArg3',\n      'Third argument to %1 must be a unicode character number',\n      name);\n  }\n  cs = cs.substr(1);\n  let spaces = space.split(',');\n  NewcommandUtil.addMacro(parser, cs, ExtpfeilMethods.xArrow,\n                          [parseInt(chr), parseInt(spaces[0]), parseInt(spaces[1])]);\n};\n\n\nnew CommandMap('extpfeil', {\n  xtwoheadrightarrow: ['xArrow', 0x21A0, 12, 16],\n  xtwoheadleftarrow:  ['xArrow', 0x219E, 17, 13],\n  xmapsto:            ['xArrow', 0x21A6, 6, 7],\n  xlongequal:         ['xArrow', 0x003D, 7, 7],\n  xtofrom:            ['xArrow', 0x21C4, 12, 12],\n  Newextarrow:        'NewExtArrow'\n}, ExtpfeilMethods);\n\n\nlet init = function(config: ParserConfiguration) {\n  NewcommandConfiguration.init(config);\n};\n\nexport const ExtpfeilConfiguration = Configuration.create(\n  'extpfeil', {\n    handler: {macro: ['extpfeil']},\n    init: init\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the gensymb package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {Symbol} from '../Symbol.js';\nimport {TexConstant} from '../TexConstants.js';\nimport {CharacterMap} from '../SymbolMap.js';\nimport TexParser from '../TexParser.js';\n\n\n/**\n * Handle characters that are known units.\n * @param {TexParser} parser The current tex parser.\n * @param {Symbol} mchar The parsed symbol.\n */\nfunction mathcharUnit(parser: TexParser, mchar: Symbol) {\n  const def = mchar.attributes || {};\n  def.mathvariant = TexConstant.Variant.NORMAL;\n  def.class = 'MathML-Unit';\n  const node = parser.create('token', 'mi', def, mchar.char);\n  parser.Push(node);\n}\n\n\n/**\n * gensymb units.\n */\nnew CharacterMap('gensymb-symbols', mathcharUnit, {\n  ohm:            '\\u2126',\n  degree:         '\\u00B0',\n  celsius:        '\\u2103',\n  perthousand:    '\\u2030',\n  micro:          '\\u00B5'\n});\n\n\nexport const GensymbConfiguration = Configuration.create(\n  'gensymb', {\n    handler: {macro: ['gensymb-symbols']},\n  }\n);\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Methods for the Html package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport TexParser from '../TexParser.js';\nimport {ParseMethod} from '../Types.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\n\n\n// Namespace\nlet HtmlMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Implements \\href{url}{math}\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nHtmlMethods.Href = function(parser: TexParser, name: string) {\n  const url = parser.GetArgument(name);\n  const arg = GetArgumentMML(parser, name);\n  NodeUtil.setAttribute(arg, 'href', url);\n  parser.Push(arg);\n};\n\n\n/**\n * Implements \\class{name}{math}\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nHtmlMethods.Class = function(parser: TexParser, name: string) {\n  let CLASS = parser.GetArgument(name);\n  const arg = GetArgumentMML(parser, name);\n  let oldClass = NodeUtil.getAttribute(arg, 'class');\n  if (oldClass) {\n    CLASS = oldClass + ' ' + CLASS;\n  }\n  NodeUtil.setAttribute(arg, 'class', CLASS);\n  parser.Push(arg);\n};\n\n\n/**\n * Implements \\style{style-string}{math}\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nHtmlMethods.Style = function(parser: TexParser, name: string) {\n  let style = parser.GetArgument(name);\n  const arg = GetArgumentMML(parser, name);\n  // check that it looks like a style string\n  let oldStyle = NodeUtil.getAttribute(arg, 'style');\n  if (oldStyle) {\n    if (style.charAt(style.length - 1) !== ';') {\n      style += ';';\n    }\n    style = oldStyle + ' ' + style;\n  }\n  NodeUtil.setAttribute(arg, 'style', style);\n  parser.Push(arg);\n};\n\n\n/**\n * Implements \\cssId{id}{math}\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nHtmlMethods.Id = function(parser: TexParser, name: string) {\n  const ID  = parser.GetArgument(name);\n  const arg = GetArgumentMML(parser, name);\n  NodeUtil.setAttribute(arg, 'id', ID);\n  parser.Push(arg);\n};\n\n\n/**\n * Parses the math argument of the above commands and returns it as single\n * node (in an mrow if necessary). The HTML attributes are then\n * attached to this element.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The calling macro name.\n * @return {MmlNode} The math node.\n */\nlet GetArgumentMML = function(parser: TexParser, name: string): MmlNode {\n  let arg = parser.ParseArg(name);\n  if (!NodeUtil.isInferred(arg)) {\n    return arg;\n  }\n  let children = NodeUtil.getChildren(arg);\n  if (children.length === 1) {\n    return children[0];\n  }\n  const mrow = parser.create('node', 'mrow');\n  NodeUtil.copyChildren(arg, mrow);\n  NodeUtil.copyAttributes(arg, mrow);\n  return mrow;\n};\n\n\nexport default HtmlMethods;\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the Html package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport HtmlMethods from './HtmlMethods.js';\n\n\nnew CommandMap('html_macros', {\n  href:    'Href',\n  'class': 'Class',\n  style:   'Style',\n  cssId:   'Id'\n}, HtmlMethods);\n\nexport const HtmlConfiguration = Configuration.create(\n  'html', {handler: { macro: ['html_macros']}}\n);\n", "/*************************************************************\n *  Copyright (c) 2021-2022 MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview    Utility functions for the mathtools package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {EqnArrayItem} from '../base/BaseItems.js';\nimport ParseUtil from '../ParseUtil.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {Macro} from '../Symbol.js';\nimport ParseOptions from '../ParseOptions.js';\nimport {lookup} from '../../../util/Options.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\n\nimport {MathtoolsMethods} from './MathtoolsMethods.js';\nimport {PAIREDDELIMS} from './MathtoolsConfiguration.js';\n\n/**\n * Utility functions for the Mathtools package.\n */\nexport const MathtoolsUtil = {\n\n  /**\n   * Set the displaystyle and scriptlevel attributes of an mstyle element\n   *\n   * @param {MmlNode} mml     The mstyle node to modify.\n   * @param {string} style    The TeX style macro to apply.\n   */\n  setDisplayLevel(mml: MmlNode, style: string) {\n    if (!style) return;\n    const [display, script] = lookup(style, {\n      '\\\\displaystyle':      [true, 0],\n      '\\\\textstyle':         [false, 0],\n      '\\\\scriptstyle':       [false, 1],\n      '\\\\scriptscriptstyle': [false, 2]\n    }, [null, null]);\n    if (display !== null) {\n      mml.attributes.set('displaystyle', display);\n      mml.attributes.set('scriptlevel', script);\n    }\n  },\n\n  /**\n   * Check that the top stack item is an alignment table.\n   *\n   * @param {TexParser} parser   The current TeX parser.\n   * @param {string} name        The name of the macro doing the checking.\n   * @return {EqnArrayItem}      The top item (an EqnArrayItem).\n   */\n  checkAlignment(parser: TexParser, name: string): EqnArrayItem {\n    const top = parser.stack.Top() as EqnArrayItem;\n    if (top.kind !== EqnArrayItem.prototype.kind) {\n      throw new TexError('NotInAlignment', '%1 can only be used in aligment environments', name);\n    }\n    return top;\n  },\n\n  /**\n   * Add a paired delimiter to the list of them.\n   *\n   * @param {ParseOptions} config   The parse options to modify.\n   * @param {string} cs             The control sequence for the paired delimiters.\n   * @param {string[]} args         The definition for the paired delimiters.  One of:\n   *                                   [left, right]\n   *                                   [left, right, body, argcount]\n   *                                   [left, right, body, argcount, pre, post]\n   */\n  addPairedDelims(config: ParseOptions, cs: string, args: string[]) {\n    const delims = config.handlers.retrieve(PAIREDDELIMS) as CommandMap;\n    delims.add(cs, new Macro(cs, MathtoolsMethods.PairedDelimiters, args));\n  },\n\n  /**\n   * Adjust the line spacing for a table.\n   *\n   * @param {MmlNode} mtable   The mtable node to adjust (if it is a table).\n   * @param {string} spread    The dimension to change by (number-with-units).\n   */\n  spreadLines(mtable: MmlNode, spread: string) {\n    if (!mtable.isKind('mtable')) return;\n    let rowspacing = mtable.attributes.get('rowspacing') as string;\n    if (rowspacing) {\n      const add = ParseUtil.dimen2em(spread);\n      rowspacing = rowspacing\n        .split(/ /)\n        .map(s => ParseUtil.Em(Math.max(0, ParseUtil.dimen2em(s) + add)))\n        .join(' ');\n    } else {\n      rowspacing = spread;\n    }\n    mtable.attributes.set('rowspacing', rowspacing);\n  },\n\n  /**\n   * Check if a string is a number and return it with an explicit plus if there isn't one.\n   *\n   * @param {string} name   The name of the macro doing the checking.\n   * @param {string} n      The string to test as a number.\n   * @return {srtring}      The number with an explicit sign.\n   */\n  plusOrMinus(name: string, n: string): string {\n    n = n.trim();\n    if (!n.match(/^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)$/)) {\n      throw new TexError('NotANumber', 'Argument to %1 is not a number', name);\n    }\n    return (n.match(/^[-+]/) ? n : '+' + n);\n  },\n\n  /**\n   * Parse a \\prescript argument, with its associated format, if any.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} name        The name of the calling macro (\\prescript).\n   * @param {string} pos         The position for the argument (sub, sup, arg).\n   * @return {MmlNode}           The parsed MML version of the argument.\n   */\n  getScript(parser: TexParser, name: string, pos: string): MmlNode {\n    let arg = ParseUtil.trimSpaces(parser.GetArgument(name));\n    if (arg === '') {\n      return parser.create('node', 'none');\n    }\n    const format = parser.options.mathtools[`prescript-${pos}-format`];\n    format && (arg = `${format}{${arg}}`);\n    return new TexParser(arg, parser.stack.env, parser.configuration).mml();\n  }\n\n};\n", "/*************************************************************\n *  Copyright (c) 2020-2022 MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview    Macro and environment implementations for the mathtools package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\n\nimport {ArrayItem, EqnArrayItem} from '../base/BaseItems.js';\nimport {StackItem} from '../StackItem.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {ParseMethod, ParseResult} from '../Types.js';\nimport {AmsMethods} from '../ams/AmsMethods.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport {length2em, em} from '../../../util/lengths.js';\nimport {lookup} from '../../../util/Options.js';\nimport NewcommandUtil from '../newcommand/NewcommandUtil.js';\nimport NewcommandMethods from '../newcommand/NewcommandMethods.js';\n\nimport {MathtoolsTags} from './MathtoolsTags.js';\nimport {MathtoolsUtil} from './MathtoolsUtil.js';\n\n/**\n * The implementations for the macros and environments for the mathtools package.\n */\nexport const MathtoolsMethods: Record<string, ParseMethod> = {\n\n  /**\n   * Handle a mathtools matrix environment, with optional alignment.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {StackItem} begin    The BeginItem for the environment.\n   * @param {string} open        The open delimiter for the matrix.\n   * @param {string} close       The close delimiter for the matrix.\n   * @return {ParserResult}      The ArrayItem for the matrix.\n   */\n  MtMatrix(parser: TexParser, begin: StackItem, open: string, close: string): ParseResult {\n    const align = parser.GetBrackets(`\\\\begin{${begin.getName()}}`, 'c');\n    return MathtoolsMethods.Array(parser, begin, open, close, align);\n  },\n\n  /**\n   * Create a smallmatrix with given delimiters, and with optional alignment (and settable default)\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {StackItem} begin    The BeginItem for the environment.\n   * @param {string} open        The open delimiter for the matrix.\n   * @param {string} close       The close delimiter for the matrix.\n   * @param {string} align       The (optional) alignment.  If not given, use a bracket argument for it.\n   * @return {ParseResult}       The ArrayItem for the matrix.\n   */\n  MtSmallMatrix(parser: TexParser, begin: StackItem, open: string, close: string, align?: string): ParseResult {\n    if (!align) {\n      align = parser.GetBrackets(`\\\\begin{${begin.getName()}}`, parser.options.mathtools['smallmatrix-align']);\n    }\n    return MathtoolsMethods.Array(\n      parser, begin, open, close, align, ParseUtil.Em(1 / 3), '.2em', 'S', 1\n    );\n  },\n\n  /**\n   * Create the multlined StackItem.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {StackItem} begin    The BeginItem for the environment.\n   * @return {ParseResult}       The MultlinedItem.\n   */\n  MtMultlined(parser: TexParser, begin: StackItem): ParseResult {\n    const name = `\\\\begin{${begin.getName()}}`;\n    let pos = parser.GetBrackets(name, parser.options.mathtools['multlined-pos'] || 'c');\n    let width = pos ? parser.GetBrackets(name, '') : '';\n    if (pos && !pos.match(/^[cbt]$/)) {\n      [width, pos] = [pos, width];\n    }\n    parser.Push(begin);\n    const item = parser.itemFactory.create('multlined', parser, begin) as ArrayItem;\n    item.arraydef = {\n      displaystyle: true,\n      rowspacing: '.5em',\n      width: width || 'auto',\n      columnwidth: '100%',\n    };\n    return ParseUtil.setArrayAlign(item as ArrayItem, pos || 'c');\n  },\n\n  /**\n   * Replacement for the AMS HandleShove that includes optional spacing values\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} name        The name of the calling macro.\n   * @param {string} shove       Which way to shove the result.\n   */\n  HandleShove(parser: TexParser, name: string, shove: string) {\n    let top = parser.stack.Top();\n    if (top.kind !== 'multline' && top.kind !== 'multlined') {\n      throw new TexError(\n        'CommandInMultlined',\n        '%1 can only appear within the multline or multlined environments',\n        name);\n    }\n    if (top.Size()) {\n      throw new TexError(\n        'CommandAtTheBeginingOfLine',\n        '%1 must come at the beginning of the line',\n        name);\n    }\n    top.setProperty('shove', shove);\n    let shift = parser.GetBrackets(name);\n    let mml = parser.ParseArg(name);\n    if (shift) {\n      let mrow = parser.create('node', 'mrow', []);\n      let mspace = parser.create('node', 'mspace', [], {width: shift});\n      if (shove === 'left') {\n        mrow.appendChild(mspace);\n        mrow.appendChild(mml);\n      } else {\n        mrow.appendChild(mml);\n        mrow.appendChild(mspace);\n      }\n      mml = mrow;\n    }\n    parser.Push(mml);\n  },\n\n  /**\n   * Handle the spreadlines environment.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {StackItem} begin    The BeginItem for the environment.\n   */\n  SpreadLines(parser: TexParser, begin: StackItem) {\n    if (parser.stack.env.closing === begin.getName()) {\n      //\n      //  When the environment ends, look through the contents and\n      //  adjust the spacing in any tables, then push the results.\n      //\n      delete parser.stack.env.closing;\n      const top = parser.stack.Pop();\n      const mml = top.toMml();\n      const spread = top.getProperty('spread') as string;\n      if (mml.isInferred) {\n        for (const child of NodeUtil.getChildren(mml)) {\n          MathtoolsUtil.spreadLines(child, spread);\n        }\n      } else {\n        MathtoolsUtil.spreadLines(mml, spread);\n      }\n      parser.Push(mml);\n    } else {\n      //\n      //  Read the spread dimension and save it, then begin the environment.\n      //\n      const spread = parser.GetDimen(`\\\\begin{${begin.getName()}}`);\n      begin.setProperty('spread', spread);\n      parser.Push(begin);\n    }\n  },\n\n  /**\n   * Implements the various cases environments.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {StackItem} begin    The BeginItem for the environment.\n   * @param {string} open        The open delimiter for the matrix.\n   * @param {string} close       The close delimiter for the matrix.\n   * @param {string} style       The style (D, T, S, SS) for the contents of the array\n   * @return {ArrayItem}         The ArrayItem for the environment\n   */\n  Cases(parser: TexParser, begin: StackItem, open: string, close: string, style: string): ArrayItem {\n    const array = parser.itemFactory.create('array').setProperty('casesEnv', begin.getName()) as ArrayItem;\n    array.arraydef = {\n      rowspacing: '.2em',\n      columnspacing: '1em',\n      columnalign: 'left'\n    };\n    if (style === 'D') {\n      array.arraydef.displaystyle = true;\n    }\n    array.setProperties({open, close});\n    parser.Push(begin);\n    return array;\n  },\n\n  /**\n   * Handle \\mathrlap, \\mathllap, \\mathclap, and their cramped versions.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {string} pos         The position (l, c, r) of the lapped content\n   * @param {boolean} cramped    True if the style should be cramped\n   */\n  MathLap(parser: TexParser, name: string, pos: string, cramped: boolean) {\n    const style = parser.GetBrackets(name, '').trim();\n    let mml = parser.create('node', 'mstyle', [\n      parser.create('node', 'mpadded', [parser.ParseArg(name)], {\n        width: 0, ...(pos === 'r' ? {} : {lspace: (pos === 'l' ? '-1width' : '-.5width')})\n      })\n    ], {'data-cramped': cramped});\n    MathtoolsUtil.setDisplayLevel(mml, style);\n    parser.Push(parser.create('node', 'TeXAtom', [mml]));\n  },\n\n  /**\n   * Implements \\cramped.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  Cramped(parser: TexParser, name: string) {\n    const style = parser.GetBrackets(name, '').trim();\n    const arg = parser.ParseArg(name);\n    const mml = parser.create('node', 'mstyle', [arg], {'data-cramped': true});\n    MathtoolsUtil.setDisplayLevel(mml, style);\n    parser.Push(mml);\n  },\n\n  /**\n   * Implements \\clap (and could do \\llap and \\rlap, where the contents are text mode).\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {string} pos         The position (l, c, r) of the lapped content\n   */\n  MtLap(parser: TexParser, name: string, pos: string) {\n    const content = ParseUtil.internalMath(parser, parser.GetArgument(name), 0);\n    let mml = parser.create('node', 'mpadded', content, {width: 0});\n    if (pos !== 'r') {\n      NodeUtil.setAttribute(mml, 'lspace', pos === 'l' ? '-1width' : '-.5width');\n    }\n    parser.Push(mml);\n  },\n\n  /**\n   * Implements \\mathmakebox.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  MathMakeBox(parser: TexParser, name: string) {\n    const width = parser.GetBrackets(name);\n    const pos = parser.GetBrackets(name, 'c');\n    const mml = parser.create('node', 'mpadded', [parser.ParseArg(name)]);\n    if (width) {\n      NodeUtil.setAttribute(mml, 'width', width);\n    }\n    const align = lookup(pos, {c: 'center', r: 'right'}, '');\n    if (align) {\n      NodeUtil.setAttribute(mml, 'data-align', align);\n    }\n    parser.Push(mml);\n  },\n\n  /**\n   * Implements \\mathmbox.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  MathMBox(parser: TexParser, name: string) {\n    parser.Push(parser.create('node', 'mrow', [parser.ParseArg(name)]));\n  },\n\n  /**\n   * Implements \\underbacket and \\overbracket.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  UnderOverBracket(parser: TexParser, name: string) {\n    const thickness = length2em(parser.GetBrackets(name, '.1em'), .1);\n    const height = parser.GetBrackets(name, '.2em');\n    const arg = parser.GetArgument(name);\n    const [pos, accent, border] = (\n      name.charAt(1) === 'o' ?\n        ['over', 'accent', 'bottom'] :\n        ['under', 'accentunder', 'top']\n    );\n    const t = em(thickness);\n    const base = new TexParser(arg, parser.stack.env, parser.configuration).mml();\n    const copy = new TexParser(arg, parser.stack.env, parser.configuration).mml();\n    const script = parser.create('node', 'mpadded', [\n      parser.create('node', 'mphantom', [copy])\n    ], {\n      style: `border: ${t} solid; border-${border}: none`,\n      height: height,\n      depth: 0\n    });\n    const node = ParseUtil.underOver(parser, base, script, pos, true);\n    const munderover = NodeUtil.getChildAt(NodeUtil.getChildAt(node, 0), 0);  // TeXAtom.inferredMrow child 0\n    NodeUtil.setAttribute(munderover, accent, true);\n    parser.Push(node);\n  },\n\n  /**\n   * Implements \\Aboxed.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  Aboxed(parser: TexParser, name: string) {\n    //\n    //  Check that the top item is an alignment, and that we are on an even number of cells\n    //  (othewise add one to make it even).\n    //\n    const top = MathtoolsUtil.checkAlignment(parser, name);\n    if (top.row.length % 2 === 1) {\n      top.row.push(parser.create('node', 'mtd', []));\n    }\n    //\n    //  Get the argument and the rest of the TeX string.\n    //\n    const arg = parser.GetArgument(name);\n    const rest = parser.string.substr(parser.i);\n    //\n    //  Put the argument back, followed by \"&&\", and a marker that we look for below.\n    //\n    parser.string = arg + '&&\\\\endAboxed';\n    parser.i = 0;\n    //\n    //  Get the two parts separated by ampersands, and ignore the rest.\n    //\n    const left = parser.GetUpTo(name, '&');\n    const right = parser.GetUpTo(name, '&');\n    parser.GetUpTo(name, '\\\\endAboxed');\n    //\n    //  Insert the TeX needed for the boxed content\n    //\n    const tex = ParseUtil.substituteArgs(\n      parser, [left, right], '\\\\rlap{\\\\boxed{#1{}#2}}\\\\kern.267em\\\\phantom{#1}&\\\\phantom{{}#2}\\\\kern.267em'\n    );\n    parser.string = tex + rest;\n    parser.i = 0;\n  },\n\n  /**\n   * Implements \\ArrowBetweenLines.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  ArrowBetweenLines(parser: TexParser, name: string) {\n    const top = MathtoolsUtil.checkAlignment(parser, name);\n    if (top.Size() || top.row.length) {\n      throw new TexError('BetweenLines', '%1 must be on a row by itself', name);\n    }\n    const star = parser.GetStar();\n    const symbol = parser.GetBrackets(name, '\\\\Updownarrow');\n    if (star) {\n      top.EndEntry();\n      top.EndEntry();\n    }\n    const tex = (star ? '\\\\quad' + symbol : symbol + '\\\\quad');\n    const mml = new TexParser(tex, parser.stack.env, parser.configuration).mml();\n    parser.Push(mml);\n    top.EndEntry();\n    top.EndRow();\n  },\n\n  /**\n   * Implements \\vdotswithin.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  VDotsWithin(parser: TexParser, name: string) {\n    const top = parser.stack.Top() as EqnArrayItem;\n    const isFlush = (top.getProperty('flushspaceabove') === top.table.length);\n    const arg = '\\\\mmlToken{mi}{}' + parser.GetArgument(name) + '\\\\mmlToken{mi}{}';\n    const base = new TexParser(arg, parser.stack.env, parser.configuration).mml();\n    let mml = parser.create('node', 'mpadded', [\n      parser.create('node', 'mpadded', [\n        parser.create('node', 'mo', [\n          parser.create('text', '\\u22EE')\n        ])\n      ], {\n        width: 0,\n        lspace: '-.5width', ...(isFlush ? {height: '-.6em', voffset: '-.18em'} : {})\n      }),\n      parser.create('node', 'mphantom', [base])\n    ], {\n      lspace: '.5width'\n    });\n    parser.Push(mml);\n  },\n\n  /**\n   * Implements \\shortvdotswithin.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  ShortVDotsWithin(parser: TexParser, _name: string) {\n    const top = parser.stack.Top() as EqnArrayItem;\n    const star = parser.GetStar();\n    MathtoolsMethods.FlushSpaceAbove(parser, '\\\\MTFlushSpaceAbove');\n    !star && top.EndEntry();\n    MathtoolsMethods.VDotsWithin(parser, '\\\\vdotswithin');\n    star && top.EndEntry();\n    MathtoolsMethods.FlushSpaceBelow(parser, '\\\\MTFlushSpaceBelow');\n  },\n\n  /**\n   * Implements \\MTFlushSpaceAbove.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  FlushSpaceAbove(parser: TexParser, name: string) {\n    const top = MathtoolsUtil.checkAlignment(parser, name);\n    top.setProperty('flushspaceabove', top.table.length);  // marker so \\vdotswithin can shorten its height\n    top.addRowSpacing('-' + parser.options.mathtools['shortvdotsadjustabove']);\n  },\n\n  /**\n   * Implements \\MTFlushSpaceBelow.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  FlushSpaceBelow(parser: TexParser, name: string) {\n    const top = MathtoolsUtil.checkAlignment(parser, name);\n    top.Size() && top.EndEntry();\n    top.EndRow();\n    top.addRowSpacing('-' + parser.options.mathtools['shortvdotsadjustbelow']);\n  },\n\n  /**\n   * Implements a paired delimiter (e.g., from \\DeclarePairedDelimiter).\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {string} open        The open delimiter.\n   * @param {string} close       The close delimiter.\n   * @param {string?} body       The body betweeen the delimiters.\n   * @param {number?} n          The number of arguments to use for the body.\n   * @param {string?} pre        The TeX to go before the open delimiter.\n   * @param {string?} post       The TeX to go after the close delimiter.\n   */\n  PairedDelimiters(parser: TexParser, name: string,\n                   open: string, close: string,\n                   body: string = '#1', n: number = 1,\n                   pre: string = '',  post: string = '') {\n    const star = parser.GetStar();\n    const size = (star ? '' : parser.GetBrackets(name));\n    const [left, right] = (star ? ['\\\\left', '\\\\right'] : size ? [size + 'l' , size + 'r'] : ['', '']);\n    const delim = (star ? '\\\\middle' : size || '');\n    if (n) {\n      const args: string[] = [];\n      for (let i = args.length; i < n; i++) {\n        args.push(parser.GetArgument(name));\n      }\n      pre  = ParseUtil.substituteArgs(parser, args, pre);\n      body = ParseUtil.substituteArgs(parser, args, body);\n      post = ParseUtil.substituteArgs(parser, args, post);\n    }\n    body = body.replace(/\\\\delimsize/g, delim);\n    parser.string = [pre, left, open, body, right, close, post, parser.string.substr(parser.i)]\n      .reduce((s, part) => ParseUtil.addArgs(parser, s, part), '');\n    parser.i = 0;\n    ParseUtil.checkMaxMacros(parser);\n  },\n\n  /**\n   * Implements \\DeclarePairedDelimiter.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  DeclarePairedDelimiter(parser: TexParser, name: string) {\n    const cs = NewcommandUtil.GetCsNameArgument(parser, name);\n    const open = parser.GetArgument(name);\n    const close = parser.GetArgument(name);\n    MathtoolsUtil.addPairedDelims(parser.configuration, cs, [open, close]);\n  },\n\n  /**\n   * Implements \\DeclarePairedDelimiterX.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  DeclarePairedDelimiterX(parser: TexParser, name: string) {\n    const cs = NewcommandUtil.GetCsNameArgument(parser, name);\n    const n = NewcommandUtil.GetArgCount(parser, name);\n    const open = parser.GetArgument(name);\n    const close = parser.GetArgument(name);\n    const body = parser.GetArgument(name);\n    MathtoolsUtil.addPairedDelims(parser.configuration, cs, [open, close, body, n]);\n  },\n\n  /**\n   * Implements \\DeclarePairedDelimiterXPP.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  DeclarePairedDelimiterXPP(parser: TexParser, name: string) {\n    const cs = NewcommandUtil.GetCsNameArgument(parser, name);\n    const n = NewcommandUtil.GetArgCount(parser, name);\n    const pre = parser.GetArgument(name);\n    const open = parser.GetArgument(name);\n    const close = parser.GetArgument(name);\n    const post = parser.GetArgument(name);\n    const body = parser.GetArgument(name);\n    MathtoolsUtil.addPairedDelims(parser.configuration, cs, [open, close, body, n, pre, post]);\n  },\n\n  /**\n   * Implements \\centeredcolon, \\ordinarycolon, \\MTThinColon.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {boolean} center     True if colon should be centered\n   * @param {boolean} force      True menas always center (don't use centercolon option).\n   * @param {boolean} thin       True if this is a thin color (for \\coloneqq, etc).\n   */\n  CenterColon(parser: TexParser, _name: string, center: boolean, force: boolean = false, thin: boolean = false) {\n    const options = parser.options.mathtools;\n    let mml = parser.create('token', 'mo', {}, ':');\n    if (center && (options['centercolon'] || force)) {\n      const dy = options['centercolon-offset'];\n      mml = parser.create('node', 'mpadded', [mml], {\n        voffset: dy, height: `+${dy}`, depth: `-${dy}`,\n          ...(thin ? {width: options['thincolon-dw'], lspace: options['thincolon-dx']} : {})\n      });\n    }\n    parser.Push(mml);\n  },\n\n  /**\n   * Implements \\coloneqq and related macros.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {string} tex         The tex string to use (if not using unicode versions or if there isn't one).\n   * @param {string} unicode     The unicode character (if there is one).\n   */\n  Relation(parser: TexParser, _name: string, tex: string, unicode?: string) {\n    const options = parser.options.mathtools;\n    if (options['use-unicode'] && unicode) {\n      parser.Push(parser.create('token', 'mo', {texClass: TEXCLASS.REL}, unicode));\n    } else {\n      tex = '\\\\mathrel{' + tex.replace(/:/g, '\\\\MTThinColon').replace(/-/g, '\\\\mathrel{-}') + '}';\n      parser.string = ParseUtil.addArgs(parser, tex, parser.string.substr(parser.i));\n      parser.i = 0;\n    }\n  },\n\n  /**\n   * Implements \\ndownarrow and \\nuparrow via a terrible hack (visual only, no chance of this working with SRE).\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {string} c           The base arrow for the slashed version\n   * @param {string} dy          A vertical offset for the slash\n   */\n  NArrow(parser: TexParser, _name: string, c: string, dy: string) {\n    parser.Push(\n      parser.create('node', 'TeXAtom', [\n        parser.create('token', 'mtext', {}, c),\n        parser.create('node', 'mpadded', [\n          parser.create('node', 'mpadded', [\n            parser.create('node', 'menclose', [\n              parser.create('node', 'mspace', [], {height: '.2em', depth: 0, width: '.4em'})\n            ], {notation: 'updiagonalstrike', 'data-thickness': '.05em', 'data-padding': 0})\n          ], {width: 0, lspace: '-.5width', voffset: dy}),\n          parser.create('node', 'mphantom', [\n            parser.create('token', 'mtext', {}, c)\n          ])\n        ], {width: 0, lspace: '-.5width'})\n      ], {texClass: TEXCLASS.REL})\n    );\n  },\n\n  /**\n   * Implements \\splitfrac and \\splitdfrac.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {boolean} display    True if \\splitdfrac.\n   */\n  SplitFrac(parser: TexParser, name: string, display: boolean) {\n    const num = parser.ParseArg(name);\n    const den = parser.ParseArg(name);\n    parser.Push(\n      parser.create('node', 'mstyle', [\n        parser.create('node', 'mfrac', [\n          parser.create('node', 'mstyle', [\n            num,\n            parser.create('token', 'mi'),\n            parser.create('token', 'mspace', {width: '1em'}) // no parameter for this in mathtools.  Should we add one?\n          ], {scriptlevel: 0}),\n          parser.create('node', 'mstyle', [\n            parser.create('token', 'mspace', {width: '1em'}),\n            parser.create('token', 'mi'),\n            den\n          ], {scriptlevel: 0})\n        ], {linethickness: 0, numalign: 'left', denomalign: 'right'})\n      ], {displaystyle: display, scriptlevel: 0})\n    );\n  },\n\n  /**\n   * Implements \\xmathstrut.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  XMathStrut(parser: TexParser, name: string) {\n    let dd = parser.GetBrackets(name);\n    let dh = parser.GetArgument(name);\n    dh = MathtoolsUtil.plusOrMinus(name, dh);\n    dd = MathtoolsUtil.plusOrMinus(name, dd || dh);\n    parser.Push(\n      parser.create('node', 'TeXAtom', [\n        parser.create('node', 'mpadded', [\n          parser.create('node', 'mphantom', [\n            parser.create('token', 'mo', {stretchy: false}, '(')\n          ])\n        ], {width: 0, height: dh + 'height', depth: dd + 'depth'})\n      ], {texClass: TEXCLASS.ORD})\n    );\n  },\n\n  /**\n   * Implements \\prescript.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  Prescript(parser: TexParser, name: string) {\n    const sup = MathtoolsUtil.getScript(parser, name, 'sup');\n    const sub = MathtoolsUtil.getScript(parser, name, 'sub');\n    const base = MathtoolsUtil.getScript(parser, name, 'arg');\n    if (NodeUtil.isType(sup, 'none') && NodeUtil.isType(sub, 'none')) {\n      parser.Push(base);\n      return;\n    }\n    const mml = parser.create('node', 'mmultiscripts', [base]);\n    NodeUtil.getChildren(mml).push(null, null);\n    NodeUtil.appendChildren(mml, [parser.create('node', 'mprescripts'), sub, sup]);\n    mml.setProperty('fixPrescript', true);\n    parser.Push(mml);\n  },\n\n  /**\n   * Implements \\newtagform and \\renewtagform.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   * @param {boolean=} renew     True if \\renewtagform.\n   */\n  NewTagForm(parser: TexParser, name: string, renew: boolean = false) {\n    const tags = parser.tags as MathtoolsTags;\n    if (!('mtFormats' in tags)) {\n      throw new TexError('TagsNotMT', '%1 can only be used with ams or mathtools tags', name);\n    }\n    const id = parser.GetArgument(name).trim();\n    if (!id) {\n      throw new TexError('InvalidTagFormID', 'Tag form name can\\'t be empty');\n    }\n    const format = parser.GetBrackets(name, '');\n    const left = parser.GetArgument(name);\n    const right = parser.GetArgument(name);\n    if (!renew && tags.mtFormats.has(id)) {\n      throw new TexError('DuplicateTagForm', 'Duplicate tag form: %1', id);\n    }\n    tags.mtFormats.set(id, [left, right, format]);\n  },\n\n  /**\n   * Implements \\usetagform.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  UseTagForm(parser: TexParser, name: string) {\n    const tags = parser.tags as MathtoolsTags;\n    if (!('mtFormats' in tags)) {\n      throw new TexError('TagsNotMT', '%1 can only be used with ams or mathtools tags', name);\n    }\n    const id = parser.GetArgument(name).trim();\n    if (!id) {\n      tags.mtCurrent = null;\n      return;\n    }\n    if (!tags.mtFormats.has(id)) {\n      throw new TexError('UndefinedTagForm', 'Undefined tag form: %1', id);\n    }\n    tags.mtCurrent = tags.mtFormats.get(id);\n  },\n\n  /**\n   * Implements \\mathtoolsset.\n   *\n   * @param {TexParser} parser   The calling parser.\n   * @param {string} name        The macro name.\n   */\n  SetOptions(parser: TexParser, name: string) {\n    const options = parser.options.mathtools;\n    if (!options['allow-mathtoolsset']) {\n      throw new TexError('ForbiddenMathtoolsSet', '%1 is disabled', name);\n    }\n    const allowed = {} as {[id: string]: number};\n    Object.keys(options).forEach(id => {\n      if (id !== 'pariedDelimiters' && id !== 'tagforms' && id !== 'allow-mathtoolsset') {\n        allowed[id] = 1;\n      }\n    });\n    const args = parser.GetArgument(name);\n    const keys = ParseUtil.keyvalOptions(args, allowed, true);\n    for (const id of Object.keys(keys)) {\n      options[id] = keys[id];\n    }\n  },\n\n  /**\n   * Use the Base or AMS methods for these\n   */\n  Array:  BaseMethods.Array,\n  Macro:  BaseMethods.Macro,\n  xArrow:      AmsMethods.xArrow,\n  HandleRef:   AmsMethods.HandleRef,\n  AmsEqnArray: AmsMethods.AmsEqnArray,\n  MacroWithTemplate: NewcommandMethods.MacroWithTemplate,\n\n};\n", "/*************************************************************\n *  Copyright (c) 2020-2022 MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview    Macro and environment mappings for the mathtools package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport ParseMethods from '../ParseMethods.js';\nimport {CommandMap, EnvironmentMap, DelimiterMap} from '../SymbolMap.js';\nimport {TexConstant} from '../TexConstants.js';\n\nimport {MathtoolsMethods} from './MathtoolsMethods.js';\n\n//\n//  Mathtools macros that are not implemented:\n//\n//    \\smashoperator[〈pos〉]{〈operator with limits〉}\n//    \\SwapAboveDisplaySkip\n//    \\noeqref{〈label,label,. . . 〉}\n//    \\intertext{〈text 〉}\n//    \\shortintertext{〈text 〉}\n//    \\reDeclarePairedDelimiterInnerWrapper{〈macro name〉}{〈star or nostarnonscaled or nostarscaled〉}{〈code〉}\n//    \\DeclareMathSizes{〈dimen〉}{〈dimen〉}{〈dimen〉}{〈dimen〉}\n//    \\newgathered{〈name〉}{〈pre_line〉}{〈post_line〉}{〈after〉}\n//    \\renewgathered{〈name〉}{〈pre_line〉}{〈post_line〉}{〈after〉}\n//\n\n/**\n * The macros for this package.\n */\nnew CommandMap('mathtools-macros', {\n\n  shoveleft:  ['HandleShove', TexConstant.Align.LEFT],    // override AMS version\n  shoveright: ['HandleShove', TexConstant.Align.RIGHT],   // override AMS version\n\n  xleftrightarrow:    ['xArrow', 0x2194, 10, 10],\n  xLeftarrow:         ['xArrow', 0x21D0, 12, 7],\n  xRightarrow:        ['xArrow', 0x21D2, 7, 12],\n  xLeftrightarrow:    ['xArrow', 0x21D4, 12, 12],\n  xhookleftarrow:     ['xArrow', 0x21A9, 10, 5],\n  xhookrightarrow:    ['xArrow', 0x21AA, 5, 10],\n  xmapsto:            ['xArrow', 0x21A6, 10, 10],\n  xrightharpoondown:  ['xArrow', 0x21C1, 5, 10],\n  xleftharpoondown:   ['xArrow', 0x21BD, 10, 5],\n  xrightleftharpoons: ['xArrow', 0x21CC, 10, 10],\n  xrightharpoonup:    ['xArrow', 0x21C0, 5, 10],\n  xleftharpoonup:     ['xArrow', 0x21BC, 10, 5],\n  xleftrightharpoons: ['xArrow', 0x21CB, 10, 10],\n\n  mathllap: ['MathLap', 'l', false],\n  mathrlap: ['MathLap', 'r', false],\n  mathclap: ['MathLap', 'c', false],\n  clap:     ['MtLap', 'c'],\n  textllap: ['MtLap', 'l'],\n  textrlap: ['MtLap', 'r'],\n  textclap: ['MtLap', 'c'],\n\n  cramped: 'Cramped',\n  crampedllap: ['MathLap', 'l', true],\n  crampedrlap: ['MathLap', 'r', true],\n  crampedclap: ['MathLap', 'c', true],\n  crampedsubstack: ['Macro', '\\\\begin{crampedsubarray}{c}#1\\\\end{crampedsubarray}', 1],\n\n  mathmbox:    'MathMBox',\n  mathmakebox: 'MathMakeBox',\n\n  overbracket:  'UnderOverBracket',\n  underbracket: 'UnderOverBracket',\n\n  refeq: 'HandleRef',\n\n  MoveEqLeft: ['Macro', '\\\\hspace{#1em}&\\\\hspace{-#1em}', 1, '2'],\n  Aboxed: 'Aboxed',\n\n  ArrowBetweenLines: 'ArrowBetweenLines',\n  vdotswithin: 'VDotsWithin',\n  shortvdotswithin: 'ShortVDotsWithin',\n  MTFlushSpaceAbove: 'FlushSpaceAbove',\n  MTFlushSpaceBelow: 'FlushSpaceBelow',\n\n  DeclarePairedDelimiter:     'DeclarePairedDelimiter',\n  DeclarePairedDelimiterX:    'DeclarePairedDelimiterX',\n  DeclarePairedDelimiterXPP:  'DeclarePairedDelimiterXPP',\n\n  //\n  //  Typos from initial release -- kept for backward compatibility for now\n  //\n  DeclarePairedDelimiters:    'DeclarePairedDelimiter',\n  DeclarePairedDelimitersX:   'DeclarePairedDelimiterX',\n  DeclarePairedDelimitersXPP: 'DeclarePairedDelimiterXPP',\n\n  centercolon: ['CenterColon', true, true],\n  ordinarycolon: ['CenterColon', false],\n  MTThinColon: ['CenterColon', true, true, true],\n\n  coloneqq:    ['Relation', ':=', '\\u2254'],\n  Coloneqq:    ['Relation', '::=', '\\u2A74'],\n  coloneq:     ['Relation', ':-'],\n  Coloneq:     ['Relation', '::-'],\n  eqqcolon:    ['Relation', '=:', '\\u2255'],\n  Eqqcolon:    ['Relation', '=::'],\n  eqcolon:     ['Relation', '-:', '\\u2239'],\n  Eqcolon:     ['Relation', '-::'],\n  colonapprox: ['Relation', ':\\\\approx'],\n  Colonapprox: ['Relation', '::\\\\approx'],\n  colonsim:    ['Relation', ':\\\\sim'],\n  Colonsim:    ['Relation', '::\\\\sim'],\n  dblcolon:    ['Relation', '::', '\\u2237'],\n\n  nuparrow:   ['NArrow', '\\u2191', '.06em'],\n  ndownarrow: ['NArrow', '\\u2193', '.25em'],\n  bigtimes:   ['Macro', '\\\\mathop{\\\\Large\\\\kern-.1em\\\\boldsymbol{\\\\times}\\\\kern-.1em}'],\n\n  splitfrac:  ['SplitFrac', false],\n  splitdfrac: ['SplitFrac', true],\n\n  xmathstrut: 'XMathStrut',\n\n  prescript: 'Prescript',\n\n  newtagform: ['NewTagForm', false],\n  renewtagform: ['NewTagForm', true],\n  usetagform: 'UseTagForm',\n\n  adjustlimits: [\n    'MacroWithTemplate',\n    '\\\\mathop{{#1}\\\\vphantom{{#3}}}_{{#2}\\\\vphantom{{#4}}}\\\\mathop{{#3}\\\\vphantom{{#1}}}_{{#4}\\\\vphantom{{#2}}}',\n    4, , '_', , '_'\n  ],\n\n  mathtoolsset: 'SetOptions'\n\n}, MathtoolsMethods);\n\n/**\n *  The environments for this package.\n */\nnew EnvironmentMap('mathtools-environments', ParseMethods.environment, {\n  dcases:  ['Array', null, '\\\\{', '', 'll', null, '.2em', 'D'],\n  rcases:  ['Array', null, '', '\\\\}', 'll', null, '.2em'],\n  drcases: ['Array', null, '', '\\\\}', 'll', null, '.2em', 'D'],\n  'dcases*':  ['Cases', null, '{', '', 'D'],\n  'rcases*':  ['Cases', null, '', '}'],\n  'drcases*': ['Cases', null, '', '}', 'D'],\n  'cases*':   ['Cases', null, '{', ''],\n\n  'matrix*':  ['MtMatrix', null, null, null],\n  'pmatrix*': ['MtMatrix', null, '(', ')'],\n  'bmatrix*': ['MtMatrix', null, '[', ']'],\n  'Bmatrix*': ['MtMatrix', null, '\\\\{', '\\\\}'],\n  'vmatrix*': ['MtMatrix', null, '\\\\vert', '\\\\vert'],\n  'Vmatrix*': ['MtMatrix', null, '\\\\Vert', '\\\\Vert'],\n\n  'smallmatrix*':  ['MtSmallMatrix', null, null, null],\n  psmallmatrix:    ['MtSmallMatrix', null, '(', ')', 'c'],\n  'psmallmatrix*': ['MtSmallMatrix', null, '(', ')'],\n  bsmallmatrix:    ['MtSmallMatrix', null, '[', ']', 'c'],\n  'bsmallmatrix*': ['MtSmallMatrix', null, '[', ']'],\n  Bsmallmatrix:    ['MtSmallMatrix', null, '\\\\{', '\\\\}', 'c'],\n  'Bsmallmatrix*': ['MtSmallMatrix', null, '\\\\{', '\\\\}'],\n  vsmallmatrix:    ['MtSmallMatrix', null, '\\\\vert', '\\\\vert', 'c'],\n  'vsmallmatrix*': ['MtSmallMatrix', null, '\\\\vert', '\\\\vert'],\n  Vsmallmatrix:    ['MtSmallMatrix', null, '\\\\Vert', '\\\\Vert', 'c'],\n  'Vsmallmatrix*': ['MtSmallMatrix', null, '\\\\Vert', '\\\\Vert'],\n\n  crampedsubarray: ['Array', null, null, null, null, '0em', '0.1em', 'S\\'', 1],\n\n  multlined: 'MtMultlined',\n\n  spreadlines: ['SpreadLines', true],\n\n  lgathered: ['AmsEqnArray', null, null, null, 'l', null, '.5em', 'D'],\n  rgathered: ['AmsEqnArray', null, null, null, 'r', null, '.5em', 'D'],\n\n}, MathtoolsMethods);\n\n/**\n * The delimiters for this package.\n */\nnew DelimiterMap('mathtools-delimiters', ParseMethods.delimiter, {\n  '\\\\lparen': '(',\n  '\\\\rparen': ')'\n});\n\n/**\n * The special characters for this package.\n */\nnew CommandMap('mathtools-characters', {\n  ':' : ['CenterColon', true]\n}, MathtoolsMethods);\n", "/*************************************************************\n *  Copyright (c) 2021-2022 MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview    Tags implementation for the mathtools package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport TexError from '../TexError.js';\nimport {ParserConfiguration} from '../Configuration.js';\nimport {TeX} from '../../tex.js';\nimport {AbstractTags, TagsFactory} from '../Tags.js';\n\n\n/**\n * The type for the Mathtools tags (including their data).\n */\nexport type MathtoolsTags = AbstractTags & {\n  mtFormats: Map<string, [string, string, string]>;  // name -> [left, right, format]\n  mtCurrent: [string, string, string];               // [left, right, format]\n};\n\n/**\n * The ID number for the current tag class\n */\nlet tagID = 0;\n\n/**\n * Creates and registers a subclass of the currently configured tag class\n * that handles the formats created by the \\newtagform macro.\n */\nexport function MathtoolsTagFormat(config: ParserConfiguration, jax: TeX<any, any, any>) {\n  /**\n   * If the tag format is being added by one of the other extensions,\n   *   as is done for the 'ams' tags, make sure it is defined so we can create it.\n   */\n  const tags = jax.parseOptions.options.tags;\n  if (tags !== 'base' && config.tags.hasOwnProperty(tags)) {\n    TagsFactory.add(tags, config.tags[tags]);\n  }\n\n  /**\n   * The original tag class to be extended (none, ams, or all)\n   */\n  const TagClass = TagsFactory.create(jax.parseOptions.options.tags).constructor as typeof AbstractTags;\n\n  /**\n   * A Tags object that uses \\newtagform to define the formatting\n   */\n  class TagFormat extends TagClass {\n\n    /**\n     * The defined tag formats\n     */\n    public mtFormats: Map<string, [string, string, string]> = new Map();\n\n    /**\n     * The format currently in use ([left, right, format]), or null for using the default\n     */\n    public mtCurrent: [string, string, string] = null;\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor() {\n      super();\n      const forms = jax.parseOptions.options.mathtools.tagforms;\n      for (const form of Object.keys(forms)) {\n        if (!Array.isArray(forms[form]) || forms[form].length !== 3) {\n          throw new TexError('InvalidTagFormDef',\n                             'The tag form definition for \"%1\" should be an array fo three strings', form);\n        }\n        this.mtFormats.set(form, forms[form]);\n      }\n    }\n\n    /**\n     * @override\n     */\n    public formatTag(tag: string) {\n      if (this.mtCurrent) {\n        const [left, right, format] = this.mtCurrent;\n        return (format ? `${left}${format}{${tag}}${right}` : `${left}${tag}${right}`);\n      }\n      return super.formatTag(tag);\n    }\n  }\n\n  //\n  //  Get a unique name for the tag class (since it is tied to the input jax)\n  //  Note:  These never get freed, so they will accumulate if you create many\n  //  TeX input jax instances with this extension.\n  //\n  tagID++;\n  const tagName = 'MathtoolsTags-' + tagID;\n  //\n  // Register the tag class\n  //\n  TagsFactory.add(tagName, TagFormat);\n  jax.parseOptions.options.tags = tagName;\n}\n", "/*************************************************************\n *  Copyright (c) 2020-2022 MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview    Implementation of items for the mathtools package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {MultlineItem} from '../ams/AmsItems.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {TexConstant} from '../TexConstants.js';\n\n\n/**\n * The StackItem for the multlined environment\n */\nexport class MultlinedItem extends MultlineItem {\n\n  /**\n   * @override\n   */\n  get kind() {\n    return 'multlined';\n  }\n\n\n  /**\n   * @override\n   */\n  public EndTable() {\n    if (this.Size() || this.row.length) {\n      this.EndEntry();\n      this.EndRow();\n    }\n    if (this.table.length > 1) {\n      const options = this.factory.configuration.options.mathtools;\n      const gap = options.multlinegap;\n      const firstskip = options['firstline-afterskip'] || gap;\n      const lastskip = options['lastline-preskip'] || gap;\n      const first = NodeUtil.getChildren(this.table[0])[0];\n      if (NodeUtil.getAttribute(first, 'columnalign') !== TexConstant.Align.RIGHT) {\n        first.appendChild(this.create('node', 'mspace', [], {width: firstskip}));\n      }\n      const last = NodeUtil.getChildren(this.table[this.table.length - 1])[0];\n      if (NodeUtil.getAttribute(last, 'columnalign') !== TexConstant.Align.LEFT) {\n        const top = NodeUtil.getChildren(last)[0];\n        top.childNodes.unshift(null);\n        const space = this.create('node', 'mspace', [], {width: lastskip});\n        NodeUtil.setChild(top, 0, space);\n      }\n    }\n    super.EndTable.call(this);\n  }\n\n}\n", "/*************************************************************\n *  Copyright (c) 2020-2022 MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview    Configuration file for the mathtools package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {expandable} from '../../../util/Options.js';\nimport {ParserConfiguration} from '../Configuration.js';\nimport {TeX} from '../../tex.js';\nimport ParseOptions from '../ParseOptions.js';\n\nimport './MathtoolsMappings.js';\nimport {MathtoolsUtil} from './MathtoolsUtil.js';\nimport {MathtoolsTagFormat} from './MathtoolsTags.js';\nimport {MultlinedItem} from './MathtoolsItems.js';\n\n/**\n * The name of the paried-delimiters command map.\n */\nexport const PAIREDDELIMS = 'mathtools-paired-delims';\n\n/**\n * Create the paired-delimiters command map, and link it into the configuration.\n * @param {ParserConfiguration} config   The current configuration.\n */\nfunction initMathtools(config: ParserConfiguration) {\n  new CommandMap(PAIREDDELIMS, {}, {});\n  config.append(Configuration.local({handler: {macro: [PAIREDDELIMS]}, priority: -5}));\n}\n\n/**\n * Add any pre-defined paired delimiters, and subclass the configured tag format.\n * @param {ParserConfiguration} config   The current configuration.\n * @param {TeX} jac                      The TeX input jax\n */\nfunction configMathtools(config: ParserConfiguration, jax: TeX<any, any, any>) {\n  const parser = jax.parseOptions;\n  const pairedDelims = parser.options.mathtools.pairedDelimiters;\n  for (const cs of Object.keys(pairedDelims)) {\n    MathtoolsUtil.addPairedDelims(parser, cs, pairedDelims[cs]);\n  }\n  MathtoolsTagFormat(config, jax);\n}\n\n/**\n * A filter to fix up mmultiscripts elements.\n * @param {ParseOptions} data   The parse options.\n */\nexport function fixPrescripts({data}: {data: ParseOptions}) {\n  for (const node of data.getList('mmultiscripts')) {\n    if (!node.getProperty('fixPrescript')) continue;\n    const childNodes = NodeUtil.getChildren(node);\n    let n = 0;\n    for (const i of [1, 2]) {\n      if (!childNodes[i]) {\n        NodeUtil.setChild(node, i, data.nodeFactory.create('node', 'none'));\n        n++;\n      }\n    }\n    for (const i of [4, 5]) {\n      if (NodeUtil.isType(childNodes[i], 'mrow') && NodeUtil.getChildren(childNodes[i]).length === 0) {\n        NodeUtil.setChild(node, i, data.nodeFactory.create('node', 'none'));\n      }\n    }\n    if (n === 2) {\n      childNodes.splice(1, 2);\n    }\n  }\n}\n\n/**\n * The configuration for the mathtools package\n */\nexport const MathtoolsConfiguration = Configuration.create(\n  'mathtools', {\n    handler: {\n      macro: ['mathtools-macros', 'mathtools-delimiters'],\n      environment: ['mathtools-environments'],\n      delimiter: ['mathtools-delimiters'],\n      character: ['mathtools-characters']\n    },\n    items: {\n      [MultlinedItem.prototype.kind]: MultlinedItem\n    },\n    init: initMathtools,\n    config: configMathtools,\n    postprocessors: [[fixPrescripts, -6]],\n    options: {\n      mathtools: {\n        'multlinegap': '1em',                   // horizontal space for multlined environments\n        'multlined-pos': 'c',                   // default alignment for multlined environments\n        'firstline-afterskip': '',              // space for first line of multlined (overrides multlinegap)\n        'lastline-preskip': '',                 // space for last line of multlined (overrides multlinegap)\n        'smallmatrix-align': 'c',               // default alignment for smallmatrix environments\n        'shortvdotsadjustabove': '.2em',        // space to remove above \\shortvdots\n        'shortvdotsadjustbelow': '.2em',        // space to remove below \\shortvdots\n        'centercolon': false,                   // true to have colon automatically centered\n        'centercolon-offset': '.04em',          // vertical adjustment for centered colons\n        'thincolon-dx': '-.04em',               // horizontal adjustment for thin colons (e.g., \\coloneqq)\n        'thincolon-dw': '-.08em',               // width adjustment for thin colons\n        'use-unicode': false,                   // true to use unicode characters rather than multi-character\n                                                //   version for \\coloneqq, etc., when possible\n        'prescript-sub-format': '',             // format for \\prescript subscript\n        'prescript-sup-format': '',             // format for \\prescript superscript\n        'prescript-arg-format': '',             // format for \\prescript base\n        'allow-mathtoolsset': true,             // true to allow \\mathtoolsset to change settings\n        pairedDelimiters: expandable({}),       // predefined paired delimiters\n                                                //     name: [left, right, body, argcount, pre, post]\n        tagforms: expandable({}),               // tag form definitions\n                                                //     name: [left, right, format]\n       }\n    }\n  }\n);\n", "\"use strict\";\n/*!\n *************************************************************************\n *\n *  mhchemParser.ts\n *  4.2.1\n *\n *  Parser for the \\ce command and \\pu command for MathJax and Co.\n *\n *  mhchem's \\ce is a tool for writing beautiful chemical equations easily.\n *  mhchem's \\pu is a tool for writing physical units easily.\n *\n *  ----------------------------------------------------------------------\n *\n *  Copyright (c) 2015-2023 Martin Hensel\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  ----------------------------------------------------------------------\n *\n *  https://github.com/mhchem/mhchemParser\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mhchemParser = void 0;\nvar mhchemParser = (function () {\n    function mhchemParser() {\n    }\n    mhchemParser.toTex = function (input, type) {\n        return _mhchemTexify.go(_mhchemParser.go(input, type), type !== \"tex\");\n    };\n    return mhchemParser;\n}());\nexports.mhchemParser = mhchemParser;\nfunction _mhchemCreateTransitions(o) {\n    var pattern, state;\n    var transitions = {};\n    for (pattern in o) {\n        for (state in o[pattern]) {\n            var stateArray = state.split(\"|\");\n            o[pattern][state].stateArray = stateArray;\n            for (var i = 0; i < stateArray.length; i++) {\n                transitions[stateArray[i]] = [];\n            }\n        }\n    }\n    for (pattern in o) {\n        for (state in o[pattern]) {\n            var stateArray = o[pattern][state].stateArray || [];\n            for (var i = 0; i < stateArray.length; i++) {\n                var p = o[pattern][state];\n                p.action_ = [].concat(p.action_);\n                for (var k = 0; k < p.action_.length; k++) {\n                    if (typeof p.action_[k] === \"string\") {\n                        p.action_[k] = { type_: p.action_[k] };\n                    }\n                }\n                var patternArray = pattern.split(\"|\");\n                for (var j = 0; j < patternArray.length; j++) {\n                    if (stateArray[i] === '*') {\n                        var t = void 0;\n                        for (t in transitions) {\n                            transitions[t].push({ pattern: patternArray[j], task: p });\n                        }\n                    }\n                    else {\n                        transitions[stateArray[i]].push({ pattern: patternArray[j], task: p });\n                    }\n                }\n            }\n        }\n    }\n    return transitions;\n}\n;\nvar _mhchemParser = {\n    go: function (input, stateMachine) {\n        if (!input) {\n            return [];\n        }\n        if (stateMachine === undefined) {\n            stateMachine = 'ce';\n        }\n        var state = '0';\n        var buffer = {};\n        buffer['parenthesisLevel'] = 0;\n        input = input.replace(/\\n/g, \" \");\n        input = input.replace(/[\\u2212\\u2013\\u2014\\u2010]/g, \"-\");\n        input = input.replace(/[\\u2026]/g, \"...\");\n        var lastInput;\n        var watchdog = 10;\n        var output = [];\n        while (true) {\n            if (lastInput !== input) {\n                watchdog = 10;\n                lastInput = input;\n            }\n            else {\n                watchdog--;\n            }\n            var machine = _mhchemParser.stateMachines[stateMachine];\n            var t = machine.transitions[state] || machine.transitions['*'];\n            iterateTransitions: for (var i = 0; i < t.length; i++) {\n                var matches = _mhchemParser.patterns.match_(t[i].pattern, input);\n                if (matches) {\n                    var task = t[i].task;\n                    for (var iA = 0; iA < task.action_.length; iA++) {\n                        var o = void 0;\n                        if (machine.actions[task.action_[iA].type_]) {\n                            o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n                        }\n                        else if (_mhchemParser.actions[task.action_[iA].type_]) {\n                            o = _mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n                        }\n                        else {\n                            throw [\"MhchemBugA\", \"mhchem bug A. Please report. (\" + task.action_[iA].type_ + \")\"];\n                        }\n                        _mhchemParser.concatArray(output, o);\n                    }\n                    state = task.nextState || state;\n                    if (input.length > 0) {\n                        if (!task.revisit) {\n                            input = matches.remainder;\n                        }\n                        if (!task.toContinue) {\n                            break iterateTransitions;\n                        }\n                    }\n                    else {\n                        return output;\n                    }\n                }\n            }\n            if (watchdog <= 0) {\n                throw [\"MhchemBugU\", \"mhchem bug U. Please report.\"];\n            }\n        }\n    },\n    concatArray: function (a, b) {\n        if (b) {\n            if (Array.isArray(b)) {\n                for (var iB = 0; iB < b.length; iB++) {\n                    a.push(b[iB]);\n                }\n            }\n            else {\n                a.push(b);\n            }\n        }\n    },\n    patterns: {\n        patterns: {\n            'empty': /^$/,\n            'else': /^./,\n            'else2': /^./,\n            'space': /^\\s/,\n            'space A': /^\\s(?=[A-Z\\\\$])/,\n            'space$': /^\\s$/,\n            'a-z': /^[a-z]/,\n            'x': /^x/,\n            'x$': /^x$/,\n            'i$': /^i$/,\n            'letters': /^(?:[a-zA-Z\\u03B1-\\u03C9\\u0391-\\u03A9?@]|(?:\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))))+/,\n            '\\\\greek': /^\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))/,\n            'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,\n            '$one lowercase latin letter$ $': /^\\$(?:([a-z])(?:$|[^a-zA-Z]))\\$$/,\n            'one lowercase greek letter $': /^(?:\\$?[\\u03B1-\\u03C9]\\$?|\\$?\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\\s*\\$?)(?:\\s+|\\{\\}|(?![a-zA-Z]))$/,\n            'digits': /^[0-9]+/,\n            '-9.,9': /^[+\\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))/,\n            '-9.,9 no missing 0': /^[+\\-]?[0-9]+(?:[.,][0-9]+)?/,\n            '(-)(9.,9)(e)(99)': function (input) {\n                var match = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))?(\\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))\\))?(?:(?:([eE])|\\s*(\\*|x|\\\\times|\\u00D7)\\s*10\\^)([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\}))?/);\n                if (match && match[0]) {\n                    return { match_: match.slice(1), remainder: input.substr(match[0].length) };\n                }\n                return null;\n            },\n            '(-)(9)^(-9)': /^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+)?)\\^([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\})/,\n            'state of aggregation $': function (input) {\n                var a = _mhchemParser.patterns.findObserveGroups(input, \"\", /^\\([a-z]{1,3}(?=[\\),])/, \")\", \"\");\n                if (a && a.remainder.match(/^($|[\\s,;\\)\\]\\}])/)) {\n                    return a;\n                }\n                var match = input.match(/^(?:\\((?:\\\\ca\\s?)?\\$[amothc]\\$\\))/);\n                if (match) {\n                    return { match_: match[0], remainder: input.substr(match[0].length) };\n                }\n                return null;\n            },\n            '_{(state of aggregation)}$': /^_\\{(\\([a-z]{1,3}\\))\\}/,\n            '{[(': /^(?:\\\\\\{|\\[|\\()/,\n            ')]}': /^(?:\\)|\\]|\\\\\\})/,\n            ', ': /^[,;]\\s*/,\n            ',': /^[,;]/,\n            '.': /^[.]/,\n            '. __* ': /^([.\\u22C5\\u00B7\\u2022]|[*])\\s*/,\n            '...': /^\\.\\.\\.(?=$|[^.])/,\n            '^{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^{\", \"\", \"\", \"}\"); },\n            '^($...$)': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^\", \"$\", \"$\", \"\"); },\n            '^a': /^\\^([0-9]+|[^\\\\_])/,\n            '^\\\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n            '^\\\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n            '^\\\\x': /^\\^(\\\\[a-zA-Z]+)\\s*/,\n            '^(-1)': /^\\^(-?\\d+)/,\n            '\\'': /^'/,\n            '_{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_{\", \"\", \"\", \"}\"); },\n            '_($...$)': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_\", \"$\", \"$\", \"\"); },\n            '_9': /^_([+\\-]?[0-9]+|[^\\\\])/,\n            '_\\\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n            '_\\\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n            '_\\\\x': /^_(\\\\[a-zA-Z]+)\\s*/,\n            '^_': /^(?:\\^(?=_)|\\_(?=\\^)|[\\^_]$)/,\n            '{}^': /^\\{\\}(?=\\^)/,\n            '{}': /^\\{\\}/,\n            '{...}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", \"{\", \"}\", \"\"); },\n            '{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"{\", \"\", \"\", \"}\"); },\n            '$...$': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\"); },\n            '${(...)}$__$(...)$': function (input) {\n                return _mhchemParser.patterns.findObserveGroups(input, \"${\", \"\", \"\", \"}$\") || _mhchemParser.patterns.findObserveGroups(input, \"$\", \"\", \"\", \"$\");\n            },\n            '=<>': /^[=<>]/,\n            '#': /^[#\\u2261]/,\n            '+': /^\\+/,\n            '-$': /^-(?=[\\s_},;\\]/]|$|\\([a-z]+\\))/,\n            '-9': /^-(?=[0-9])/,\n            '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\\s,;\\)\\]\\}]))/,\n            '-': /^-/,\n            'pm-operator': /^(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)/,\n            'operator': /^(?:\\+|(?:[\\-=<>]|<<|>>|\\\\approx|\\$\\\\approx\\$)(?=\\s|$|-?[0-9]))/,\n            'arrowUpDown': /^(?:v|\\(v\\)|\\^|\\(\\^\\))(?=$|[\\s,;\\)\\]\\}])/,\n            '\\\\bond{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\bond{\", \"\", \"\", \"}\"); },\n            '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\\u2192\\u27F6\\u21CC])/,\n            'CMT': /^[CMT](?=\\[)/,\n            '[(...)]': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"[\", \"\", \"\", \"]\"); },\n            '1st-level escape': /^(&|\\\\\\\\|\\\\hline)\\s*/,\n            '\\\\,': /^(?:\\\\[,\\ ;:])/,\n            '\\\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n            '\\\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n            '\\\\ca': /^\\\\ca(?:\\s+|(?![a-zA-Z]))/,\n            '\\\\x': /^(?:\\\\[a-zA-Z]+\\s*|\\\\[_&{}%])/,\n            'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,\n            'others': /^[\\/~|]/,\n            '\\\\frac{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\frac{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\overset{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\overset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\underset{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\underset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\underbrace{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\underbrace{\", \"\", \"\", \"}_\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\color{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\"); },\n            '\\\\color{(...)}{(...)}': function (input) {\n                return _mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\") ||\n                    _mhchemParser.patterns.findObserveGroups(input, \"\\\\color\", \"\\\\\", \"\", /^(?=\\{)/, \"{\", \"\", \"\", \"}\");\n            },\n            '\\\\ce{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\ce{\", \"\", \"\", \"}\"); },\n            '\\\\pu{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\pu{\", \"\", \"\", \"}\"); },\n            'oxidation$': /^(?:[+-][IVX]+|(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)\\s*0)$/,\n            'd-oxidation$': /^(?:[+-]?[IVX]+|(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)\\s*0)$/,\n            '1/2$': /^[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+(?:\\$[a-z]\\$|[a-z])?$/,\n            'amount': function (input) {\n                var match;\n                match = input.match(/^(?:(?:(?:\\([+\\-]?[0-9]+\\/[0-9]+\\)|[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+|[+\\-]?[0-9]+[.,][0-9]+|[+\\-]?\\.[0-9]+|[+\\-]?[0-9]+)(?:[a-z](?=\\s*[A-Z]))?)|[+\\-]?[a-z](?=\\s*[A-Z])|\\+(?!\\s))/);\n                if (match) {\n                    return { match_: match[0], remainder: input.substr(match[0].length) };\n                }\n                var a = _mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n                if (a) {\n                    match = a.match_.match(/^\\$(?:\\(?[+\\-]?(?:[0-9]*[a-z]?[+\\-])?[0-9]*[a-z](?:[+\\-][0-9]*[a-z]?)?\\)?|\\+|-)\\$$/);\n                    if (match) {\n                        return { match_: match[0], remainder: input.substr(match[0].length) };\n                    }\n                }\n                return null;\n            },\n            'amount2': function (input) { return this['amount'](input); },\n            '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,\n            'formula$': function (input) {\n                if (input.match(/^\\([a-z]+\\)$/)) {\n                    return null;\n                }\n                var match = input.match(/^(?:[a-z]|(?:[0-9\\ \\+\\-\\,\\.\\(\\)]+[a-z])+[0-9\\ \\+\\-\\,\\.\\(\\)]*|(?:[a-z][0-9\\ \\+\\-\\,\\.\\(\\)]+)+[a-z]?)$/);\n                if (match) {\n                    return { match_: match[0], remainder: input.substr(match[0].length) };\n                }\n                return null;\n            },\n            'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,\n            '/': /^\\s*(\\/)\\s*/,\n            '//': /^\\s*(\\/\\/)\\s*/,\n            '*': /^\\s*[*.]\\s*/\n        },\n        findObserveGroups: function (input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {\n            var _match = function (input, pattern) {\n                if (typeof pattern === \"string\") {\n                    if (input.indexOf(pattern) !== 0) {\n                        return null;\n                    }\n                    return pattern;\n                }\n                else {\n                    var match_1 = input.match(pattern);\n                    if (!match_1) {\n                        return null;\n                    }\n                    return match_1[0];\n                }\n            };\n            var _findObserveGroups = function (input, i, endChars) {\n                var braces = 0;\n                while (i < input.length) {\n                    var a = input.charAt(i);\n                    var match_2 = _match(input.substr(i), endChars);\n                    if (match_2 !== null && braces === 0) {\n                        return { endMatchBegin: i, endMatchEnd: i + match_2.length };\n                    }\n                    else if (a === \"{\") {\n                        braces++;\n                    }\n                    else if (a === \"}\") {\n                        if (braces === 0) {\n                            throw [\"ExtraCloseMissingOpen\", \"Extra close brace or missing open brace\"];\n                        }\n                        else {\n                            braces--;\n                        }\n                    }\n                    i++;\n                }\n                if (braces > 0) {\n                    return null;\n                }\n                return null;\n            };\n            var match = _match(input, begExcl);\n            if (match === null) {\n                return null;\n            }\n            input = input.substr(match.length);\n            match = _match(input, begIncl);\n            if (match === null) {\n                return null;\n            }\n            var e = _findObserveGroups(input, match.length, endIncl || endExcl);\n            if (e === null) {\n                return null;\n            }\n            var match1 = input.substring(0, (endIncl ? e.endMatchEnd : e.endMatchBegin));\n            if (!(beg2Excl || beg2Incl)) {\n                return {\n                    match_: match1,\n                    remainder: input.substr(e.endMatchEnd)\n                };\n            }\n            else {\n                var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);\n                if (group2 === null) {\n                    return null;\n                }\n                var matchRet = [match1, group2.match_];\n                return {\n                    match_: (combine ? matchRet.join(\"\") : matchRet),\n                    remainder: group2.remainder\n                };\n            }\n        },\n        match_: function (m, input) {\n            var pattern = _mhchemParser.patterns.patterns[m];\n            if (pattern === undefined) {\n                throw [\"MhchemBugP\", \"mhchem bug P. Please report. (\" + m + \")\"];\n            }\n            else if (typeof pattern === \"function\") {\n                return _mhchemParser.patterns.patterns[m](input);\n            }\n            else {\n                var match = input.match(pattern);\n                if (match) {\n                    if (match.length > 2) {\n                        return { match_: match.slice(1), remainder: input.substr(match[0].length) };\n                    }\n                    else {\n                        return { match_: match[1] || match[0], remainder: input.substr(match[0].length) };\n                    }\n                }\n                return null;\n            }\n        }\n    },\n    actions: {\n        'a=': function (buffer, m) { buffer.a = (buffer.a || \"\") + m; return undefined; },\n        'b=': function (buffer, m) { buffer.b = (buffer.b || \"\") + m; return undefined; },\n        'p=': function (buffer, m) { buffer.p = (buffer.p || \"\") + m; return undefined; },\n        'o=': function (buffer, m) { buffer.o = (buffer.o || \"\") + m; return undefined; },\n        'o=+p1': function (buffer, _m, a) { buffer.o = (buffer.o || \"\") + a; return undefined; },\n        'q=': function (buffer, m) { buffer.q = (buffer.q || \"\") + m; return undefined; },\n        'd=': function (buffer, m) { buffer.d = (buffer.d || \"\") + m; return undefined; },\n        'rm=': function (buffer, m) { buffer.rm = (buffer.rm || \"\") + m; return undefined; },\n        'text=': function (buffer, m) { buffer.text_ = (buffer.text_ || \"\") + m; return undefined; },\n        'insert': function (_buffer, _m, a) { return { type_: a }; },\n        'insert+p1': function (_buffer, m, a) { return { type_: a, p1: m }; },\n        'insert+p1+p2': function (_buffer, m, a) { return { type_: a, p1: m[0], p2: m[1] }; },\n        'copy': function (_buffer, m) { return m; },\n        'write': function (_buffer, _m, a) { return a; },\n        'rm': function (_buffer, m) { return { type_: 'rm', p1: m }; },\n        'text': function (_buffer, m) { return _mhchemParser.go(m, 'text'); },\n        'tex-math': function (_buffer, m) { return _mhchemParser.go(m, 'tex-math'); },\n        'tex-math tight': function (_buffer, m) { return _mhchemParser.go(m, 'tex-math tight'); },\n        'bond': function (_buffer, m, k) { return { type_: 'bond', kind_: k || m }; },\n        'color0-output': function (_buffer, m) { return { type_: 'color0', color: m }; },\n        'ce': function (_buffer, m) { return _mhchemParser.go(m, 'ce'); },\n        'pu': function (_buffer, m) { return _mhchemParser.go(m, 'pu'); },\n        '1/2': function (_buffer, m) {\n            var ret = [];\n            if (m.match(/^[+\\-]/)) {\n                ret.push(m.substr(0, 1));\n                m = m.substr(1);\n            }\n            var n = m.match(/^([0-9]+|\\$[a-z]\\$|[a-z])\\/([0-9]+)(\\$[a-z]\\$|[a-z])?$/);\n            n[1] = n[1].replace(/\\$/g, \"\");\n            ret.push({ type_: 'frac', p1: n[1], p2: n[2] });\n            if (n[3]) {\n                n[3] = n[3].replace(/\\$/g, \"\");\n                ret.push({ type_: 'tex-math', p1: n[3] });\n            }\n            return ret;\n        },\n        '9,9': function (_buffer, m) { return _mhchemParser.go(m, '9,9'); }\n    },\n    stateMachines: {\n        'tex': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '0': { action_: 'copy' }\n                },\n                '\\\\ce{(...)}': {\n                    '0': { action_: [{ type_: 'write', option: \"{\" }, 'ce', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\pu{(...)}': {\n                    '0': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                'else': {\n                    '0': { action_: 'copy' }\n                },\n            }),\n            actions: {}\n        },\n        'ce': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                'else': {\n                    '0|1|2': { action_: 'beginsWithBond=false', revisit: true, toContinue: true }\n                },\n                'oxidation$': {\n                    '0': { action_: 'oxidation-output' }\n                },\n                'CMT': {\n                    'r': { action_: 'rdt=', nextState: 'rt' },\n                    'rd': { action_: 'rqt=', nextState: 'rdt' }\n                },\n                'arrowUpDown': {\n                    '0|1|2|as': { action_: ['sb=false', 'output', 'operator'], nextState: '1' }\n                },\n                'uprightEntities': {\n                    '0|1|2': { action_: ['o=', 'output'], nextState: '1' }\n                },\n                'orbital': {\n                    '0|1|2|3': { action_: 'o=', nextState: 'o' }\n                },\n                '->': {\n                    '0|1|2|3': { action_: 'r=', nextState: 'r' },\n                    'a|as': { action_: ['output', 'r='], nextState: 'r' },\n                    '*': { action_: ['output', 'r='], nextState: 'r' }\n                },\n                '+': {\n                    'o': { action_: 'd= kv', nextState: 'd' },\n                    'd|D': { action_: 'd=', nextState: 'd' },\n                    'q': { action_: 'd=', nextState: 'qd' },\n                    'qd|qD': { action_: 'd=', nextState: 'qd' },\n                    'dq': { action_: ['output', 'd='], nextState: 'd' },\n                    '3': { action_: ['sb=false', 'output', 'operator'], nextState: '0' }\n                },\n                'amount': {\n                    '0|2': { action_: 'a=', nextState: 'a' }\n                },\n                'pm-operator': {\n                    '0|1|2|a|as': { action_: ['sb=false', 'output', { type_: 'operator', option: '\\\\pm' }], nextState: '0' }\n                },\n                'operator': {\n                    '0|1|2|a|as': { action_: ['sb=false', 'output', 'operator'], nextState: '0' }\n                },\n                '-$': {\n                    'o|q': { action_: ['charge or bond', 'output'], nextState: 'qd' },\n                    'd': { action_: 'd=', nextState: 'd' },\n                    'D': { action_: ['output', { type_: 'bond', option: \"-\" }], nextState: '3' },\n                    'q': { action_: 'd=', nextState: 'qd' },\n                    'qd': { action_: 'd=', nextState: 'qd' },\n                    'qD|dq': { action_: ['output', { type_: 'bond', option: \"-\" }], nextState: '3' }\n                },\n                '-9': {\n                    '3|o': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '3' }\n                },\n                '- orbital overlap': {\n                    'o': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' },\n                    'd': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' }\n                },\n                '-': {\n                    '0|1|2': { action_: [{ type_: 'output', option: 1 }, 'beginsWithBond=true', { type_: 'bond', option: \"-\" }], nextState: '3' },\n                    '3': { action_: { type_: 'bond', option: \"-\" } },\n                    'a': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' },\n                    'as': { action_: [{ type_: 'output', option: 2 }, { type_: 'bond', option: \"-\" }], nextState: '3' },\n                    'b': { action_: 'b=' },\n                    'o': { action_: { type_: '- after o/d', option: false }, nextState: '2' },\n                    'q': { action_: { type_: '- after o/d', option: false }, nextState: '2' },\n                    'd|qd|dq': { action_: { type_: '- after o/d', option: true }, nextState: '2' },\n                    'D|qD|p': { action_: ['output', { type_: 'bond', option: \"-\" }], nextState: '3' }\n                },\n                'amount2': {\n                    '1|3': { action_: 'a=', nextState: 'a' }\n                },\n                'letters': {\n                    '0|1|2|3|a|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },\n                    'q|dq': { action_: ['output', 'o='], nextState: 'o' },\n                    'd|D|qd|qD': { action_: 'o after d', nextState: 'o' }\n                },\n                'digits': {\n                    'o': { action_: 'q=', nextState: 'q' },\n                    'd|D': { action_: 'q=', nextState: 'dq' },\n                    'q': { action_: ['output', 'o='], nextState: 'o' },\n                    'a': { action_: 'o=', nextState: 'o' }\n                },\n                'space A': {\n                    'b|p|bp': { action_: [] }\n                },\n                'space': {\n                    'a': { action_: [], nextState: 'as' },\n                    '0': { action_: 'sb=false' },\n                    '1|2': { action_: 'sb=true' },\n                    'r|rt|rd|rdt|rdq': { action_: 'output', nextState: '0' },\n                    '*': { action_: ['output', 'sb=true'], nextState: '1' }\n                },\n                '1st-level escape': {\n                    '1|2': { action_: ['output', { type_: 'insert+p1', option: '1st-level escape' }] },\n                    '*': { action_: ['output', { type_: 'insert+p1', option: '1st-level escape' }], nextState: '0' }\n                },\n                '[(...)]': {\n                    'r|rt': { action_: 'rd=', nextState: 'rd' },\n                    'rd|rdt': { action_: 'rq=', nextState: 'rdq' }\n                },\n                '...': {\n                    'o|d|D|dq|qd|qD': { action_: ['output', { type_: 'bond', option: \"...\" }], nextState: '3' },\n                    '*': { action_: [{ type_: 'output', option: 1 }, { type_: 'insert', option: 'ellipsis' }], nextState: '1' }\n                },\n                '. __* ': {\n                    '*': { action_: ['output', { type_: 'insert', option: 'addition compound' }], nextState: '1' }\n                },\n                'state of aggregation $': {\n                    '*': { action_: ['output', 'state of aggregation'], nextState: '1' }\n                },\n                '{[(': {\n                    'a|as|o': { action_: ['o=', 'output', 'parenthesisLevel++'], nextState: '2' },\n                    '0|1|2|3': { action_: ['o=', 'output', 'parenthesisLevel++'], nextState: '2' },\n                    '*': { action_: ['output', 'o=', 'output', 'parenthesisLevel++'], nextState: '2' }\n                },\n                ')]}': {\n                    '0|1|2|3|b|p|bp|o': { action_: ['o=', 'parenthesisLevel--'], nextState: 'o' },\n                    'a|as|d|D|q|qd|qD|dq': { action_: ['output', 'o=', 'parenthesisLevel--'], nextState: 'o' }\n                },\n                ', ': {\n                    '*': { action_: ['output', 'comma'], nextState: '0' }\n                },\n                '^_': {\n                    '*': { action_: [] }\n                },\n                '^{(...)}|^($...$)': {\n                    '0|1|2|as': { action_: 'b=', nextState: 'b' },\n                    'p': { action_: 'b=', nextState: 'bp' },\n                    '3|o': { action_: 'd= kv', nextState: 'D' },\n                    'q': { action_: 'd=', nextState: 'qD' },\n                    'd|D|qd|qD|dq': { action_: ['output', 'd='], nextState: 'D' }\n                },\n                '^a|^\\\\x{}{}|^\\\\x{}|^\\\\x|\\'': {\n                    '0|1|2|as': { action_: 'b=', nextState: 'b' },\n                    'p': { action_: 'b=', nextState: 'bp' },\n                    '3|o': { action_: 'd= kv', nextState: 'd' },\n                    'q': { action_: 'd=', nextState: 'qd' },\n                    'd|qd|D|qD': { action_: 'd=' },\n                    'dq': { action_: ['output', 'd='], nextState: 'd' }\n                },\n                '_{(state of aggregation)}$': {\n                    'd|D|q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' }\n                },\n                '_{(...)}|_($...$)|_9|_\\\\x{}{}|_\\\\x{}|_\\\\x': {\n                    '0|1|2|as': { action_: 'p=', nextState: 'p' },\n                    'b': { action_: 'p=', nextState: 'bp' },\n                    '3|o': { action_: 'q=', nextState: 'q' },\n                    'd|D': { action_: 'q=', nextState: 'dq' },\n                    'q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' }\n                },\n                '=<>': {\n                    '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': { action_: [{ type_: 'output', option: 2 }, 'bond'], nextState: '3' }\n                },\n                '#': {\n                    '0|1|2|3|a|as|o': { action_: [{ type_: 'output', option: 2 }, { type_: 'bond', option: \"#\" }], nextState: '3' }\n                },\n                '{}^': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, { type_: 'insert', option: 'tinySkip' }], nextState: '1' }\n                },\n                '{}': {\n                    '*': { action_: { type_: 'output', option: 1 }, nextState: '1' }\n                },\n                '{...}': {\n                    '0|1|2|3|a|as|b|p|bp': { action_: 'o=', nextState: 'o' },\n                    'o|d|D|q|qd|qD|dq': { action_: ['output', 'o='], nextState: 'o' }\n                },\n                '$...$': {\n                    'a': { action_: 'a=' },\n                    '0|1|2|3|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },\n                    'as|o': { action_: 'o=' },\n                    'q|d|D|qd|qD|dq': { action_: ['output', 'o='], nextState: 'o' }\n                },\n                '\\\\bond{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'bond'], nextState: \"3\" }\n                },\n                '\\\\frac{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, 'frac-output'], nextState: '3' }\n                },\n                '\\\\overset{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'overset-output'], nextState: '3' }\n                },\n                '\\\\underset{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'underset-output'], nextState: '3' }\n                },\n                '\\\\underbrace{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'underbrace-output'], nextState: '3' }\n                },\n                '\\\\color{(...)}{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'color-output'], nextState: '3' }\n                },\n                '\\\\color{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'color0-output'] }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'ce'], nextState: '3' }\n                },\n                '\\\\,': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, 'copy'], nextState: '1' }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }], nextState: '3' }\n                },\n                '\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '0|1|2|3|a|as|b|p|bp|o|c0': { action_: ['o=', 'output'], nextState: '3' },\n                    '*': { action_: ['output', 'o=', 'output'], nextState: '3' }\n                },\n                'others': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, 'copy'], nextState: '3' }\n                },\n                'else2': {\n                    'a': { action_: 'a to o', nextState: 'o', revisit: true },\n                    'as': { action_: ['output', 'sb=true'], nextState: '1', revisit: true },\n                    'r|rt|rd|rdt|rdq': { action_: ['output'], nextState: '0', revisit: true },\n                    '*': { action_: ['output', 'copy'], nextState: '3' }\n                }\n            }),\n            actions: {\n                'o after d': function (buffer, m) {\n                    var ret;\n                    if ((buffer.d || \"\").match(/^[1-9][0-9]*$/)) {\n                        var tmp = buffer.d;\n                        buffer.d = undefined;\n                        ret = this['output'](buffer);\n                        ret.push({ type_: 'tinySkip' });\n                        buffer.b = tmp;\n                    }\n                    else {\n                        ret = this['output'](buffer);\n                    }\n                    _mhchemParser.actions['o='](buffer, m);\n                    return ret;\n                },\n                'd= kv': function (buffer, m) {\n                    buffer.d = m;\n                    buffer.dType = 'kv';\n                    return undefined;\n                },\n                'charge or bond': function (buffer, m) {\n                    if (buffer['beginsWithBond']) {\n                        var ret = [];\n                        _mhchemParser.concatArray(ret, this['output'](buffer));\n                        _mhchemParser.concatArray(ret, _mhchemParser.actions['bond'](buffer, m, \"-\"));\n                        return ret;\n                    }\n                    else {\n                        buffer.d = m;\n                        return undefined;\n                    }\n                },\n                '- after o/d': function (buffer, m, isAfterD) {\n                    var c1 = _mhchemParser.patterns.match_('orbital', buffer.o || \"\");\n                    var c2 = _mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || \"\");\n                    var c3 = _mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || \"\");\n                    var c4 = _mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || \"\");\n                    var hyphenFollows = m === \"-\" && (c1 && c1.remainder === \"\" || c2 || c3 || c4);\n                    if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {\n                        buffer.o = '$' + buffer.o + '$';\n                    }\n                    var ret = [];\n                    if (hyphenFollows) {\n                        _mhchemParser.concatArray(ret, this['output'](buffer));\n                        ret.push({ type_: 'hyphen' });\n                    }\n                    else {\n                        c1 = _mhchemParser.patterns.match_('digits', buffer.d || \"\");\n                        if (isAfterD && c1 && c1.remainder === '') {\n                            _mhchemParser.concatArray(ret, _mhchemParser.actions['d='](buffer, m));\n                            _mhchemParser.concatArray(ret, this['output'](buffer));\n                        }\n                        else {\n                            _mhchemParser.concatArray(ret, this['output'](buffer));\n                            _mhchemParser.concatArray(ret, _mhchemParser.actions['bond'](buffer, m, \"-\"));\n                        }\n                    }\n                    return ret;\n                },\n                'a to o': function (buffer) {\n                    buffer.o = buffer.a;\n                    buffer.a = undefined;\n                    return undefined;\n                },\n                'sb=true': function (buffer) { buffer.sb = true; return undefined; },\n                'sb=false': function (buffer) { buffer.sb = false; return undefined; },\n                'beginsWithBond=true': function (buffer) { buffer['beginsWithBond'] = true; return undefined; },\n                'beginsWithBond=false': function (buffer) { buffer['beginsWithBond'] = false; return undefined; },\n                'parenthesisLevel++': function (buffer) { buffer['parenthesisLevel']++; return undefined; },\n                'parenthesisLevel--': function (buffer) { buffer['parenthesisLevel']--; return undefined; },\n                'state of aggregation': function (_buffer, m) {\n                    return { type_: 'state of aggregation', p1: _mhchemParser.go(m, 'o') };\n                },\n                'comma': function (buffer, m) {\n                    var a = m.replace(/\\s*$/, '');\n                    var withSpace = (a !== m);\n                    if (withSpace && buffer['parenthesisLevel'] === 0) {\n                        return { type_: 'comma enumeration L', p1: a };\n                    }\n                    else {\n                        return { type_: 'comma enumeration M', p1: a };\n                    }\n                },\n                'output': function (buffer, _m, entityFollows) {\n                    var ret;\n                    if (!buffer.r) {\n                        ret = [];\n                        if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) {\n                        }\n                        else {\n                            if (buffer.sb) {\n                                ret.push({ type_: 'entitySkip' });\n                            }\n                            if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows !== 2) {\n                                buffer.o = buffer.a;\n                                buffer.a = undefined;\n                            }\n                            else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {\n                                buffer.o = buffer.a;\n                                buffer.d = buffer.b;\n                                buffer.q = buffer.p;\n                                buffer.a = buffer.b = buffer.p = undefined;\n                            }\n                            else {\n                                if (buffer.o && buffer.dType === 'kv' && _mhchemParser.patterns.match_('d-oxidation$', buffer.d || \"\")) {\n                                    buffer.dType = 'oxidation';\n                                }\n                                else if (buffer.o && buffer.dType === 'kv' && !buffer.q) {\n                                    buffer.dType = undefined;\n                                }\n                            }\n                            ret.push({\n                                type_: 'chemfive',\n                                a: _mhchemParser.go(buffer.a, 'a'),\n                                b: _mhchemParser.go(buffer.b, 'bd'),\n                                p: _mhchemParser.go(buffer.p, 'pq'),\n                                o: _mhchemParser.go(buffer.o, 'o'),\n                                q: _mhchemParser.go(buffer.q, 'pq'),\n                                d: _mhchemParser.go(buffer.d, (buffer.dType === 'oxidation' ? 'oxidation' : 'bd')),\n                                dType: buffer.dType\n                            });\n                        }\n                    }\n                    else {\n                        var rd = void 0;\n                        if (buffer.rdt === 'M') {\n                            rd = _mhchemParser.go(buffer.rd, 'tex-math');\n                        }\n                        else if (buffer.rdt === 'T') {\n                            rd = [{ type_: 'text', p1: buffer.rd || \"\" }];\n                        }\n                        else {\n                            rd = _mhchemParser.go(buffer.rd, 'ce');\n                        }\n                        var rq = void 0;\n                        if (buffer.rqt === 'M') {\n                            rq = _mhchemParser.go(buffer.rq, 'tex-math');\n                        }\n                        else if (buffer.rqt === 'T') {\n                            rq = [{ type_: 'text', p1: buffer.rq || \"\" }];\n                        }\n                        else {\n                            rq = _mhchemParser.go(buffer.rq, 'ce');\n                        }\n                        ret = {\n                            type_: 'arrow',\n                            r: buffer.r,\n                            rd: rd,\n                            rq: rq\n                        };\n                    }\n                    for (var p in buffer) {\n                        if (p !== 'parenthesisLevel' && p !== 'beginsWithBond') {\n                            delete buffer[p];\n                        }\n                    }\n                    return ret;\n                },\n                'oxidation-output': function (_buffer, m) {\n                    var ret = [\"{\"];\n                    _mhchemParser.concatArray(ret, _mhchemParser.go(m, 'oxidation'));\n                    ret.push(\"}\");\n                    return ret;\n                },\n                'frac-output': function (_buffer, m) {\n                    return { type_: 'frac-ce', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'overset-output': function (_buffer, m) {\n                    return { type_: 'overset', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'underset-output': function (_buffer, m) {\n                    return { type_: 'underset', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'underbrace-output': function (_buffer, m) {\n                    return { type_: 'underbrace', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'color-output': function (_buffer, m) {\n                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'r=': function (buffer, m) { buffer.r = m; return undefined; },\n                'rdt=': function (buffer, m) { buffer.rdt = m; return undefined; },\n                'rd=': function (buffer, m) { buffer.rd = m; return undefined; },\n                'rqt=': function (buffer, m) { buffer.rqt = m; return undefined; },\n                'rq=': function (buffer, m) { buffer.rq = m; return undefined; },\n                'operator': function (_buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; }\n            }\n        },\n        'a': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                '1/2$': {\n                    '0': { action_: '1/2' }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '1', revisit: true }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math tight', nextState: '1' }\n                },\n                ',': {\n                    '*': { action_: { type_: 'insert', option: 'commaDecimal' } }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {}\n        },\n        'o': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                '1/2$': {\n                    '0': { action_: '1/2' }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '1', revisit: true }\n                },\n                'letters': {\n                    '*': { action_: 'rm' }\n                },\n                '\\\\ca': {\n                    '*': { action_: { type_: 'insert', option: 'circa' } }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'copy' }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'text', { type_: 'write', option: \"}\" }] }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {}\n        },\n        'text': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '{...}': {\n                    '*': { action_: 'text=' }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '\\\\greek': {\n                    '*': { action_: ['output', 'rm'] }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: ['output', 'copy'] }\n                },\n                'else': {\n                    '*': { action_: 'text=' }\n                }\n            }),\n            actions: {\n                'output': function (buffer) {\n                    if (buffer.text_) {\n                        var ret = { type_: 'text', p1: buffer.text_ };\n                        for (var p in buffer) {\n                            delete buffer[p];\n                        }\n                        return ret;\n                    }\n                    return undefined;\n                }\n            }\n        },\n        'pq': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                'state of aggregation $': {\n                    '*': { action_: 'state of aggregation' }\n                },\n                'i$': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                '(KV letters),': {\n                    '0': { action_: 'rm', nextState: '0' }\n                },\n                'formula$': {\n                    '0': { action_: [], nextState: 'f', revisit: true }\n                },\n                '1/2$': {\n                    '0': { action_: '1/2' }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '{(...)}': {\n                    '*': { action_: 'text' }\n                },\n                'a-z': {\n                    'f': { action_: 'tex-math' }\n                },\n                'letters': {\n                    '*': { action_: 'rm' }\n                },\n                '-9.,9': {\n                    '*': { action_: '9,9' }\n                },\n                ',': {\n                    '*': { action_: { type_: 'insert+p1', option: 'comma enumeration S' } }\n                },\n                '\\\\color{(...)}{(...)}': {\n                    '*': { action_: 'color-output' }\n                },\n                '\\\\color{(...)}': {\n                    '*': { action_: 'color0-output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: 'ce' }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'copy' }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {\n                'state of aggregation': function (_buffer, m) {\n                    return { type_: 'state of aggregation subscript', p1: _mhchemParser.go(m, 'o') };\n                },\n                'color-output': function (_buffer, m) {\n                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'pq') };\n                }\n            }\n        },\n        'bd': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                'x$': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                'formula$': {\n                    '0': { action_: [], nextState: 'f', revisit: true }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                '-9.,9 no missing 0': {\n                    '*': { action_: '9,9' }\n                },\n                '.': {\n                    '*': { action_: { type_: 'insert', option: 'electron dot' } }\n                },\n                'a-z': {\n                    'f': { action_: 'tex-math' }\n                },\n                'x': {\n                    '*': { action_: { type_: 'insert', option: 'KV x' } }\n                },\n                'letters': {\n                    '*': { action_: 'rm' }\n                },\n                '\\'': {\n                    '*': { action_: { type_: 'insert', option: 'prime' } }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '{(...)}': {\n                    '*': { action_: 'text' }\n                },\n                '\\\\color{(...)}{(...)}': {\n                    '*': { action_: 'color-output' }\n                },\n                '\\\\color{(...)}': {\n                    '*': { action_: 'color0-output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: 'ce' }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'copy' }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {\n                'color-output': function (_buffer, m) {\n                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'bd') };\n                }\n            }\n        },\n        'oxidation': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'roman-numeral' }\n                },\n                'pm-operator': {\n                    '*': { action_: { type_: 'o=+p1', option: \"\\\\pm\" } }\n                },\n                'else': {\n                    '*': { action_: 'o=' }\n                }\n            }),\n            actions: {\n                'roman-numeral': function (buffer) { return { type_: 'roman numeral', p1: buffer.o || \"\" }; }\n            }\n        },\n        'tex-math': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: ['output', 'ce'] }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'o=' }\n                },\n                'else': {\n                    '*': { action_: 'o=' }\n                }\n            }),\n            actions: {\n                'output': function (buffer) {\n                    if (buffer.o) {\n                        var ret = { type_: 'tex-math', p1: buffer.o };\n                        for (var p in buffer) {\n                            delete buffer[p];\n                        }\n                        return ret;\n                    }\n                    return undefined;\n                }\n            }\n        },\n        'tex-math tight': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: ['output', 'ce'] }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'o=' }\n                },\n                '-|+': {\n                    '*': { action_: 'tight operator' }\n                },\n                'else': {\n                    '*': { action_: 'o=' }\n                }\n            }),\n            actions: {\n                'tight operator': function (buffer, m) { buffer.o = (buffer.o || \"\") + \"{\" + m + \"}\"; return undefined; },\n                'output': function (buffer) {\n                    if (buffer.o) {\n                        var ret = { type_: 'tex-math', p1: buffer.o };\n                        for (var p in buffer) {\n                            delete buffer[p];\n                        }\n                        return ret;\n                    }\n                    return undefined;\n                }\n            }\n        },\n        '9,9': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                ',': {\n                    '*': { action_: 'comma' }\n                },\n                'else': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {\n                'comma': function () { return { type_: 'commaDecimal' }; }\n            }\n        },\n        'pu': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                'space$': {\n                    '*': { action_: ['output', 'space'] }\n                },\n                '{[(|)]}': {\n                    '0|a': { action_: 'copy' }\n                },\n                '(-)(9)^(-9)': {\n                    '0': { action_: 'number^', nextState: 'a' }\n                },\n                '(-)(9.,9)(e)(99)': {\n                    '0': { action_: 'enumber', nextState: 'a' }\n                },\n                'space': {\n                    '0|a': { action_: [] }\n                },\n                'pm-operator': {\n                    '0|a': { action_: { type_: 'operator', option: '\\\\pm' }, nextState: '0' }\n                },\n                'operator': {\n                    '0|a': { action_: 'copy', nextState: '0' }\n                },\n                '//': {\n                    'd': { action_: 'o=', nextState: '/' }\n                },\n                '/': {\n                    'd': { action_: 'o=', nextState: '/' }\n                },\n                '{...}|else': {\n                    '0|d': { action_: 'd=', nextState: 'd' },\n                    'a': { action_: ['space', 'd='], nextState: 'd' },\n                    '/|q': { action_: 'q=', nextState: 'q' }\n                }\n            }),\n            actions: {\n                'enumber': function (_buffer, m) {\n                    var ret = [];\n                    if (m[0] === \"+-\" || m[0] === \"+/-\") {\n                        ret.push(\"\\\\pm \");\n                    }\n                    else if (m[0]) {\n                        ret.push(m[0]);\n                    }\n                    if (m[1]) {\n                        _mhchemParser.concatArray(ret, _mhchemParser.go(m[1], 'pu-9,9'));\n                        if (m[2]) {\n                            if (m[2].match(/[,.]/)) {\n                                _mhchemParser.concatArray(ret, _mhchemParser.go(m[2], 'pu-9,9'));\n                            }\n                            else {\n                                ret.push(m[2]);\n                            }\n                        }\n                        if (m[3] || m[4]) {\n                            if (m[3] === \"e\" || m[4] === \"*\") {\n                                ret.push({ type_: 'cdot' });\n                            }\n                            else {\n                                ret.push({ type_: 'times' });\n                            }\n                        }\n                    }\n                    if (m[5]) {\n                        ret.push(\"10^{\" + m[5] + \"}\");\n                    }\n                    return ret;\n                },\n                'number^': function (_buffer, m) {\n                    var ret = [];\n                    if (m[0] === \"+-\" || m[0] === \"+/-\") {\n                        ret.push(\"\\\\pm \");\n                    }\n                    else if (m[0]) {\n                        ret.push(m[0]);\n                    }\n                    _mhchemParser.concatArray(ret, _mhchemParser.go(m[1], 'pu-9,9'));\n                    ret.push(\"^{\" + m[2] + \"}\");\n                    return ret;\n                },\n                'operator': function (_buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; },\n                'space': function () { return { type_: 'pu-space-1' }; },\n                'output': function (buffer) {\n                    var ret;\n                    var md = _mhchemParser.patterns.match_('{(...)}', buffer.d || \"\");\n                    if (md && md.remainder === '') {\n                        buffer.d = md.match_;\n                    }\n                    var mq = _mhchemParser.patterns.match_('{(...)}', buffer.q || \"\");\n                    if (mq && mq.remainder === '') {\n                        buffer.q = mq.match_;\n                    }\n                    if (buffer.d) {\n                        buffer.d = buffer.d.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n                        buffer.d = buffer.d.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n                    }\n                    if (buffer.q) {\n                        buffer.q = buffer.q.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n                        buffer.q = buffer.q.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n                        var b5 = {\n                            d: _mhchemParser.go(buffer.d, 'pu'),\n                            q: _mhchemParser.go(buffer.q, 'pu')\n                        };\n                        if (buffer.o === '//') {\n                            ret = { type_: 'pu-frac', p1: b5.d, p2: b5.q };\n                        }\n                        else {\n                            ret = b5.d;\n                            if (b5.d.length > 1 || b5.q.length > 1) {\n                                ret.push({ type_: ' / ' });\n                            }\n                            else {\n                                ret.push({ type_: '/' });\n                            }\n                            _mhchemParser.concatArray(ret, b5.q);\n                        }\n                    }\n                    else {\n                        ret = _mhchemParser.go(buffer.d, 'pu-2');\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                }\n            }\n        },\n        'pu-2': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '*': {\n                    '*': { action_: ['output', 'cdot'], nextState: '0' }\n                },\n                '\\\\x': {\n                    '*': { action_: 'rm=' }\n                },\n                'space': {\n                    '*': { action_: ['output', 'space'], nextState: '0' }\n                },\n                '^{(...)}|^(-1)': {\n                    '1': { action_: '^(-1)' }\n                },\n                '-9.,9': {\n                    '0': { action_: 'rm=', nextState: '0' },\n                    '1': { action_: '^(-1)', nextState: '0' }\n                },\n                '{...}|else': {\n                    '*': { action_: 'rm=', nextState: '1' }\n                }\n            }),\n            actions: {\n                'cdot': function () { return { type_: 'tight cdot' }; },\n                '^(-1)': function (buffer, m) { buffer.rm += \"^{\" + m + \"}\"; return undefined; },\n                'space': function () { return { type_: 'pu-space-2' }; },\n                'output': function (buffer) {\n                    var ret = [];\n                    if (buffer.rm) {\n                        var mrm = _mhchemParser.patterns.match_('{(...)}', buffer.rm || \"\");\n                        if (mrm && mrm.remainder === '') {\n                            ret = _mhchemParser.go(mrm.match_, 'pu');\n                        }\n                        else {\n                            ret = { type_: 'rm', p1: buffer.rm };\n                        }\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                }\n            }\n        },\n        'pu-9,9': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '0': { action_: 'output-0' },\n                    'o': { action_: 'output-o' }\n                },\n                ',': {\n                    '0': { action_: ['output-0', 'comma'], nextState: 'o' }\n                },\n                '.': {\n                    '0': { action_: ['output-0', 'copy'], nextState: 'o' }\n                },\n                'else': {\n                    '*': { action_: 'text=' }\n                }\n            }),\n            actions: {\n                'comma': function () { return { type_: 'commaDecimal' }; },\n                'output-0': function (buffer) {\n                    var ret = [];\n                    buffer.text_ = buffer.text_ || \"\";\n                    if (buffer.text_.length > 4) {\n                        var a = buffer.text_.length % 3;\n                        if (a === 0) {\n                            a = 3;\n                        }\n                        for (var i = buffer.text_.length - 3; i > 0; i -= 3) {\n                            ret.push(buffer.text_.substr(i, 3));\n                            ret.push({ type_: '1000 separator' });\n                        }\n                        ret.push(buffer.text_.substr(0, a));\n                        ret.reverse();\n                    }\n                    else {\n                        ret.push(buffer.text_);\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                },\n                'output-o': function (buffer) {\n                    var ret = [];\n                    buffer.text_ = buffer.text_ || \"\";\n                    if (buffer.text_.length > 4) {\n                        var a = buffer.text_.length - 3;\n                        var i = void 0;\n                        for (i = 0; i < a; i += 3) {\n                            ret.push(buffer.text_.substr(i, 3));\n                            ret.push({ type_: '1000 separator' });\n                        }\n                        ret.push(buffer.text_.substr(i));\n                    }\n                    else {\n                        ret.push(buffer.text_);\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                }\n            }\n        }\n    }\n};\nvar _mhchemTexify = {\n    go: function (input, addOuterBraces) {\n        if (!input) {\n            return \"\";\n        }\n        var res = \"\";\n        var cee = false;\n        for (var i = 0; i < input.length; i++) {\n            var inputi = input[i];\n            if (typeof inputi === \"string\") {\n                res += inputi;\n            }\n            else {\n                res += _mhchemTexify._go2(inputi);\n                if (inputi.type_ === '1st-level escape') {\n                    cee = true;\n                }\n            }\n        }\n        if (addOuterBraces && !cee && res) {\n            res = \"{\" + res + \"}\";\n        }\n        return res;\n    },\n    _goInner: function (input) {\n        return _mhchemTexify.go(input, false);\n    },\n    _go2: function (buf) {\n        var res;\n        switch (buf.type_) {\n            case 'chemfive':\n                res = \"\";\n                var b5 = {\n                    a: _mhchemTexify._goInner(buf.a),\n                    b: _mhchemTexify._goInner(buf.b),\n                    p: _mhchemTexify._goInner(buf.p),\n                    o: _mhchemTexify._goInner(buf.o),\n                    q: _mhchemTexify._goInner(buf.q),\n                    d: _mhchemTexify._goInner(buf.d)\n                };\n                if (b5.a) {\n                    if (b5.a.match(/^[+\\-]/)) {\n                        b5.a = \"{\" + b5.a + \"}\";\n                    }\n                    res += b5.a + \"\\\\,\";\n                }\n                if (b5.b || b5.p) {\n                    res += \"{\\\\vphantom{A}}\";\n                    res += \"^{\\\\hphantom{\" + (b5.b || \"\") + \"}}_{\\\\hphantom{\" + (b5.p || \"\") + \"}}\";\n                    res += \"\\\\mkern-1.5mu\";\n                    res += \"{\\\\vphantom{A}}\";\n                    res += \"^{\\\\smash[t]{\\\\vphantom{2}}\\\\llap{\" + (b5.b || \"\") + \"}}\";\n                    res += \"_{\\\\vphantom{2}\\\\llap{\\\\smash[t]{\" + (b5.p || \"\") + \"}}}\";\n                }\n                if (b5.o) {\n                    if (b5.o.match(/^[+\\-]/)) {\n                        b5.o = \"{\" + b5.o + \"}\";\n                    }\n                    res += b5.o;\n                }\n                if (buf.dType === 'kv') {\n                    if (b5.d || b5.q) {\n                        res += \"{\\\\vphantom{A}}\";\n                    }\n                    if (b5.d) {\n                        res += \"^{\" + b5.d + \"}\";\n                    }\n                    if (b5.q) {\n                        res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n                    }\n                }\n                else if (buf.dType === 'oxidation') {\n                    if (b5.d) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"^{\" + b5.d + \"}\";\n                    }\n                    if (b5.q) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n                    }\n                }\n                else {\n                    if (b5.q) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n                    }\n                    if (b5.d) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"^{\" + b5.d + \"}\";\n                    }\n                }\n                break;\n            case 'rm':\n                res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n                break;\n            case 'text':\n                if (buf.p1.match(/[\\^_]/)) {\n                    buf.p1 = buf.p1.replace(\" \", \"~\").replace(\"-\", \"\\\\text{-}\");\n                    res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n                }\n                else {\n                    res = \"\\\\text{\" + buf.p1 + \"}\";\n                }\n                break;\n            case 'roman numeral':\n                res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n                break;\n            case 'state of aggregation':\n                res = \"\\\\mskip2mu \" + _mhchemTexify._goInner(buf.p1);\n                break;\n            case 'state of aggregation subscript':\n                res = \"\\\\mskip1mu \" + _mhchemTexify._goInner(buf.p1);\n                break;\n            case 'bond':\n                res = _mhchemTexify._getBond(buf.kind_);\n                if (!res) {\n                    throw [\"MhchemErrorBond\", \"mhchem Error. Unknown bond type (\" + buf.kind_ + \")\"];\n                }\n                break;\n            case 'frac':\n                var c = \"\\\\frac{\" + buf.p1 + \"}{\" + buf.p2 + \"}\";\n                res = \"\\\\mathchoice{\\\\textstyle\" + c + \"}{\" + c + \"}{\" + c + \"}{\" + c + \"}\";\n                break;\n            case 'pu-frac':\n                var d = \"\\\\frac{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                res = \"\\\\mathchoice{\\\\textstyle\" + d + \"}{\" + d + \"}{\" + d + \"}{\" + d + \"}\";\n                break;\n            case 'tex-math':\n                res = buf.p1 + \" \";\n                break;\n            case 'frac-ce':\n                res = \"\\\\frac{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'overset':\n                res = \"\\\\overset{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'underset':\n                res = \"\\\\underset{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'underbrace':\n                res = \"\\\\underbrace{\" + _mhchemTexify._goInner(buf.p1) + \"}_{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'color':\n                res = \"{\\\\color{\" + buf.color1 + \"}{\" + _mhchemTexify._goInner(buf.color2) + \"}}\";\n                break;\n            case 'color0':\n                res = \"\\\\color{\" + buf.color + \"}\";\n                break;\n            case 'arrow':\n                var b6 = {\n                    rd: _mhchemTexify._goInner(buf.rd),\n                    rq: _mhchemTexify._goInner(buf.rq)\n                };\n                var arrow = _mhchemTexify._getArrow(buf.r);\n                if (b6.rd || b6.rq) {\n                    if (buf.r === \"<=>\" || buf.r === \"<=>>\" || buf.r === \"<<=>\" || buf.r === \"<-->\") {\n                        arrow = \"\\\\long\" + arrow;\n                        if (b6.rd) {\n                            arrow = \"\\\\overset{\" + b6.rd + \"}{\" + arrow + \"}\";\n                        }\n                        if (b6.rq) {\n                            if (buf.r === \"<-->\") {\n                                arrow = \"\\\\underset{\\\\lower2mu{\" + b6.rq + \"}}{\" + arrow + \"}\";\n                            }\n                            else {\n                                arrow = \"\\\\underset{\\\\lower6mu{\" + b6.rq + \"}}{\" + arrow + \"}\";\n                            }\n                        }\n                        arrow = \" {}\\\\mathrel{\" + arrow + \"}{} \";\n                    }\n                    else {\n                        if (b6.rq) {\n                            arrow += \"[{\" + b6.rq + \"}]\";\n                        }\n                        arrow += \"{\" + b6.rd + \"}\";\n                        arrow = \" {}\\\\mathrel{\\\\x\" + arrow + \"}{} \";\n                    }\n                }\n                else {\n                    arrow = \" {}\\\\mathrel{\\\\long\" + arrow + \"}{} \";\n                }\n                res = arrow;\n                break;\n            case 'operator':\n                res = _mhchemTexify._getOperator(buf.kind_);\n                break;\n            case '1st-level escape':\n                res = buf.p1 + \" \";\n                break;\n            case 'space':\n                res = \" \";\n                break;\n            case 'tinySkip':\n                res = '\\\\mkern2mu';\n                break;\n            case 'entitySkip':\n                res = \"~\";\n                break;\n            case 'pu-space-1':\n                res = \"~\";\n                break;\n            case 'pu-space-2':\n                res = \"\\\\mkern3mu \";\n                break;\n            case '1000 separator':\n                res = \"\\\\mkern2mu \";\n                break;\n            case 'commaDecimal':\n                res = \"{,}\";\n                break;\n            case 'comma enumeration L':\n                res = \"{\" + buf.p1 + \"}\\\\mkern6mu \";\n                break;\n            case 'comma enumeration M':\n                res = \"{\" + buf.p1 + \"}\\\\mkern3mu \";\n                break;\n            case 'comma enumeration S':\n                res = \"{\" + buf.p1 + \"}\\\\mkern1mu \";\n                break;\n            case 'hyphen':\n                res = \"\\\\text{-}\";\n                break;\n            case 'addition compound':\n                res = \"\\\\,{\\\\cdot}\\\\,\";\n                break;\n            case 'electron dot':\n                res = \"\\\\mkern1mu \\\\bullet\\\\mkern1mu \";\n                break;\n            case 'KV x':\n                res = \"{\\\\times}\";\n                break;\n            case 'prime':\n                res = \"\\\\prime \";\n                break;\n            case 'cdot':\n                res = \"\\\\cdot \";\n                break;\n            case 'tight cdot':\n                res = \"\\\\mkern1mu{\\\\cdot}\\\\mkern1mu \";\n                break;\n            case 'times':\n                res = \"\\\\times \";\n                break;\n            case 'circa':\n                res = \"{\\\\sim}\";\n                break;\n            case '^':\n                res = \"uparrow\";\n                break;\n            case 'v':\n                res = \"downarrow\";\n                break;\n            case 'ellipsis':\n                res = \"\\\\ldots \";\n                break;\n            case '/':\n                res = \"/\";\n                break;\n            case ' / ':\n                res = \"\\\\,/\\\\,\";\n                break;\n            default:\n                assertNever(buf);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n        return res;\n    },\n    _getArrow: function (a) {\n        switch (a) {\n            case \"->\": return \"rightarrow\";\n            case \"\\u2192\": return \"rightarrow\";\n            case \"\\u27F6\": return \"rightarrow\";\n            case \"<-\": return \"leftarrow\";\n            case \"<->\": return \"leftrightarrow\";\n            case \"<-->\": return \"leftrightarrows\";\n            case \"<=>\": return \"rightleftharpoons\";\n            case \"\\u21CC\": return \"rightleftharpoons\";\n            case \"<=>>\": return \"Rightleftharpoons\";\n            case \"<<=>\": return \"Leftrightharpoons\";\n            default:\n                assertNever(a);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n    },\n    _getBond: function (a) {\n        switch (a) {\n            case \"-\": return \"{-}\";\n            case \"1\": return \"{-}\";\n            case \"=\": return \"{=}\";\n            case \"2\": return \"{=}\";\n            case \"#\": return \"{\\\\equiv}\";\n            case \"3\": return \"{\\\\equiv}\";\n            case \"~\": return \"{\\\\tripledash}\";\n            case \"~-\": return \"{\\\\rlap{\\\\lower.1em{-}}\\\\raise.1em{\\\\tripledash}}\";\n            case \"~=\": return \"{\\\\rlap{\\\\lower.2em{-}}\\\\rlap{\\\\raise.2em{\\\\tripledash}}-}\";\n            case \"~--\": return \"{\\\\rlap{\\\\lower.2em{-}}\\\\rlap{\\\\raise.2em{\\\\tripledash}}-}\";\n            case \"-~-\": return \"{\\\\rlap{\\\\lower.2em{-}}\\\\rlap{\\\\raise.2em{-}}\\\\tripledash}\";\n            case \"...\": return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n            case \"....\": return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n            case \"->\": return \"{\\\\rightarrow}\";\n            case \"<-\": return \"{\\\\leftarrow}\";\n            case \"<\": return \"{<}\";\n            case \">\": return \"{>}\";\n            default:\n                assertNever(a);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n    },\n    _getOperator: function (a) {\n        switch (a) {\n            case \"+\": return \" {}+{} \";\n            case \"-\": return \" {}-{} \";\n            case \"=\": return \" {}={} \";\n            case \"<\": return \" {}<{} \";\n            case \">\": return \" {}>{} \";\n            case \"<<\": return \" {}\\\\ll{} \";\n            case \">>\": return \" {}\\\\gg{} \";\n            case \"\\\\pm\": return \" {}\\\\pm{} \";\n            case \"\\\\approx\": return \" {}\\\\approx{} \";\n            case \"$\\\\approx$\": return \" {}\\\\approx{} \";\n            case \"v\": return \" \\\\downarrow{} \";\n            case \"(v)\": return \" \\\\downarrow{} \";\n            case \"^\": return \" \\\\uparrow{} \";\n            case \"(^)\": return \" \\\\uparrow{} \";\n            default:\n                assertNever(a);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n    }\n};\nfunction assertNever(a) { }\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the mhchem package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport TexError from '../TexError.js';\nimport TexParser from '../TexParser.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport {AmsMethods} from '../ams/AmsMethods.js';\nimport {mhchemParser} from 'mhchemparser/dist/mhchemParser.js';\n\n// Namespace\nlet MhchemMethods: Record<string, ParseMethod> = {};\n\nMhchemMethods.Macro = BaseMethods.Macro;\nMhchemMethods.xArrow = AmsMethods.xArrow;\n\n/**\n * @param{TeXParser} parser   The parser for this expression\n * @param{string} name        The macro name being called\n * @param{string} machine     The name of the fininte-state machine to use\n */\nMhchemMethods.Machine = function(parser: TexParser, name: string, machine: 'tex' | 'ce' | 'pu') {\n  let arg = parser.GetArgument(name);\n  let tex;\n  try {\n    tex = mhchemParser.toTex(arg, machine);\n  } catch (err) {\n    throw new TexError(err[0], err[1]);\n  }\n  parser.string = tex + parser.string.substr(parser.i);\n  parser.i = 0;\n};\n\nnew CommandMap(\n  'mhchem', {\n    ce: ['Machine', 'ce'],\n    pu: ['Machine', 'pu'],\n    longrightleftharpoons: [\n      'Macro',\n      '\\\\stackrel{\\\\textstyle{-}\\\\!\\\\!{\\\\rightharpoonup}}{\\\\smash{{\\\\leftharpoondown}\\\\!\\\\!{-}}}'\n    ],\n    longRightleftharpoons: [\n      'Macro',\n      '\\\\stackrel{\\\\textstyle{-}\\\\!\\\\!{\\\\rightharpoonup}}{\\\\smash{\\\\leftharpoondown}}'\n    ],\n    longLeftrightharpoons: [\n      'Macro',\n      '\\\\stackrel{\\\\textstyle\\\\vphantom{{-}}{\\\\rightharpoonup}}{\\\\smash{{\\\\leftharpoondown}\\\\!\\\\!{-}}}'\n    ],\n    longleftrightarrows: [\n      'Macro',\n      '\\\\stackrel{\\\\longrightarrow}{\\\\smash{\\\\longleftarrow}\\\\Rule{0px}{.25em}{0px}}'\n    ],\n    //\n    //  Needed for \\bond for the ~ forms\n    //\n    tripledash: [\n      'Macro',\n      '\\\\vphantom{-}\\\\raise2mu{\\\\kern2mu\\\\tiny\\\\text{-}\\\\kern1mu\\\\text{-}\\\\kern1mu\\\\text{-}\\\\kern2mu}'\n    ],\n    xleftrightarrow:    ['xArrow', 0x2194, 6, 6],\n    xrightleftharpoons: ['xArrow', 0x21CC, 5, 7],   // FIXME:  doesn't stretch in HTML-CSS output\n    xRightleftharpoons: ['xArrow', 0x21CC, 5, 7],   // FIXME:  how should this be handled?\n    xLeftrightharpoons: ['xArrow', 0x21CC, 5, 7]\n  },\n  MhchemMethods\n);\n\n\nexport const MhchemConfiguration = Configuration.create(\n  'mhchem', {handler: {macro: ['mhchem']}}\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the NoErrors package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {NodeFactory} from '../NodeFactory.js';\n\n/**\n * Generates an error node containing the erroneous expression.\n * @param {TexParser} parser The node factory.\n * @param {string} message The error message (which is ignored).\n * @param {string} id The error id (which is ignored).\n * @param {string} expr The original LaTeX expression.\n */\nfunction noErrors(factory: NodeFactory,\n                  message: string, _id: string, expr: string) {\n  let mtext = factory.create('token', 'mtext', {}, expr.replace(/\\n/g, ' '));\n  let error = factory.create('node', 'merror', [mtext], {'data-mjx-error': message, title: message});\n  return error;\n}\n\nexport const NoErrorsConfiguration = Configuration.create(\n  'noerrors', {nodes: {'error': noErrors}}\n);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the AMS package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\n\n/**\n * Generates a red version of the undefined control sequence, instead of\n * throwing an error.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nfunction noUndefined(parser: TexParser, name: string) {\n  const textNode = parser.create('text', '\\\\' + name);\n  const options = parser.options.noundefined || {};\n  const def = {} as {[name: string]: string};\n  for (const id of ['color', 'background', 'size']) {\n    if (options[id]) {\n      def['math' + id] = options[id];\n    }\n  }\n  parser.Push(parser.create('node', 'mtext', [], def, textNode));\n}\n\nexport const NoUndefinedConfiguration = Configuration.create(\n  'noundefined', {\n    fallback: {macro: noUndefined},\n    options: {\n      noundefined: {\n        color: 'red',\n        background: '',\n        size: ''\n      }\n    },\n    priority: 3\n  }\n);\n\n\n", "/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Stack items for the physics package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {CheckType, BaseItem, StackItem} from '../StackItem.js';\nimport ParseUtil from '../ParseUtil.js';\nimport NodeUtil from '../NodeUtil.js';\nimport TexParser from '../TexParser.js';\nimport {AbstractMmlTokenNode} from '../../../core/MmlTree/MmlNode.js';\n\nexport class AutoOpen extends BaseItem {\n\n  /**\n   * @override\n   */\n  protected static errors = Object.assign(Object.create(BaseItem.errors), {\n    'stop': ['ExtraOrMissingDelims', 'Extra open or missing close delimiter']\n  });\n\n  /**\n   * The number of unpaired open delimiters that need to be matched before\n   *   a close delimiter will close this item. (#2831)\n   */\n  protected openCount: number = 0;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'auto open';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n\n  /**\n   * @override\n   */\n  public toMml() {\n    // Smash and right/left\n    let parser = this.factory.configuration.parser;\n    let right = this.getProperty('right') as string;\n    if (this.getProperty('smash')) {\n      let mml = super.toMml();\n      const smash = parser.create('node', 'mpadded', [mml],\n                                  {height: 0, depth: 0});\n      this.Clear();\n      this.Push(parser.create('node', 'TeXAtom', [smash]));\n    }\n    if (right) {\n      this.Push(new TexParser(right, parser.stack.env,\n                              parser.configuration).mml());\n    }\n    let mml = ParseUtil.fenced(\n      this.factory.configuration,\n      this.getProperty('open') as string,\n      super.toMml(),\n      this.getProperty('close') as string,\n      this.getProperty('big') as string\n    );\n    //\n    //  Remove fence markers that would cause it to be TeX class INNER,\n    //  so it is treated as a regular mrow when setting the tex class (#2760)\n    //\n    NodeUtil.removeProperties(mml, 'open', 'close', 'texClass');\n    return mml;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    //\n    //  Check for nested open delimiters (#2831)\n    //\n    if (item.isKind('mml') && item.Size() === 1) {\n      const mml = item.toMml();\n      if (mml.isKind('mo') && (mml as AbstractMmlTokenNode).getText() === this.getProperty('open')) {\n        this.openCount++;\n      }\n    }\n    let close = item.getProperty('autoclose');\n    if (close && close === this.getProperty('close') && !this.openCount--) {\n      if (this.getProperty('ignore')) {\n        this.Clear();\n        return [[], true];\n      }\n      return [[this.toMml()], true];\n    }\n    return super.checkItem(item);\n  }\n\n}\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Methods for TeX parsing of the physics package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {ParseMethod} from '../Types.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {TEXCLASS, MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport ParseUtil from '../ParseUtil.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {NodeFactory} from '../NodeFactory.js';\nimport {Macro} from '../Symbol.js';\n\n\nlet PhysicsMethods: Record<string, ParseMethod> = {};\n\n\n/***********************\n * Physics package section 2.1\n * Automatic bracing\n */\n\n/**\n * Pairs open and closed fences.\n * @type {{[fence: string]: string}}\n */\nconst pairs: {[fence: string]: string} = {\n  '(': ')',\n  '[': ']',\n  '{': '}',\n  '|': '|',\n};\n\n\n/**\n * Regular expression for matching big fence arguments.\n * @type {RegExp}\n */\nconst biggs: RegExp = /^(b|B)i(g{1,2})$/;\n\n\n/**\n * Automatic sizing of fences, e.g., \\\\qty(x). Some with content.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string=} open Opening fence.\n * @param {string=} close Closing fence.\n * @param {boolean=} arg Fences contain an argument.\n * @param {string=} named Name operator.\n * @param {string=} variant A font for the mathvariant.\n */\nPhysicsMethods.Quantity = function(parser: TexParser, name: string,\n                                   open: string = '(', close: string = ')',\n                                   arg: boolean = false, named: string = '',\n                                   variant: string = '') {\n  let star = arg ? parser.GetStar() : false;\n  let next = parser.GetNext();\n  let position = parser.i;\n  let big = null;\n  if (next === '\\\\') {\n    parser.i++;\n    big = parser.GetCS();\n    if (!big.match(biggs)) {\n      // empty\n      let empty = parser.create('node', 'mrow');\n      parser.Push(ParseUtil.fenced(parser.configuration, open, empty, close));\n      parser.i = position;\n      return;\n    }\n    next = parser.GetNext();\n  }\n  let right = pairs[next];\n  if (arg && next !== '{') {\n    throw new TexError('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n  }\n  if (!right) {\n    let empty = parser.create('node', 'mrow');\n    parser.Push(ParseUtil.fenced(parser.configuration, open, empty, close));\n    parser.i = position;\n    return;\n  }\n  // Get the fences\n  if (named) {\n    const mml = parser.create('token', 'mi', {texClass: TEXCLASS.OP}, named);\n    if (variant) {\n      NodeUtil.setAttribute(mml, 'mathvariant', variant);\n    }\n    parser.Push(parser.itemFactory.create('fn', mml));\n  }\n  if (next === '{') {\n    let argument = parser.GetArgument(name);\n    next = arg ? open : '\\\\{';\n    right = arg ? close : '\\\\}';\n    // TODO: Make all these fenced expressions.\n    argument = star ? next + ' ' + argument + ' ' + right :\n      (big ?\n       '\\\\' + big + 'l' + next + ' ' + argument + ' ' + '\\\\' + big + 'r' + right :\n       '\\\\left' + next + ' ' + argument + ' ' + '\\\\right' + right);\n    parser.Push(new TexParser(argument, parser.stack.env,\n                              parser.configuration).mml());\n    return;\n  }\n  if (arg) {\n    next = open;\n    right = close;\n  }\n  parser.i++;\n  parser.Push(parser.itemFactory.create('auto open')\n              .setProperties({open: next, close: right, big: big}));\n};\n\n\n/**\n * The evaluate macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.Eval = function(parser: TexParser, name: string) {\n  let star = parser.GetStar();\n  let next = parser.GetNext();\n  if (next === '{') {\n    let arg = parser.GetArgument(name);\n    let replace = '\\\\left. ' +\n      (star ? '\\\\smash{' + arg + '}' : arg) +\n      ' ' + '\\\\vphantom{\\\\int}\\\\right|';\n    parser.string = parser.string.slice(0, parser.i) + replace +\n      parser.string.slice(parser.i);\n    return;\n  }\n  if (next === '(' || next === '[') {\n    parser.i++;\n    parser.Push(parser.itemFactory.create('auto open')\n                .setProperties(\n                  {open: next, close: '|',\n                   smash: star, right: '\\\\vphantom{\\\\int}'}));\n    return;\n  }\n  throw new TexError('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n};\n\n\n/**\n * The anti/commutator and poisson macros.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string=} open Opening fence.\n * @param {string=} close Closing fence.\n */\nPhysicsMethods.Commutator = function(parser: TexParser, name: string,\n                                     open: string = '[', close: string = ']') {\n  let star = parser.GetStar();\n  let next = parser.GetNext();\n  let big = null;\n  if (next === '\\\\') {\n    parser.i++;\n    big = parser.GetCS();\n    if (!big.match(biggs)) {\n      // Actually a commutator error arg1 error.\n      throw new TexError('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n    }\n    next = parser.GetNext();\n  }\n  if (next !== '{') {\n    throw new TexError('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n  }\n  let arg1 = parser.GetArgument(name);\n  let arg2 = parser.GetArgument(name);\n  let argument = arg1 + ',' + arg2;\n  argument = star ? open + ' ' + argument + ' ' + close :\n    (big ?\n     '\\\\' + big + 'l' + open + ' ' + argument + ' ' + '\\\\' + big + 'r' + close :\n     '\\\\left' + open + ' ' + argument + ' ' + '\\\\right' + close);\n  parser.Push(new TexParser(argument, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n/***********************\n * Physics package section 2.2\n * Vector notation\n */\n\nlet latinCap: [number, number] = [0x41, 0x5A];\nlet latinSmall: [number, number] = [0x61, 0x7A];\nlet greekCap: [number, number] = [0x391, 0x3A9];\nlet greekSmall: [number, number] = [0x3B1, 0x3C9];\nlet digits: [number, number] = [0x30, 0x39];\n\n/**\n * Checks if a value is in a given numerical interval.\n * @param {number} value The value.\n * @param {[number, number]} range The closed interval.\n */\nfunction inRange(value: number, range: [number, number]) {\n  return (value >= range[0] && value <= range[1]);\n}\n\n\n/**\n * Method to create a token for the vector commands. It creates a vector token\n * with the specific vector font (e.g., bold) in case it is a Latin or capital\n * Greek character, accent or small Greek character if command is starred. This\n * is a replacement for the original token method in the node factory.\n * @param {NodeFactory} factory The current node factory.\n * @param {string} kind The type of token to create.\n * @param {any} def The attributes for the node.\n * @param {string} text The text contained in the token node.\n * @return {MmlNode} The newly create token node.\n */\nfunction createVectorToken(factory: NodeFactory, kind: string,\n                           def: any, text: string): MmlNode  {\n  let parser = factory.configuration.parser;\n  let token = NodeFactory.createToken(factory, kind, def, text);\n  let code: number = text.codePointAt(0);\n  if (text.length === 1 && !parser.stack.env.font &&\n      parser.stack.env.vectorFont &&\n      (inRange(code, latinCap) || inRange(code, latinSmall) ||\n       inRange(code, greekCap) || inRange(code, digits) ||\n       (inRange(code, greekSmall) && parser.stack.env.vectorStar) ||\n       NodeUtil.getAttribute(token, 'accent'))) {\n    NodeUtil.setAttribute(token, 'mathvariant', parser.stack.env.vectorFont);\n  }\n  return token;\n}\n\n\n/**\n * Bold vector notation.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.VectorBold = function(parser: TexParser, name: string) {\n  let star = parser.GetStar();\n  let arg = parser.GetArgument(name);\n  let oldToken = parser.configuration.nodeFactory.get('token');\n  let oldFont = parser.stack.env.font;\n  delete parser.stack.env.font;\n  parser.configuration.nodeFactory.set('token', createVectorToken);\n  parser.stack.env.vectorFont = star ? 'bold-italic' : 'bold';\n  parser.stack.env.vectorStar = star;\n  let node = new TexParser(arg, parser.stack.env, parser.configuration).mml();\n  if (oldFont) {\n    parser.stack.env.font = oldFont;\n  }\n  delete parser.stack.env.vectorFont;\n  delete parser.stack.env.vectorStar;\n  parser.configuration.nodeFactory.set('token', oldToken);\n  parser.Push(node);\n};\n\n\n/**\n * Macros that can have an optional star which is propagated.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {number} argcount Number of arguments.\n * @param {string[]} ...parts List of parts from which to assemble the macro.\n *     If the original command is starred, a star will be injected at each part.\n */\nPhysicsMethods.StarMacro = function(parser: TexParser, name: string,\n                                argcount: number, ...parts: string[]) {\n  let star = parser.GetStar();\n  const args: string[] = [];\n  if (argcount) {\n    for (let i = args.length; i < argcount; i++) {\n      args.push(parser.GetArgument(name));\n    }\n  }\n  let macro = parts.join(star ? '*' : '');\n  macro = ParseUtil.substituteArgs(parser, args, macro);\n  parser.string = ParseUtil.addArgs(parser, macro, parser.string.slice(parser.i));\n  parser.i = 0;\n  ParseUtil.checkMaxMacros(parser);\n};\n\n\n/**\n * Computes the application of a vector operation.\n * @param {TexParser} parser The calling parser.\n * @param {string} kind The type of stack item to parse the operator into.\n * @param {string} name The macro name.\n * @param {string} operator The operator expression.\n * @param {string[]} ...fences List of opening fences that should be\n *     automatically sized and paired to its corresponding closing fence.\n */\nlet vectorApplication = function(\n  parser: TexParser, kind: string, name: string, operator: string,\n  fences: string[]) {\n  let op = new TexParser(operator, parser.stack.env,\n                         parser.configuration).mml();\n  parser.Push(parser.itemFactory.create(kind, op));\n  let left = parser.GetNext();\n  let right = pairs[left];\n  if (!right) {\n    return;\n  }\n  let lfence = '', rfence = '', arg = '';\n  let enlarge = fences.indexOf(left) !== -1;\n  if (left === '{') {\n    arg = parser.GetArgument(name);\n    lfence = enlarge ? '\\\\left\\\\{' : '';\n    rfence = enlarge ? '\\\\right\\\\}' : '';\n    let macro = lfence + ' ' + arg + ' ' + rfence;\n    parser.string = macro + parser.string.slice(parser.i);\n    parser.i = 0;\n    return;\n  }\n  if (!enlarge) {\n    return;\n  }\n  parser.i++;\n  parser.Push(parser.itemFactory.create('auto open')\n              .setProperties({open: left, close: right}));\n};\n\n\n/**\n * An operator that needs to be parsed (e.g., a Greek letter or nabla) and\n * applied to a possibly fenced expression. By default automatic fences are\n * parentheses and brakets, with braces being ignored.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} operator The operator expression.\n * @param {string[]} ...fences List of opening fences that should be\n *     automatically sized and paired to its corresponding closing fence.\n */\nPhysicsMethods.OperatorApplication = function(\n  parser: TexParser, name: string, operator: string,\n  ...fences: string[]) {\n  vectorApplication(parser, 'fn', name, operator, fences);\n};\n\n/**\n * A vector operator that needs to be parsed (e.g., a Greek letter or nabla with\n * a crossproduct) and connected to a possibly fenced expression. By default\n * automatic fences are parentheses and brakets.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} operator The operator expression.\n * @param {string[]} ...fences List of opening fences that should be\n *     automatically sized and paired to its corresponding closing fence.\n */\nPhysicsMethods.VectorOperator = function(\n  parser: TexParser, name: string, operator: string,\n  ...fences: string[]) {\n  vectorApplication(parser, 'mml', name, operator, fences);\n};\n\n\n/***********************\n * Physics package section 2.3\n * Operators\n */\n\n/**\n * Operator expression with automatic fences and optional exponent.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {boolean=} opt Set to false if no optional exponent is allowed.\n * @param {string=} id The name of the function if different from name.\n */\nPhysicsMethods.Expression = function(parser: TexParser, name: string,\n                                     opt: boolean = true, id: string = '') {\n  id = id || name.slice(1);\n  const exp = opt ? parser.GetBrackets(name) : null;\n  let mml = parser.create('token', 'mi', {texClass: TEXCLASS.OP}, id);\n  if (exp) {\n    const sup = new TexParser(exp,\n                              parser.stack.env, parser.configuration).mml();\n    mml = parser.create('node', 'msup', [mml, sup]);\n  }\n  parser.Push(parser.itemFactory.create('fn', mml));\n  if (parser.GetNext() !== '(') {\n    return;\n  }\n  parser.i++;\n  parser.Push(parser.itemFactory.create('auto open')\n              .setProperties({open: '(', close: ')'}));\n};\n\n\n/***********************\n * Physics package section 2.4\n * Quick quad text\n */\n\n/**\n * Quad text macros.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} text The text that is to be padded with quad spaces.\n */\nPhysicsMethods.Qqtext = function(parser: TexParser, name: string,\n                                 text: string) {\n  let star = parser.GetStar();\n  let arg = text ? text : parser.GetArgument(name);\n  let replace = (star ? '' : '\\\\quad') + '\\\\text{' + arg + '}\\\\quad ';\n  parser.string = parser.string.slice(0, parser.i) + replace +\n    parser.string.slice(parser.i);\n};\n\n\n/***********************\n * Physics package section 2.5\n * Derivatives\n */\n\n/**\n * The differential and variation macros.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} op The operator. It will be parsed.\n */\nPhysicsMethods.Differential = function(parser: TexParser, name: string,\n                                       op: string) {\n  const optArg = parser.GetBrackets(name);\n  const power = optArg != null ? '^{' + optArg + '}' : ' ';\n  const parens = parser.GetNext() === '(';\n  const braces = parser.GetNext() === '{';\n  let macro = op + power;\n  if (!(parens || braces)) {\n    macro += parser.GetArgument(name, true) || '';\n    let mml = new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml();\n    parser.Push(mml);\n    return;\n  }\n  if (braces) {\n    macro += parser.GetArgument(name);\n    const mml = new TexParser(macro, parser.stack.env,\n                              parser.configuration).mml();\n    parser.Push(parser.create('node', 'TeXAtom', [mml], {texClass: TEXCLASS.OP}));\n    return;\n  }\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n  parser.i++;\n  parser.Push(parser.itemFactory.create('auto open')\n              .setProperties({open: '(', close: ')'}));\n};\n\n\n/**\n * The derivative macro. Its behaviour depends on the number of arguments\n * provided. In case of\n * 1 argument: will be part of the denominator.\n * 2 arguments: argument one is numerator, argument two is denominator.\n * 3+ arguments: arguments above 2 will be part of the denominator and the\n *   exponent of the enumerator will depend on the number of denominator\n *   arguments. In particular, the optional exponent argument will be ignored!\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {number} argMax The maximum number of arguments for the macro.\n * @param {string} op The derivative operator.\n */\nPhysicsMethods.Derivative = function(parser: TexParser, name: string,\n                                     argMax: number, op: string) {\n  const star = parser.GetStar();\n  const optArg = parser.GetBrackets(name);\n  let argCounter = 1;\n  const args = [];\n  args.push(parser.GetArgument(name));\n  while (parser.GetNext() === '{' && argCounter < argMax) {\n    args.push(parser.GetArgument(name));\n    argCounter++;\n  }\n  let ignore = false;\n  let power1 = ' ';\n  let power2 = ' ';\n  if (argMax > 2 && args.length > 2) {\n    power1 = '^{' + (args.length - 1) + '}';\n    ignore = true;\n  } else if (optArg != null) {\n    if (argMax > 2 && args.length > 1) {\n      ignore = true;\n    }\n    power1 = '^{' + optArg + '}';\n    power2 = power1;\n  }\n  const frac = star ? '\\\\flatfrac' : '\\\\frac';\n  const first = args.length > 1 ? args[0] : '';\n  const second = args.length > 1 ? args[1] : args[0];\n  let rest = '';\n  for (let i = 2, arg; arg = args[i]; i++) {\n    rest += op + ' ' + arg;\n  }\n  const macro = frac + '{' + op + power1 + first + '}' +\n    '{' + op + ' ' + second + power2 + ' ' + rest + '}';\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n  if (parser.GetNext() === '(') {\n    parser.i++;\n    parser.Push(parser.itemFactory.create('auto open')\n                .setProperties({open: '(', close: ')', ignore: ignore}));\n  }\n};\n\n\n/***********************\n * Physics package section 2.6\n * Dirac bra-ket notation\n */\n\n/**\n * The bra macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.Bra = function(parser: TexParser, name: string) {\n  let starBra = parser.GetStar();\n  let bra = parser.GetArgument(name);\n  let ket = '';\n  let hasKet = false;\n  let starKet = false;\n  if (parser.GetNext() === '\\\\') {\n    let saveI = parser.i;\n    parser.i++;\n    // This ensures that bra-ket also works if \\let bound versions of \\ket.\n    let cs = parser.GetCS();\n    let symbol = parser.lookup('macro', cs) as Macro;\n    if (symbol && symbol.symbol === 'ket') {\n      hasKet = true;\n      saveI = parser.i;\n      starKet = parser.GetStar();\n      if (parser.GetNext() === '{') {\n        ket = parser.GetArgument(cs, true);\n      } else {\n        parser.i = saveI;\n        starKet = false;\n      }\n    } else {\n      parser.i = saveI;\n    }\n  }\n  let macro = '';\n  if (hasKet) {\n    macro = (starBra || starKet) ?\n    `\\\\langle{${bra}}\\\\vert{${ket}}\\\\rangle` :\n      `\\\\left\\\\langle{${bra}}\\\\middle\\\\vert{${ket}}\\\\right\\\\rangle`;\n  } else {\n    macro = (starBra || starKet) ?\n    `\\\\langle{${bra}}\\\\vert` : `\\\\left\\\\langle{${bra}}\\\\right\\\\vert{${ket}}`;\n  }\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n/**\n * The ket macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.Ket = function(parser: TexParser, name: string) {\n  let star = parser.GetStar();\n  let ket = parser.GetArgument(name);\n  let macro = star ? `\\\\vert{${ket}}\\\\rangle` :\n    `\\\\left\\\\vert{${ket}}\\\\right\\\\rangle`;\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n/**\n * The braket macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.BraKet = function(parser: TexParser, name: string) {\n  let star = parser.GetStar();\n  let bra = parser.GetArgument(name);\n  let ket = null;\n  if (parser.GetNext() === '{') {\n    ket = parser.GetArgument(name, true);\n  }\n  let macro = '';\n  if (ket == null) {\n    macro = star ?\n      `\\\\langle{${bra}}\\\\vert{${bra}}\\\\rangle` :\n      `\\\\left\\\\langle{${bra}}\\\\middle\\\\vert{${bra}}\\\\right\\\\rangle`;\n  } else {\n    macro = star ?\n      `\\\\langle{${bra}}\\\\vert{${ket}}\\\\rangle` :\n      `\\\\left\\\\langle{${bra}}\\\\middle\\\\vert{${ket}}\\\\right\\\\rangle`;\n  }\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n/**\n * The ketbra macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.KetBra = function(parser: TexParser, name: string) {\n  let star = parser.GetStar();\n  let ket = parser.GetArgument(name);\n  let bra = null;\n  if (parser.GetNext() === '{') {\n    bra = parser.GetArgument(name, true);\n  }\n  let macro = '';\n  if (bra == null) {\n    macro = star ?\n      `\\\\vert{${ket}}\\\\rangle\\\\!\\\\langle{${ket}}\\\\vert` :\n      `\\\\left\\\\vert{${ket}}\\\\middle\\\\rangle\\\\!\\\\middle\\\\langle{${ket}}\\\\right\\\\vert`;\n  } else {\n    macro = star ?\n      `\\\\vert{${ket}}\\\\rangle\\\\!\\\\langle{${bra}}\\\\vert` :\n      `\\\\left\\\\vert{${ket}}\\\\middle\\\\rangle\\\\!\\\\middle\\\\langle{${bra}}\\\\right\\\\vert`;\n  }\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n/**\n * Generates the expanded braket LaTeX code for matrix operations.\n * @param {[string, string, string]} [arg1, arg2, arg3] The three arguments\n *     <arg1|arg2|arg3>.\n * @param {boolean} star1 No automatic sizing of fences.\n * @param {boolean} star2 Automatic sizing of fences wrt. to arg1 & arg3 only.\n */\nfunction outputBraket([arg1, arg2, arg3]: [string, string, string],\n                      star1: boolean, star2: boolean) {\n  return (star1 && star2) ?\n    `\\\\left\\\\langle{${arg1}}\\\\middle\\\\vert{${arg2}}\\\\middle\\\\vert{${arg3}}\\\\right\\\\rangle` :\n    (star1 ? `\\\\langle{${arg1}}\\\\vert{${arg2}}\\\\vert{${arg3}}\\\\rangle` :\n     `\\\\left\\\\langle{${arg1}}\\\\right\\\\vert{${arg2}}\\\\left\\\\vert{${arg3}}\\\\right\\\\rangle`);\n}\n\n\n/**\n * The expectation value macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.Expectation = function(parser: TexParser, name: string) {\n  let star1 = parser.GetStar();\n  let star2 = star1 && parser.GetStar();\n  let arg1 = parser.GetArgument(name);\n  let arg2 = null;\n  if (parser.GetNext() === '{') {\n    arg2 = parser.GetArgument(name, true);\n  }\n  let macro = (arg1 && arg2) ?\n    outputBraket([arg2, arg1, arg2], star1, star2) :\n    // Braces for semantics, similar to braket package.\n    (star1 ? `\\\\langle {${arg1}} \\\\rangle` :\n     `\\\\left\\\\langle {${arg1}} \\\\right\\\\rangle`);\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n/**\n * The matrix element macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.MatrixElement = function(parser: TexParser, name: string) {\n  const star1 = parser.GetStar();\n  const star2 = star1 && parser.GetStar();\n  const arg1 = parser.GetArgument(name);\n  const arg2 = parser.GetArgument(name);\n  const arg3 = parser.GetArgument(name);\n  const macro = outputBraket([arg1, arg2, arg3], star1, star2);\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n\n/********************\n * Physics package Section 2.7\n * Matrix macros\n */\n/**\n * The matrix quantity macro.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {boolean=} small Use small matrix.\n */\nPhysicsMethods.MatrixQuantity = function(parser: TexParser, name: string, small?: boolean) {\n  const star = parser.GetStar();\n  const next = parser.GetNext();\n  const array = small ? 'smallmatrix' : 'array';\n  let arg = '';\n  let open = '';\n  let close = '';\n  switch (next) {\n  case '{':\n    arg = parser.GetArgument(name);\n    break;\n  case '(':\n    parser.i++;\n    open = star ? '\\\\lgroup' : '(';\n    close = star ? '\\\\rgroup' : ')';\n    arg = parser.GetUpTo(name, ')');\n    break;\n  case '[':\n    parser.i++;\n    open = '[';\n    close = ']';\n    arg = parser.GetUpTo(name, ']');\n    break;\n  case '|':\n    parser.i++;\n    open = '|';\n    close = '|';\n    arg = parser.GetUpTo(name, '|');\n    break;\n  default:\n    open = '(';\n    close = ')';\n    break;\n  }\n  const macro = (open ? '\\\\left' : '') + open +\n    '\\\\begin{' + array + '}{} ' + arg + '\\\\end{' + array + '}' +\n    (open ? '\\\\right' : '') + close;\n  parser.Push(new TexParser(macro, parser.stack.env,\n                            parser.configuration).mml());\n};\n\n\n/**\n * Generation of identity matrices.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.IdentityMatrix = function(parser: TexParser, name: string) {\n  const arg = parser.GetArgument(name);\n  const size = parseInt(arg, 10);\n  if (isNaN(size)) {\n    throw new TexError('InvalidNumber', 'Invalid number');\n  }\n  if (size <= 1) {\n    parser.string = '1' + parser.string.slice(parser.i);\n    parser.i = 0;\n    return;\n  }\n  let zeros = Array(size).fill('0');\n  let columns = [];\n  for (let i = 0; i < size; i++) {\n    let row = zeros.slice();\n    row[i] = '1';\n    columns.push(row.join(' & '));\n  }\n  parser.string = columns.join('\\\\\\\\ ') + parser.string.slice(parser.i);\n  parser.i = 0;\n};\n\n\n/**\n * Generation of matrices with fixed value.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.XMatrix = function(parser: TexParser, name: string) {\n  const star = parser.GetStar();\n  const arg1 = parser.GetArgument(name);\n  const arg2 = parser.GetArgument(name);\n  const arg3 = parser.GetArgument(name);\n  let n = parseInt(arg2, 10);\n  let m = parseInt(arg3, 10);\n  if (isNaN(n) || isNaN(m) || m.toString() !== arg3 || n.toString() !== arg2) {\n    throw new TexError('InvalidNumber', 'Invalid number');\n  }\n  n = n < 1 ? 1 : n;\n  m = m < 1 ? 1 : m;\n  // Elements\n  if (!star) {\n    const row = Array(m).fill(arg1).join(' & ');\n    const matrix = Array(n).fill(row).join('\\\\\\\\ ');\n    parser.string = matrix + parser.string.slice(parser.i);\n    parser.i = 0;\n    return;\n  }\n  let matrix = '';\n  if (n === 1 && m === 1) {\n    // Case 1: n=m=1, no index.\n    matrix = arg1;\n  } else if (n === 1) {\n    // Case 2: n=1, row vector, single index.\n    let row = [];\n    for (let i = 1; i <= m; i++) {\n      row.push(`${arg1}_{${i}}`);\n    }\n    matrix = row.join(' & ');\n  } else if (m === 1) {\n    // Case 3: m=1, column vector, single index.\n    let row = [];\n    for (let i = 1; i <= n; i++) {\n      row.push(`${arg1}_{${i}}`);\n    }\n    matrix = row.join('\\\\\\\\ ');\n  } else {\n    // Case 4: matrix, double index. Note the extra mrows for indices.\n    let rows = [];\n    for (let i = 1; i <= n; i++) {\n      let row = [];\n      for (let j = 1; j <= m; j++) {\n        row.push(`${arg1}_{{${i}}{${j}}}`);\n      }\n      rows.push(row.join(' & '));\n    }\n    matrix = rows.join('\\\\\\\\ ');\n  }\n  parser.string = matrix + parser.string.slice(parser.i);\n  parser.i = 0;\n  return;\n};\n\n\n/**\n * Generation of Pauli matrices. Matrix 0 is the 2x2 identity.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.PauliMatrix = function(parser: TexParser, name: string) {\n  const arg = parser.GetArgument(name);\n  let matrix = arg.slice(1);\n  switch (arg[0]) {\n  case '0':\n    matrix += ' 1 & 0\\\\\\\\ 0 & 1';\n    break;\n  case '1':\n  case 'x':\n    matrix += ' 0 & 1\\\\\\\\ 1 & 0';\n    break;\n  case '2':\n  case 'y':\n    matrix += ' 0 & -i\\\\\\\\ i & 0';\n    break;\n  case '3':\n  case 'z':\n    matrix += ' 1 & 0\\\\\\\\ 0 & -1';\n    break;\n  default:\n  }\n  parser.string = matrix + parser.string.slice(parser.i);\n  parser.i = 0;\n};\n\n\n/**\n * Generation of anti/diagonal matrices.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {boolean=} anti True if constructing anti-diagonal matrix.\n */\nPhysicsMethods.DiagonalMatrix = function(parser: TexParser, name: string,\n                                         anti?: boolean) {\n  if (parser.GetNext() !== '{') {\n    return;\n  }\n  let startI = parser.i;\n  /* let arg =*/ parser.GetArgument(name);\n  let endI = parser.i;\n  parser.i = startI + 1;\n  let elements = [];\n  let element = '';\n  let currentI = parser.i;\n  while (currentI < endI) {\n    try {\n      element = parser.GetUpTo(name, ',');\n    } catch (e) {\n      parser.i = endI;\n      elements.push(parser.string.slice(currentI, endI - 1));\n      break;\n    }\n    if (parser.i >= endI) {\n      elements.push(parser.string.slice(currentI, endI));\n      break;\n    }\n    currentI = parser.i;\n    elements.push(element);\n  }\n  parser.string = makeDiagMatrix(elements, anti) + parser.string.slice(endI);\n  parser.i = 0;\n};\n\n\n/**\n * Creates the a (anti)diagonal matrix string.\n * @param {string[]} elements The elements on the diagonal.\n * @param {boolean} anti True if constructing anti-diagonal matrix.\n */\nfunction makeDiagMatrix(elements: string[], anti: boolean) {\n  let length = elements.length;\n  let matrix = [];\n  for (let i = 0; i < length; i++) {\n    matrix.push(Array(anti ? length - i : i + 1).join('&') +\n                '\\\\mqty{' + elements[i] + '}');\n  }\n  return matrix.join('\\\\\\\\ ');\n}\n\n\n/**\n * Closes an automatic fence if one was opened.\n * @param {TexParser} parser The calling parser.\n * @param {string} fence The fence.\n * @param {number} texclass The TeX class.\n */\nPhysicsMethods.AutoClose = function(parser: TexParser, fence: string, _texclass: number) {\n  const mo = parser.create('token', 'mo', {stretchy: false}, fence);\n  const item = parser.itemFactory.create('mml', mo).\n    setProperties({autoclose: fence});\n  parser.Push(item);\n};\n\n\n/**\n * Generates the vector nabla depending on the arrowdel option.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.Vnabla = function(parser: TexParser, _name: string) {\n  let argument = parser.options.physics.arrowdel ?\n    '\\\\vec{\\\\gradientnabla}' : '{\\\\gradientnabla}';\n  return parser.Push(new TexParser(argument, parser.stack.env,\n                                   parser.configuration).mml());\n};\n\n\n/**\n * Generates the differential d depending on the italicdiff option.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nPhysicsMethods.DiffD = function(parser: TexParser, _name: string) {\n  let argument = parser.options.physics.italicdiff ? 'd' : '{\\\\rm d}';\n  return parser.Push(new TexParser(argument, parser.stack.env,\n                                   parser.configuration).mml());\n};\n\n\n/**\n *  Methods taken from Base package.\n */\nPhysicsMethods.Macro = BaseMethods.Macro;\n\nPhysicsMethods.NamedFn = BaseMethods.NamedFn;\n\nPhysicsMethods.Array = BaseMethods.Array;\n\n\nexport default PhysicsMethods;\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for TeX parsing of the physics package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {EnvironmentMap, CommandMap, MacroMap, CharacterMap} from '../SymbolMap.js';\nimport PhysicsMethods from './PhysicsMethods.js';\nimport {TexConstant} from '../TexConstants.js';\nimport ParseMethods from '../ParseMethods.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\n\n\n/**\n * Macros for physics package (section 2.1).\n */\nnew CommandMap('Physics-automatic-bracing-macros', {\n  'quantity':       'Quantity',\n  'qty':            'Quantity',\n  'pqty':           ['Quantity', '(', ')', true],\n  'bqty':           ['Quantity', '[', ']', true],\n  'vqty':           ['Quantity', '|', '|', true],\n  'Bqty':           ['Quantity', '\\\\{', '\\\\}', true],\n  'absolutevalue':  ['Quantity', '|', '|', true],\n  'abs':            ['Quantity', '|', '|', true],\n  'norm':           ['Quantity', '\\\\|', '\\\\|', true],\n  'evaluated':      'Eval',\n  'eval':           'Eval',\n  'order':          ['Quantity', '(', ')', true, 'O',\n                     TexConstant.Variant.CALLIGRAPHIC],\n  'commutator':     'Commutator',\n  'comm':           'Commutator',\n  'anticommutator': ['Commutator', '\\\\{', '\\\\}'],\n  'acomm':          ['Commutator', '\\\\{', '\\\\}'],\n  'poissonbracket': ['Commutator', '\\\\{', '\\\\}'],\n  'pb':             ['Commutator', '\\\\{', '\\\\}']\n}, PhysicsMethods);\n\n\n/**\n * Macros for physics package (section 2.2).\n */\nnew CharacterMap('Physics-vector-mo', ParseMethods.mathchar0mo, {\n  dotproduct:    ['\\u22C5', {mathvariant: TexConstant.Variant.BOLD}],\n  vdot:          ['\\u22C5', {mathvariant: TexConstant.Variant.BOLD}],\n  crossproduct:  '\\u00D7',\n  cross:         '\\u00D7',\n  cp:            '\\u00D7',\n  // This is auxiliary!\n  gradientnabla: ['\\u2207', {mathvariant: TexConstant.Variant.BOLD}]\n});\n\nnew CharacterMap('Physics-vector-mi', ParseMethods.mathchar0mi, {\n  real:          ['\\u211C', {mathvariant: TexConstant.Variant.NORMAL}],\n  imaginary:     ['\\u2111', {mathvariant: TexConstant.Variant.NORMAL}]\n});\n\nnew CommandMap('Physics-vector-macros', {\n  'vnabla':      'Vnabla',\n  'vectorbold':  'VectorBold',\n  'vb':          'VectorBold',\n  'vectorarrow': ['StarMacro', 1, '\\\\vec{\\\\vb', '{#1}}'],\n  'va':          ['StarMacro', 1, '\\\\vec{\\\\vb', '{#1}}'],\n  'vectorunit':  ['StarMacro', 1, '\\\\hat{\\\\vb', '{#1}}'],\n  'vu':          ['StarMacro', 1, '\\\\hat{\\\\vb', '{#1}}'],\n  'gradient':    ['OperatorApplication', '\\\\vnabla', '(', '['],\n  'grad':        ['OperatorApplication', '\\\\vnabla', '(', '['],\n  'divergence':  ['VectorOperator', '\\\\vnabla\\\\vdot', '(', '['],\n  'div':         ['VectorOperator', '\\\\vnabla\\\\vdot', '(', '['],\n  'curl':        ['VectorOperator', '\\\\vnabla\\\\crossproduct', '(', '['],\n  'laplacian':   ['OperatorApplication', '\\\\nabla^2', '(', '['],\n}, PhysicsMethods);\n\n\n/**\n * Macros for physics package (section 2.3).\n */\nnew CommandMap('Physics-expressions-macros', {\n  'sin':              'Expression',\n  'sinh':             'Expression',\n  'arcsin':           'Expression',\n  'asin':             'Expression',\n  'cos':              'Expression',\n  'cosh':             'Expression',\n  'arccos':           'Expression',\n  'acos':             'Expression',\n  'tan':              'Expression',\n  'tanh':             'Expression',\n  'arctan':           'Expression',\n  'atan':             'Expression',\n  'csc':              'Expression',\n  'csch':             'Expression',\n  'arccsc':           'Expression',\n  'acsc':             'Expression',\n  'sec':              'Expression',\n  'sech':             'Expression',\n  'arcsec':           'Expression',\n  'asec':             'Expression',\n  'cot':              'Expression',\n  'coth':             'Expression',\n  'arccot':           'Expression',\n  'acot':             'Expression',\n  'exp':              ['Expression', false],\n  'log':              'Expression',\n  'ln':               'Expression',\n  'det':              ['Expression', false],\n  'Pr':               ['Expression', false],\n  // New expressions.\n  'tr':               ['Expression', false],\n  'trace':            ['Expression', false, 'tr'],\n  'Tr':               ['Expression', false],\n  'Trace':            ['Expression', false, 'Tr'],\n  'rank':             'NamedFn',\n  'erf':              ['Expression', false],\n  'Residue':          ['Macro', '\\\\mathrm{Res}'],\n  'Res':              ['OperatorApplication', '\\\\Residue', '(', '[', '{'],\n  'principalvalue':   ['OperatorApplication', '{\\\\cal P}'],\n  'pv':               ['OperatorApplication', '{\\\\cal P}'],\n  'PV':               ['OperatorApplication', '{\\\\rm P.V.}'],\n  'Re':               ['OperatorApplication', '\\\\mathrm{Re}', '{'],\n  'Im':               ['OperatorApplication', '\\\\mathrm{Im}', '{'],\n  // Old named functions.\n  'sine':             ['NamedFn', 'sin'],\n  'hypsine':          ['NamedFn', 'sinh'],\n  'arcsine':          ['NamedFn', 'arcsin'],\n  'asine':            ['NamedFn', 'asin'],\n  'cosine':           ['NamedFn', 'cos'],\n  'hypcosine':        ['NamedFn', 'cosh'],\n  'arccosine':        ['NamedFn', 'arccos'],\n  'acosine':          ['NamedFn', 'acos'],\n  'tangent':          ['NamedFn', 'tan'],\n  'hyptangent':       ['NamedFn', 'tanh'],\n  'arctangent':       ['NamedFn', 'arctan'],\n  'atangent':         ['NamedFn', 'atan'],\n  'cosecant':         ['NamedFn', 'csc'],\n  'hypcosecant':      ['NamedFn', 'csch'],\n  'arccosecant':      ['NamedFn', 'arccsc'],\n  'acosecant':        ['NamedFn', 'acsc'],\n  'secant':           ['NamedFn', 'sec'],\n  'hypsecant':        ['NamedFn', 'sech'],\n  'arcsecant':        ['NamedFn', 'arcsec'],\n  'asecant':          ['NamedFn', 'asec'],\n  'cotangent':        ['NamedFn', 'cot'],\n  'hypcotangent':     ['NamedFn', 'coth'],\n  'arccotangent':     ['NamedFn', 'arccot'],\n  'acotangent':       ['NamedFn', 'acot'],\n  'exponential':      ['NamedFn', 'exp'],\n  'logarithm':        ['NamedFn', 'log'],\n  'naturallogarithm': ['NamedFn', 'ln'],\n  'determinant':      ['NamedFn', 'det'],\n  'Probability':      ['NamedFn', 'Pr'],\n}, PhysicsMethods);\n\n\n/**\n * Macros for physics package (section 2.4).\n */\nnew CommandMap('Physics-quick-quad-macros', {\n  'qqtext':     'Qqtext',\n  'qq':         'Qqtext',\n  'qcomma':     ['Macro', '\\\\qqtext*{,}'],\n  'qc':         ['Macro', '\\\\qqtext*{,}'],\n  'qcc':        ['Qqtext', 'c.c.'],\n  'qif':        ['Qqtext', 'if'],\n  'qthen':      ['Qqtext', 'then'],\n  'qelse':      ['Qqtext', 'else'],\n  'qotherwise': ['Qqtext', 'otherwise'],\n  'qunless':    ['Qqtext', 'unless'],\n  'qgiven':     ['Qqtext', 'given'],\n  'qusing':     ['Qqtext', 'using'],\n  'qassume':    ['Qqtext', 'assume'],\n  'qsince':     ['Qqtext', 'since'],\n  'qlet':       ['Qqtext', 'let'],\n  'qfor':       ['Qqtext', 'for'],\n  'qall':       ['Qqtext', 'all'],\n  'qeven':      ['Qqtext', 'even'],\n  'qodd':       ['Qqtext', 'odd'],\n  'qinteger':   ['Qqtext', 'integer'],\n  'qand':       ['Qqtext', 'and'],\n  'qor':        ['Qqtext', 'or'],\n  'qas':        ['Qqtext', 'as'],\n  'qin':        ['Qqtext', 'in'],\n}, PhysicsMethods);\n\n\n/**\n * Macros for physics package (section 2.5).\n */\nnew CommandMap('Physics-derivative-macros', {\n  'diffd':                'DiffD',\n  'flatfrac':             ['Macro', '\\\\left.#1\\\\middle/#2\\\\right.', 2],\n  'differential':         ['Differential', '\\\\diffd'],\n  'dd':                   ['Differential', '\\\\diffd'],\n  'variation':            ['Differential', '\\\\delta'],\n  'var':                  ['Differential', '\\\\delta'],\n  'derivative':           ['Derivative', 2, '\\\\diffd'],\n  'dv':                   ['Derivative', 2, '\\\\diffd'],\n  'partialderivative':    ['Derivative', 3, '\\\\partial'],\n  'pderivative':          ['Derivative', 3, '\\\\partial'],\n  'pdv':                  ['Derivative', 3, '\\\\partial'],\n  'functionalderivative': ['Derivative', 2, '\\\\delta'],\n  'fderivative':          ['Derivative', 2, '\\\\delta'],\n  'fdv':                  ['Derivative', 2, '\\\\delta'],\n}, PhysicsMethods);\n\n\n/**\n * Macros for physics package (section 2.6).\n */\nnew CommandMap('Physics-bra-ket-macros', {\n  'bra':              'Bra',\n  'ket':              'Ket',\n  'innerproduct':     'BraKet',\n  'ip':               'BraKet',\n  'braket':           'BraKet',\n  'outerproduct':     'KetBra',\n  'dyad':             'KetBra',\n  'ketbra':           'KetBra',\n  'op':               'KetBra',\n  'expectationvalue': 'Expectation',\n  'expval':           'Expectation',\n  'ev':               'Expectation',\n  'matrixelement':    'MatrixElement',\n  'matrixel':         'MatrixElement',\n  'mel':              'MatrixElement',\n}, PhysicsMethods);\n\n\n/**\n * Macros for physics package (section 2.7).\n */\nnew CommandMap('Physics-matrix-macros', {\n  'matrixquantity':      'MatrixQuantity',\n  'mqty'          :      'MatrixQuantity',\n  'pmqty':               ['Macro', '\\\\mqty(#1)', 1],\n  'Pmqty':               ['Macro', '\\\\mqty*(#1)', 1],\n  'bmqty':               ['Macro', '\\\\mqty[#1]', 1],\n  'vmqty':               ['Macro', '\\\\mqty|#1|', 1],\n  // Smallmatrices\n  'smallmatrixquantity': ['MatrixQuantity', true],\n  'smqty':               ['MatrixQuantity', true],\n  'spmqty':              ['Macro', '\\\\smqty(#1)', 1],\n  'sPmqty':              ['Macro', '\\\\smqty*(#1)', 1],\n  'sbmqty':              ['Macro', '\\\\smqty[#1]', 1],\n  'svmqty':              ['Macro', '\\\\smqty|#1|', 1],\n  'matrixdeterminant':   ['Macro', '\\\\vmqty{#1}', 1],\n  'mdet':                ['Macro', '\\\\vmqty{#1}', 1],\n  'smdet':               ['Macro', '\\\\svmqty{#1}', 1],\n  'identitymatrix':      'IdentityMatrix',\n  'imat':                'IdentityMatrix',\n  'xmatrix':             'XMatrix',\n  'xmat':                'XMatrix',\n  'zeromatrix':          ['Macro', '\\\\xmat{0}{#1}{#2}', 2],\n  'zmat':                ['Macro', '\\\\xmat{0}{#1}{#2}', 2],\n  'paulimatrix':         'PauliMatrix',\n  'pmat':                'PauliMatrix',\n  'diagonalmatrix': 'DiagonalMatrix',\n  'dmat': 'DiagonalMatrix',\n  'antidiagonalmatrix': ['DiagonalMatrix', true],\n  'admat': ['DiagonalMatrix', true]\n}, PhysicsMethods);\n\n\n\n/**\n * Auxiliary environment map to define smallmatrix. This makes Physics\n * independent of AmsMath.\n */\nnew EnvironmentMap('Physics-aux-envs', ParseMethods.environment, {\n  smallmatrix:   ['Array', null, null, null, 'c', '0.333em', '.2em', 'S', 1]\n}, PhysicsMethods);\n\n\n/**\n * Character map for braket package.\n */\nnew MacroMap('Physics-characters', {\n  '|': ['AutoClose', TEXCLASS.ORD],   // texClass: TEXCLASS.ORD, // Have to push the closer as mml with special property\n  ')': 'AutoClose',\n  ']': 'AutoClose'\n}, PhysicsMethods);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the Physics package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {AutoOpen} from './PhysicsItems.js';\nimport './PhysicsMappings.js';\n\n\nexport const PhysicsConfiguration = Configuration.create(\n  'physics', {\n    handler: {\n      macro: [\n        'Physics-automatic-bracing-macros',\n        'Physics-vector-macros',\n        'Physics-vector-mo',\n        'Physics-vector-mi',\n        'Physics-derivative-macros',\n        'Physics-expressions-macros',\n        'Physics-quick-quad-macros',\n        'Physics-bra-ket-macros',\n        'Physics-matrix-macros'\n      ],\n      character: ['Physics-characters'],\n      environment: ['Physics-aux-envs']\n    },\n    items: {\n      [AutoOpen.prototype.kind]: AutoOpen\n    },\n    options: {\n      physics: {\n        italicdiff: false,\n        arrowdel: false\n      }\n    }\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the setoptions package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {Configuration, ConfigurationHandler, ParserConfiguration} from '../Configuration.js';\nimport {TeX} from '../../tex.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport TexError from '../TexError.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {Macro} from '../Symbol.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport {expandable, isObject} from '../../../util/Options.js';\n\nexport const SetOptionsUtil = {\n\n  /**\n   * Check if options can be set for a given pacakge, and error otherwise.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} extension   The name of the package whose option is being set.\n   * @return {boolean}           True when options can be set for this package.\n   */\n  filterPackage(parser: TexParser, extension: string): boolean {\n    if (extension !== 'tex' && !ConfigurationHandler.get(extension)) {\n      throw new TexError('NotAPackage', 'Not a defined package: %1', extension);\n    }\n    const config = parser.options.setoptions;\n    const options = config.allowOptions[extension];\n    if ((options === undefined && !config.allowPackageDefault) || options === false) {\n      throw new TexError('PackageNotSettable', 'Options can\\'t be set for package \"%1\"', extension);\n    }\n    return true;\n  },\n\n  /**\n   * Check if an option can be set and error otherwise.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} extension   The name of the package whose option is being set.\n   * @param {string} option      The name of the option being set.\n   * @return {boolean}           True when the option can be set.\n   */\n  filterOption(parser: TexParser, extension: string, option: string): boolean {\n    const config = parser.options.setoptions;\n    const options = config.allowOptions[extension] || {};\n    const allow = (options.hasOwnProperty(option) && !isObject(options[option]) ? options[option] : null);\n    if (allow === false || (allow === null && !config.allowOptionsDefault)) {\n      throw new TexError('OptionNotSettable', 'Option \"%1\" is not allowed to be set', option);\n    }\n    if (!(extension === 'tex' ? parser.options : parser.options[extension])?.hasOwnProperty(option)) {\n      if (extension === 'tex') {\n        throw new TexError('InvalidTexOption', 'Invalid TeX option \"%1\"', option);\n      } else {\n        throw new TexError('InvalidOptionKey', 'Invalid option \"%1\" for package \"%2\"', option, extension);\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Verify an option's value before setting it.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} extension   The name of the package whose option this is.\n   * @param {string} option      The name of the option being set.\n   * @param {string} value       The value to give to the option.\n   * @return {string}            The (possibly modified) value for the option\n   */\n  filterValue(_parser: TexParser, _extension: string, _option: string, value: string): string {\n    return value;\n  }\n\n};\n\nconst setOptionsMap = new CommandMap('setoptions', {\n  setOptions: 'SetOptions'\n}, {\n  /**\n   * Implements \\setOptions[package]{option-values}\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} name        The name of the macro being processed.\n   */\n  SetOptions(parser: TexParser, name: string) {\n    const extension = parser.GetBrackets(name) || 'tex';\n    const options = ParseUtil.keyvalOptions(parser.GetArgument(name));\n    const config = parser.options.setoptions;\n    if (!config.filterPackage(parser, extension)) return;\n    for (const key of Object.keys(options)) {\n      if (config.filterOption(parser, extension, key)) {\n        (extension === 'tex' ? parser.options : parser.options[extension])[key] =\n          config.filterValue(parser, extension, key, options[key]);\n      }\n    }\n  }\n});\n\n/**\n * If the require package is available, save the original require,\n *   and define a macro that loads the extension and sets\n *   its options, if any.\n *\n * @param {ParserConfiguration} config  The current configuration.\n * @param {TeX} jax                     The active tex input jax.\n */\nfunction setoptionsConfig(_config: ParserConfiguration, jax: TeX<any, any, any>) {\n  const require = jax.parseOptions.handlers.get('macro').lookup('require') as any;\n  if (require) {\n    setOptionsMap.add('Require', new Macro('Require', require._func));\n    setOptionsMap.add('require', new Macro('require', BaseMethods.Macro,\n                                           ['\\\\Require{#2}\\\\setOptions[#2]{#1}', 2, '']));\n  }\n}\n\nexport const SetOptionsConfiguration = Configuration.create(\n  'setoptions', {\n    handler: {macro: ['setoptions']},\n    config: setoptionsConfig,\n    priority: 3,  // must be less than the priority of the require package (which is 5).\n    options: {\n      setoptions: {\n        filterPackage: SetOptionsUtil.filterPackage,  // filter for whether a package can be configured\n        filterOption: SetOptionsUtil.filterOption,    // filter for whether an option can be set\n        filterValue: SetOptionsUtil.filterValue,      // filter for the value to assign to an option\n        allowPackageDefault: true,       // default for allowing packages when not explicitly set in allowOptions\n        allowOptionsDefault: true,       // default for allowing option that isn't explicitly set in allowOptions\n        allowOptions: expandable({       // list of packages to allow/disallow, and their options to allow/disallow\n          //\n          //  top-level tex items can be set, but not these\n          //    (that leaves digits and the tagging options)\n          //\n          tex: {\n            FindTeX: false,\n            formatError: false,\n            package: false,\n            baseURL: false,\n            tags: false,\n            maxBuffer: false,\n            maxMaxros: false,\n            macros: false,\n            environments: false\n          },\n          //\n          // These packages can't be configured at all\n          //\n          setoptions: false,\n          autoload: false,\n          require: false,\n          configmacros: false,\n          tagformat: false\n        })\n      }\n    }\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2019-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview    Configuration file for the tagformat package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport {TeX} from '../../tex.js';\nimport {AbstractTags, TagsFactory} from '../Tags.js';\n\n/**\n * Number used to make tag class unique (each TeX input has to have its own because\n *  it needs access to the parse options)\n */\nlet tagID = 0;\n\n/**\n * Configure a class to use for the tag handler that uses the input jax's options\n *   to control the formatting of the tags\n * @param {Configuration} config   The configuration for the input jax\n * @param {TeX} jax                The TeX input jax\n */\nexport function tagformatConfig(config: ParserConfiguration, jax: TeX<any, any, any>) {\n\n  /**\n   * If the tag format is being added by one of the other extensions,\n   *   as is done for the 'ams' tags, make sure it is defined so we can create it.\n   */\n  const tags = jax.parseOptions.options.tags;\n  if (tags !== 'base' && config.tags.hasOwnProperty(tags)) {\n    TagsFactory.add(tags, config.tags[tags]);\n  }\n\n  /**\n   * The original tag class to be extended (none, ams, or all)\n   */\n  const TagClass = TagsFactory.create(jax.parseOptions.options.tags).constructor as typeof AbstractTags;\n\n  /**\n   * A Tags object that uses the input jax options to perform the formatting\n   *\n   * Note:  We have to make a new class for each input jax since the format\n   * methods don't have access to the input jax, and hence to its options.\n   * If they did, we would use a common configTags class instead.\n   */\n  class TagFormat extends TagClass {\n\n    /**\n     * @override\n     */\n    public formatNumber(n: number) {\n      return jax.parseOptions.options.tagformat.number(n);\n    }\n\n    /**\n     * @override\n     */\n    public formatTag(tag: string) {\n      return jax.parseOptions.options.tagformat.tag(tag);\n    }\n\n    /**\n     * @override\n     */\n    public formatId(id: string) {\n      return jax.parseOptions.options.tagformat.id(id);\n    }\n\n    /**\n     * @override\n     */\n    public formatUrl(id: string, base: string) {\n      return jax.parseOptions.options.tagformat.url(id, base);\n    }\n  }\n\n  //\n  //  Get a unique name for the tag class (since it is tied to the input jax)\n  //  Note:  These never get freed, so they will accumulate if you create many\n  //  TeX input jax instances with this extension.\n  //\n  tagID++;\n  const tagName = 'configTags-' + tagID;\n  //\n  // Register the tag class\n  //\n  TagsFactory.add(tagName, TagFormat);\n  jax.parseOptions.options.tags = tagName;\n}\n\n/**\n * The configuration object for configTags\n */\nexport const TagFormatConfiguration = Configuration.create(\n  'tagformat', {\n    config: [tagformatConfig, 10],\n    options: {\n      tagformat: {\n        number: (n: number) => n.toString(),\n        tag:    (tag: string) => '(' + tag + ')',\n        id:     (id: string) => 'mjx-eqn:' + id.replace(/\\s/g, '_'),\n        url:    (id: string, base: string) => base + '#' + encodeURIComponent(id),\n      }\n    }\n  }\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2020-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview  Method definitions for the textmacros package\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport TexParser from '../TexParser.js';\nimport {retryAfter} from '../../../util/Retries.js';\nimport {TextParser} from './TextParser.js';\nimport BaseMethods from '../base/BaseMethods.js';\n\n/**\n * The methods used to implement the text-mode macros\n */\nexport const TextMacrosMethods = {\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  Comment(parser: TextParser, _c: string) {\n    while (parser.i < parser.string.length && parser.string.charAt(parser.i) !== '\\n') {\n      parser.i++;\n    }\n    parser.i++;\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} open         The delimiter used to open math-mode in text-mode\n   */\n  Math(parser: TextParser, open: string) {\n    parser.saveText();\n    let i = parser.i;\n    let j, c;\n    let braces = 0;\n    //\n    // Loop through the string looking for the closing delimiter, while matching braces\n    //\n    while ((c = parser.GetNext())) {\n      j = parser.i++;\n      switch (c) {\n\n      case '\\\\':\n        const cs = parser.GetCS();\n        if (cs === ')') c = '\\\\(';  // \\( is the opening delimiter for \\)\n      case '$':\n        //\n        //  If there are no unbalanced braces and we have found the close delimiter,\n        //    process the contents of the delimiters in math mode (using the original TeX parser)\n        //\n        if (braces === 0 && open === c) {\n          const config = parser.texParser.configuration;\n          const mml = (new TexParser(parser.string.substr(i, j - i), parser.stack.env, config)).mml();\n          parser.PushMath(mml);\n          return;\n        }\n        break;\n\n      case '{':\n        braces++;\n        break;\n\n      case '}':\n        if (braces === 0) {\n          parser.Error('ExtraCloseMissingOpen', 'Extra close brace or missing open brace');\n        }\n        braces--;\n        break;\n      }\n    }\n    parser.Error('MathNotTerminated', 'Math-mode is not properly terminated');\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  MathModeOnly(parser: TextParser, c: string) {\n    parser.Error('MathModeOnly', '\\'%1\\' allowed only in math mode', c);\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  Misplaced(parser: TextParser, c: string) {\n    parser.Error('Misplaced', '\\'%1\\' can not be used here', c);\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  OpenBrace(parser: TextParser, _c: string) {\n    //\n    //  Save the current stack environment and make a copy of it for\n    //    use within the braced group.\n    //\n    const env = parser.stack.env;\n    parser.envStack.push(env);\n    parser.stack.env = Object.assign({}, env);\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  CloseBrace(parser: TextParser, _c: string) {\n    //\n    //  Restore the saved stack environment, if there was one\n    //\n    if (parser.envStack.length) {\n      parser.saveText();\n      parser.stack.env = parser.envStack.pop();\n    } else {\n      parser.Error('ExtraCloseMissingOpen', 'Extra close brace or missing open brace');\n    }\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  OpenQuote(parser: TextParser, c: string) {\n    //\n    //  Handle smart open quotes\n    //\n    if (parser.string.charAt(parser.i) === c) {\n      parser.text += '\\u201C';\n      parser.i++;\n    } else {\n      parser.text += '\\u2018';\n    }\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  CloseQuote(parser: TextParser, c: string) {\n    //\n    //  Handle smart close quotes\n    //\n    if (parser.string.charAt(parser.i) === c) {\n      parser.text += '\\u201D';\n      parser.i++;\n    } else {\n      parser.text += '\\u2019';\n    }\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  Tilde(parser: TextParser, _c: string) {\n    parser.text += '\\u00A0';  // non-breaking space\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} c            The character that called this function\n   */\n  Space(parser: TextParser, _c: string) {\n    parser.text += ' ';  // regular space, but skipping multiple spaces\n    while (parser.GetNext().match(/\\s/)) parser.i++;\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} name         The control sequence that called this function\n   */\n  SelfQuote(parser: TextParser, name: string) {\n    parser.text += name.substr(1);  // add in the quoted character\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} name         The control sequence that called this function\n   * @param {string} c            The character to insert into the string\n   */\n  Insert(parser: TextParser, _name: string, c: string) {\n    parser.text += c;\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} name         The control sequence that called this function\n   * @param {string} c            The character to insert into the string\n   */\n  Accent(parser: TextParser, name: string, c: string) {\n    //\n    //  Create an accented character using mover\n    //\n    const base = parser.ParseArg(name);\n    const accent = parser.create('token', 'mo', {}, c);\n    parser.addAttributes(accent);\n    parser.Push(parser.create('node', 'mover', [base, accent]));\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} name         The control sequence that called this function\n   */\n  Emph(parser: TextParser, name: string) {\n    //\n    //  Switch to/from italics\n    //\n    const variant = (parser.stack.env.mathvariant === '-tex-mathit' ? 'normal' : '-tex-mathit');\n    parser.Push(parser.ParseTextArg(name, {mathvariant: variant}));\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} name         The control sequence that called this function\n   * @param {string} variant      The font variant to use from now on\n   */\n  SetFont(parser: TextParser, _name: string, variant: string) {\n    parser.saveText();\n    parser.stack.env.mathvariant = variant;\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} name         The control sequence that called this function\n   * @param {number} size         The font size to use from now on\n   */\n  SetSize(parser: TextParser, _name: string, size: number) {\n    parser.saveText();\n    parser.stack.env.mathsize = size;\n  },\n\n  /**\n   * @param {TextParser} parser   The text-mode parser\n   * @param {string} name         The control sequence that called this function\n   */\n  CheckAutoload(parser: TextParser, name: string) {\n    const autoload = parser.configuration.packageData.get('autoload');\n    const texParser = parser.texParser;\n    name = name.slice(1);\n    //\n    // Check if a macro is undefined, or currently set to autoload an extension.\n    // If so, process the macro in the original TexParser:\n    //    This will handle the undefined macro using the TeX parser's configuration, then return,\n    //    or will cause the autoloaded extension to load or be processed and restart the expression.\n    // Otherwise, process the macro in text mode.\n    //\n    const macro = texParser.lookup('macro', name);\n    if (!macro || (autoload && macro._func === autoload.Autoload)) {\n      texParser.parse('macro', [texParser, name]);\n      if (!macro) return;\n      retryAfter(Promise.resolve());\n    }\n    texParser.parse('macro', [parser, name]);\n  },\n\n  //\n  // Copy some methods from the base package\n  //\n  Macro: BaseMethods.Macro,\n  Spacer: BaseMethods.Spacer,\n  Hskip: BaseMethods.Hskip,\n  rule: BaseMethods.rule,\n  Rule: BaseMethods.Rule,\n  HandleRef: BaseMethods.HandleRef\n\n};\n\n", "/*************************************************************\n *\n *  Copyright (c) 2020-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview  The TextParser class for the textmacros package\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport ParseOptions from '../ParseOptions.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {StackItem} from '../StackItem.js';\nimport {MmlNode, AbstractMmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport {EnvList} from '../StackItem.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {StopItem, StyleItem} from '../base/BaseItems.js';\n\n/**\n * Subclass of the TexParser but for handling text-mode material\n */\nexport class TextParser extends TexParser {\n\n  /**\n   * The accumulated text material to go into an mtext element\n   */\n  public text: string;\n\n  /**\n   * Saved stack environments for processing braces\n   */\n  public envStack: EnvList[];\n\n  /**\n   * The scriptlevel of this text-mode material\n   */\n  public level: number | string | undefined;\n\n  /**\n   * The accumulated MmlNodes generated by parsing the text-mode material\n   */\n  protected nodes: MmlNode[];\n\n  /**\n   * Short-hand for obtaining the saved TexParser\n   */\n  public get texParser() {\n    return this.configuration.packageData.get('textmacros').texParser;\n  }\n\n  /**\n   * @override\n   */\n  public get tags() {\n    return this.texParser.tags;\n  }\n\n  /**\n   * @override\n   * @constructor\n   */\n  constructor(text: string, env: EnvList, configuration: ParseOptions, level?: number | string) {\n    super(text, env, configuration);\n    this.level = level;\n  }\n\n  /**\n   * Make sure we only return one element (wrap multiple ones in an mrow or mstyle, as needed).\n   *\n   * @override\n   */\n  public mml() {\n    return (this.level != null ?\n            this.create('node', 'mstyle', this.nodes, {displaystyle: false, scriptlevel: this.level}) :\n            this.nodes.length === 1 ? this.nodes[0] : this.create('node', 'mrow', this.nodes));\n  }\n\n  /**\n   * @override\n   */\n  public Parse() {\n    this.text = '';\n    this.nodes = [];\n    this.envStack = [];\n    super.Parse();\n  }\n\n  /**\n   * Creates an mtext element for the saved text and pushes that onto the node list\n   */\n  public saveText() {\n    if (this.text) {\n      const mathvariant = this.stack.env.mathvariant;\n      const text = ParseUtil.internalText(this, this.text, mathvariant ? {mathvariant} : {});\n      this.text = '';\n      this.Push(text);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public Push(mml: MmlNode | StackItem) {\n    if (this.text) {\n      this.saveText();\n    }\n    if (mml instanceof StopItem) {\n      return super.Push(mml);\n    }\n    if (mml instanceof StyleItem) {\n      this.stack.env.mathcolor = this.stack.env.color;\n      return;\n    }\n    if (mml instanceof AbstractMmlNode) {\n      this.addAttributes(mml);\n      this.nodes.push(mml);\n    }\n  }\n\n  /**\n   * Push some math into the node list, adding mathsize and mathcolor\n   *   if specified in the environment.\n   *\n   * @param {MmlNode} mml   The math nodes to push\n   */\n  public PushMath(mml: MmlNode) {\n    const env = this.stack.env;\n    if (!mml.isKind('TeXAtom')) {\n      mml = this.create('node', 'TeXAtom', [mml]);  // make sure the math is an ORD\n    }\n    for (const name of ['mathsize', 'mathcolor']) {\n      if (env[name] && !mml.attributes.getExplicit(name)) {\n        if (!mml.isToken && !mml.isKind('mstyle')) {\n          mml = this.create('node', 'mstyle', [mml]);\n        }\n        NodeUtil.setAttribute(mml, name, env[name]);\n      }\n    }\n    if (mml.isInferred) {\n      mml = this.create('node', 'mrow', mml.childNodes);\n    }\n    this.nodes.push(mml);\n  }\n\n  /**\n   * Add mathsize, mathcolor, and mathvariant to token nodes,\n   *   if they are specified in the environment\n   *\n   * @param {MmlNode} mml   The node to adjust\n   */\n  public addAttributes(mml: MmlNode) {\n    const env = this.stack.env;\n    if (!mml.isToken) return;\n    for (const name of ['mathsize', 'mathcolor', 'mathvariant']) {\n      if (env[name] && !mml.attributes.getExplicit(name)) {\n        NodeUtil.setAttribute(mml, name, env[name]);\n      }\n    }\n  }\n\n  /**\n   * Process the argument as text with the given environment settings\n   *\n   * @param {string} name   The macro that is calling for a parameter\n   * @param {EnvList} env   The environment to use\n   */\n  public ParseTextArg(name: string, env: EnvList) {\n    const text = this.GetArgument(name);\n    env = Object.assign(Object.assign({}, this.stack.env), env);\n    return (new TextParser(text, env, this.configuration)).mml();\n  }\n\n  /**\n   * Process an argument as text rather than math\n   *\n   * @override\n   */\n  public ParseArg(name: string) {\n    return (new TextParser(this.GetArgument(name), this.stack.env, this.configuration)).mml();\n  }\n\n  /**\n   * Throw an error\n   *\n   * @param {string} id        The id for the message string\n   * @param {string} message   The English version of the message\n   * @param {string[]} args    Any substitution args for the message\n   */\n  public Error(id: string, message: string, ...args: string[]) {\n    throw new TexError(id, message, ...args);\n  }\n\n}\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Mappings for the textcomp package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {CommandMap} from '../SymbolMap.js';\nimport {TexConstant} from '../TexConstants.js';\nimport {TextMacrosMethods} from '../textmacros/TextMacrosMethods.js';\nimport TexParser from '../TexParser.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {TextParser} from '../textmacros/TextParser.js';\n\n\n/**\n * Identifiers from the Textcomp package.\n */\nnew CommandMap('textcomp-macros', {\n\n  // Table 3: Predefined LATEX 2ε Text-Mode Commands\n  'textasciicircum':     ['Insert', '\\u005E'],\n  'textasciitilde':      ['Insert', '\\u007E'],\n  'textasteriskcentered': ['Insert', '\\u002A'],\n  'textbackslash':       ['Insert', '\\u005C'],\n  'textbar':             ['Insert', '\\u007C'],\n  'textbraceleft':       ['Insert', '\\u007B'],\n  'textbraceright':      ['Insert', '\\u007D'],\n  'textbullet':          ['Insert', '\\u2022'],\n  'textdagger':          ['Insert', '\\u2020'],\n  'textdaggerdbl':       ['Insert', '\\u2021'],\n  'textellipsis':        ['Insert', '\\u2026'],\n  'textemdash':          ['Insert', '\\u2014'],\n  'textendash':          ['Insert', '\\u2013'],\n  'textexclamdown':      ['Insert', '\\u00A1'],\n  'textgreater':         ['Insert', '\\u003E'],\n  'textless':            ['Insert', '\\u003C'],\n  'textordfeminine':     ['Insert', '\\u00AA'],\n  'textordmasculine':    ['Insert', '\\u00BA'],\n  'textparagraph':       ['Insert', '\\u00B6'],\n  'textperiodcentered':  ['Insert', '\\u00B7'],\n  'textquestiondown':    ['Insert', '\\u00BF'],\n  'textquotedblleft':    ['Insert', '\\u201C'],\n  'textquotedblright':   ['Insert', '\\u201D'],\n  'textquoteleft':       ['Insert', '\\u2018'],\n  'textquoteright':      ['Insert', '\\u2019'],\n  'textsection':         ['Insert', '\\u00A7'],\n  'textunderscore':      ['Insert', '\\u005F'],\n  'textvisiblespace':    ['Insert', '\\u2423'],\n\n  // Table 12: textcomp Diacritics\n  'textacutedbl':        ['Insert', '\\u02DD'],\n  'textasciiacute':      ['Insert', '\\u00B4'],\n  'textasciibreve':      ['Insert', '\\u02D8'],\n  'textasciicaron':      ['Insert', '\\u02C7'],\n  'textasciidieresis':   ['Insert', '\\u00A8'],\n  'textasciimacron':     ['Insert', '\\u00AF'],\n  'textgravedbl':        ['Insert', '\\u02F5'],\n  'texttildelow':        ['Insert', '\\u02F7'],\n\n  // Table 13: textcomp Currency Symbols\n  'textbaht':            ['Insert', '\\u0E3F'],\n  'textcent':            ['Insert', '\\u00A2'],\n  'textcolonmonetary':   ['Insert', '\\u20A1'],\n  'textcurrency':        ['Insert', '\\u00A4'],\n  'textdollar':          ['Insert', '\\u0024'],\n  'textdong':            ['Insert', '\\u20AB'],\n  'texteuro':            ['Insert', '\\u20AC'],\n  'textflorin':          ['Insert', '\\u0192'],\n  'textguarani':         ['Insert', '\\u20B2'],\n  'textlira':            ['Insert', '\\u20A4'],\n  'textnaira':           ['Insert', '\\u20A6'],\n  'textpeso':            ['Insert', '\\u20B1'],\n  'textsterling':        ['Insert', '\\u00A3'],\n  'textwon':             ['Insert', '\\u20A9'],\n  'textyen':             ['Insert', '\\u00A5'],\n\n  // Table 15: textcomp Legal Symbols\n  'textcircledP':        ['Insert', '\\u2117'],\n  'textcompwordmark':    ['Insert', '\\u200C'],\n  'textcopyleft':        ['Insert', '\\u{1F12F}'],\n  'textcopyright':       ['Insert', '\\u00A9'],\n  'textregistered':      ['Insert', '\\u00AE'],\n  'textservicemark':     ['Insert', '\\u2120'],\n  'texttrademark':       ['Insert', '\\u2122'],\n\n  // Table 20: Miscellaneous textcomp Symbol\n  'textbardbl':          ['Insert', '\\u2016'],\n  'textbigcircle':       ['Insert', '\\u25EF'],\n  'textblank':           ['Insert', '\\u2422'],\n  'textbrokenbar':       ['Insert', '\\u00A6'],\n  'textdiscount':        ['Insert', '\\u2052'],\n  'textestimated':       ['Insert', '\\u212E'],\n  'textinterrobang':     ['Insert', '\\u203D'],\n  'textinterrobangdown': ['Insert', '\\u2E18'],\n  'textmusicalnote':     ['Insert', '\\u266A'],\n  'textnumero':          ['Insert', '\\u2116'],\n  'textopenbullet':      ['Insert', '\\u25E6'],\n  'textpertenthousand':  ['Insert', '\\u2031'],\n  'textperthousand':     ['Insert', '\\u2030'],\n  'textrecipe':          ['Insert', '\\u211E'],\n  'textreferencemark':   ['Insert', '\\u203B'],\n  // 'textthreequartersemdash'\n  // 'texttwelveudash'\n\n  // Table 51: textcomp Text-Mode Delimiters\n  'textlangle':          ['Insert', '\\u2329'],\n  'textrangle':          ['Insert', '\\u232A'],\n  'textlbrackdbl':       ['Insert', '\\u27E6'],\n  'textrbrackdbl':       ['Insert', '\\u27E7'],\n  'textlquill':          ['Insert', '\\u2045'],\n  'textrquill':          ['Insert', '\\u2046'],\n\n  // Table 62: textcomp Text-Mode Math and Science Symbols\n  'textcelsius':         ['Insert', '\\u2103'],\n  'textdegree':          ['Insert', '\\u00B0'],\n  'textdiv':             ['Insert', '\\u00F7'],\n  'textdownarrow':       ['Insert', '\\u2193'],\n  'textfractionsolidus': ['Insert', '\\u2044'],\n  'textleftarrow':       ['Insert', '\\u2190'],\n  'textlnot':            ['Insert', '\\u00AC'],\n  'textmho':             ['Insert', '\\u2127'],\n  'textminus':           ['Insert', '\\u2212'],\n  'textmu':              ['Insert', '\\u00B5'],\n  'textohm':             ['Insert', '\\u2126'],\n  'textonehalf':         ['Insert', '\\u00BD'],\n  'textonequarter':      ['Insert', '\\u00BC'],\n  'textonesuperior':     ['Insert', '\\u00B9'],\n  'textpm':              ['Insert', '\\u00B1'],\n  'textrightarrow':      ['Insert', '\\u2192'],\n  'textsurd':            ['Insert', '\\u221A'],\n  'textthreequarters':   ['Insert', '\\u00BE'],\n  'textthreesuperior':   ['Insert', '\\u00B3'],\n  'texttimes':           ['Insert', '\\u00D7'],\n  'texttwosuperior':     ['Insert', '\\u00B2'],\n  'textuparrow':         ['Insert', '\\u2191'],\n\n  // Table 110: textcomp Genealogical Symbols\n  'textborn':            ['Insert', '\\u002A'],\n  'textdied':            ['Insert', '\\u2020'],\n  'textdivorced':        ['Insert', '\\u26AE'],\n  //  'textleaf'\n  'textmarried':         ['Insert', '\\u26AD'],\n\n  // This is not the correct glyph\n  'textcentoldstyle':    ['Insert', '\\u00A2', TexConstant.Variant.OLDSTYLE],\n  // This is not the correct glyph\n  'textdollaroldstyle':  ['Insert', '\\u0024', TexConstant.Variant.OLDSTYLE],\n\n  // Table 16: textcomp Old-Style Numerals\n  'textzerooldstyle':    ['Insert', '0', TexConstant.Variant.OLDSTYLE],\n  'textoneoldstyle':     ['Insert', '1', TexConstant.Variant.OLDSTYLE],\n  'texttwooldstyle':     ['Insert', '2', TexConstant.Variant.OLDSTYLE],\n  'textthreeoldstyle':   ['Insert', '3', TexConstant.Variant.OLDSTYLE],\n  'textfouroldstyle':    ['Insert', '4', TexConstant.Variant.OLDSTYLE],\n  'textfiveoldstyle':    ['Insert', '5', TexConstant.Variant.OLDSTYLE],\n  'textsixoldstyle':     ['Insert', '6', TexConstant.Variant.OLDSTYLE],\n  'textsevenoldstyle':   ['Insert', '7', TexConstant.Variant.OLDSTYLE],\n  'texteightoldstyle':   ['Insert', '8', TexConstant.Variant.OLDSTYLE],\n  'textnineoldstyle':    ['Insert', '9', TexConstant.Variant.OLDSTYLE]\n}, {\n  Insert: function(parser: TexParser, name: string, c: string, font: string) {\n    if (parser instanceof TextParser) {\n      if (!font) {\n        TextMacrosMethods.Insert(parser, name, c);\n        return;\n      }\n      parser.saveText();\n    }\n    parser.Push(ParseUtil.internalText(\n      parser, c, font ? {mathvariant: font} : {}));\n  }\n});\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the textcomp package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport './TextcompMappings.js';\n\n\nexport const TextcompConfiguration = Configuration.create(\n  'textcomp', {\n    handler: {macro: ['textcomp-macros']}\n  }\n);\n\n", "/*************************************************************\n *\n *  Copyright (c) 2020-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview  Character and Macro mappings for the textmacros package\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {MacroMap, CommandMap} from '../SymbolMap.js';\nimport {TexConstant} from '../TexConstants.js';\nimport {TextMacrosMethods} from './TextMacrosMethods.js';\nimport {MATHSPACE} from '../../../util/lengths.js';\n\n//\n//  The special characters in text-mode\n//\nnew MacroMap('text-special', {\n  '$':          'Math',\n  '%':          'Comment',\n  '^':          'MathModeOnly',\n  '_':          'MathModeOnly',\n  '&':          'Misplaced',\n  '#':          'Misplaced',\n  '~':          'Tilde',\n  ' ':          'Space',\n  '\\t':         'Space',\n  '\\r':         'Space',\n  '\\n':         'Space',\n  '\\u00A0':     'Tilde',\n  '{':          'OpenBrace',\n  '}':          'CloseBrace',\n  '`':          'OpenQuote',\n  '\\'':         'CloseQuote'\n}, TextMacrosMethods);\n\n//\n//  The text-mode macro mappings\n//\nnew CommandMap('text-macros', {\n  '(':          'Math',\n\n  '$':          'SelfQuote',\n  '_':          'SelfQuote',\n  '%':          'SelfQuote',\n  '{':          'SelfQuote',\n  '}':          'SelfQuote',\n  ' ':          'SelfQuote',\n  '&':          'SelfQuote',\n  '#':          'SelfQuote',\n  '\\\\':         'SelfQuote',\n\n  '\\'':         ['Accent', '\\u00B4'],\n  '\\u2019':     ['Accent', '\\u00B4'],\n  '`':          ['Accent', '\\u0060'],\n  '\\u2018':     ['Accent', '\\u0060'],\n  '^':          ['Accent', '^'],\n  '\\\"':         ['Accent', '\\u00A8'],\n  '~':          ['Accent', '~'],\n  '=':          ['Accent', '\\u00AF'],\n  '.':          ['Accent', '\\u02D9'],\n  'u':          ['Accent', '\\u02D8'],\n  'v':          ['Accent', '\\u02C7'],\n\n  emph:         'Emph',\n  rm:           ['SetFont', TexConstant.Variant.NORMAL],\n  mit:          ['SetFont', TexConstant.Variant.ITALIC],\n  oldstyle:     ['SetFont', TexConstant.Variant.OLDSTYLE],\n  cal:          ['SetFont', TexConstant.Variant.CALLIGRAPHIC],\n  it:           ['SetFont', '-tex-mathit'], // needs special handling\n  bf:           ['SetFont', TexConstant.Variant.BOLD],\n  bbFont:       ['SetFont', TexConstant.Variant.DOUBLESTRUCK],\n  scr:          ['SetFont', TexConstant.Variant.SCRIPT],\n  frak:         ['SetFont', TexConstant.Variant.FRAKTUR],\n  sf:           ['SetFont', TexConstant.Variant.SANSSERIF],\n  tt:           ['SetFont', TexConstant.Variant.MONOSPACE],\n\n  tiny:         ['SetSize', 0.5],\n  Tiny:         ['SetSize', 0.6],  // non-standard\n  scriptsize:   ['SetSize', 0.7],\n  small:        ['SetSize', 0.85],\n  normalsize:   ['SetSize', 1.0],\n  large:        ['SetSize', 1.2],\n  Large:        ['SetSize', 1.44],\n  LARGE:        ['SetSize', 1.73],\n  huge:         ['SetSize', 2.07],\n  Huge:         ['SetSize', 2.49],\n\n  Bbb:          ['Macro', '{\\\\bbFont #1}', 1],\n  textnormal:   ['Macro', '{\\\\rm #1}', 1],\n  textup:       ['Macro', '{\\\\rm #1}', 1],\n  textrm:       ['Macro', '{\\\\rm #1}', 1],\n  textit:       ['Macro', '{\\\\it #1}', 1],\n  textbf:       ['Macro', '{\\\\bf #1}', 1],\n  textsf:       ['Macro', '{\\\\sf #1}', 1],\n  texttt:       ['Macro', '{\\\\tt #1}', 1],\n\n  dagger:       ['Insert', '\\u2020'],\n  ddagger:      ['Insert', '\\u2021'],\n  S:            ['Insert', '\\u00A7'],\n\n  ',':          ['Spacer', MATHSPACE.thinmathspace],\n  ':':          ['Spacer', MATHSPACE.mediummathspace],\n  '>':          ['Spacer', MATHSPACE.mediummathspace],\n  ';':          ['Spacer', MATHSPACE.thickmathspace],\n  '!':          ['Spacer', MATHSPACE.negativethinmathspace],\n  enspace:      ['Spacer', .5],\n  quad:         ['Spacer', 1],\n  qquad:        ['Spacer', 2],\n  thinspace:    ['Spacer', MATHSPACE.thinmathspace],\n  negthinspace: ['Spacer', MATHSPACE.negativethinmathspace],\n\n  hskip:        'Hskip',\n  hspace:       'Hskip',\n  kern:         'Hskip',\n  mskip:        'Hskip',\n  mspace:       'Hskip',\n  mkern:        'Hskip',\n  rule:         'rule',\n  Rule:         ['Rule'],\n  Space:        ['Rule', 'blank'],\n\n  color:        'CheckAutoload',\n  textcolor:    'CheckAutoload',\n  colorbox:     'CheckAutoload',\n  fcolorbox:    'CheckAutoload',\n  href:         'CheckAutoload',\n  style:        'CheckAutoload',\n  class:        'CheckAutoload',\n  cssId:        'CheckAutoload',\n  unicode:      'CheckAutoload',\n\n  ref:          ['HandleRef', false],\n  eqref:        ['HandleRef', true],\n\n}, TextMacrosMethods);\n", "/*************************************************************\n *\n *  Copyright (c) 2020-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the textmacros package\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {TeX} from '../../tex.js';\nimport TexParser from '../TexParser.js';\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport ParseOptions from '../ParseOptions.js';\nimport {TagsFactory} from '../Tags.js';\nimport {StartItem, StopItem, MmlItem, StyleItem} from '../base/BaseItems.js';\nimport {TextParser} from './TextParser.js';\nimport {TextMacrosMethods} from './TextMacrosMethods.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\n\nimport './TextMacrosMappings.js';\n\n/**\n *  The base text macro configuration (used in the TextParser)\n */\nexport const TextBaseConfiguration = Configuration.create('text-base', {\n  parser: 'text',\n  handler: {\n    character: ['command', 'text-special'],\n    macro: ['text-macros']\n  },\n  fallback: {\n    //\n    // Unknown characters are added to the text verbatim\n    //\n    character: (parser: TextParser, c: string) => {\n      parser.text += c;\n    },\n    //\n    // For unknown macros, if they are defined in the main TeX parser\n    //   and not string-replacement macros, give an error, otherwise\n    //   run the macro (this either does the string replacement or\n    //   produces the error as configured in the main TeX parser, so\n    //   this will respect the noundefined package, if loaded).\n    //\n    macro: (parser: TextParser, name: string) => {\n      const texParser = parser.texParser;\n      const macro = texParser.lookup('macro', name);\n      if (macro && macro._func !== TextMacrosMethods.Macro) {\n        parser.Error('MathMacro', '%1 is only supported in math mode', '\\\\' + name);\n      }\n      texParser.parse('macro', [parser, name]);\n    }\n  },\n  items: {\n    [StartItem.prototype.kind]: StartItem,\n    [StopItem.prototype.kind]: StopItem,\n    [MmlItem.prototype.kind]: MmlItem,\n    [StyleItem.prototype.kind]: StyleItem     // needed for \\color\n  }\n});\n\n/**\n * Replacement for ParseUtil.internalMath that handles text-mode macros.\n *\n * @param {TexParser} parser      The TexParser calling this function\n * @param {string} text           The text-mode string to be processed\n * @param {number|string} level   The scriptlevel of the text\n * @param {string} mathvariant    The mathvariant for the text\n * @return {MmlNode[]}            The final MmlNode generated for the text\n */\nfunction internalMath(parser: TexParser, text: string, level?: number | string, mathvariant?: string): MmlNode[] {\n  const config = parser.configuration.packageData.get('textmacros');\n  if (!(parser instanceof TextParser)) {\n    config.texParser = parser;\n  }\n  return [(new TextParser(text, mathvariant ? {mathvariant} : {}, config.parseOptions, level)).mml()];\n}\n\n//\n//  The textmacros package configuration\n//\nexport const TextMacrosConfiguration = Configuration.create('textmacros', {\n  /**\n   * @param {ParserConfiguration} config   The configuration object we are being configured within\n   * @param {TeX<any,any,any>} jax         The TeX input jax in which we are running\n   */\n  config(_config: ParserConfiguration, jax: TeX<any, any, any>) {\n    //\n    //  Create the configuration and parseOptions objects for the\n    //    internal TextParser and add the textBase configuration.\n    //\n    const textConf = new ParserConfiguration(jax.parseOptions.options.textmacros.packages, ['tex', 'text']);\n    textConf.init();\n    const parseOptions = new ParseOptions(textConf, []);\n    parseOptions.options = jax.parseOptions.options;      // share the TeX options\n    textConf.config(jax);\n    TagsFactory.addTags(textConf.tags);\n    parseOptions.tags = TagsFactory.getDefault();\n    parseOptions.tags.configuration = parseOptions;\n    //\n    // Share the TeX input jax's parseOptions packageData object\n    //   so that require and other packages will work in both parsers,\n    //   set the textmacros data (texParser will be filled in later),\n    //   and replace the internalMath function with our own.\n    //\n    parseOptions.packageData = jax.parseOptions.packageData;\n    parseOptions.packageData.set('textmacros', {parseOptions, jax, texParser: null});\n    parseOptions.options.internalMath = internalMath;\n  },\n  preprocessors: [(data: {data: ParseOptions}) => {\n    //\n    //  Set the MmlFactory for the nodeFactory, since it was not available\n    //  durring configuration above.\n    //\n    const config = data.data.packageData.get('textmacros');\n    config.parseOptions.nodeFactory.setMmlFactory(config.jax.mmlFactory);\n  }],\n  options: {\n    textmacros: {\n      packages: ['text-base']    // textmacro packages to load\n    }\n  }\n});\n", "/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the upgreek package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {Symbol} from '../Symbol.js';\nimport {CharacterMap} from '../SymbolMap.js';\nimport {TexConstant} from '../TexConstants.js';\nimport TexParser from '../TexParser.js';\n\n\n/**\n * Handle greek mathchar as mi in normal variant.\n * @param {TexParser} parser The current tex parser.\n * @param {Symbol} mchar The parsed symbol.\n */\nfunction mathchar0miNormal(parser: TexParser, mchar: Symbol) {\n  const def = mchar.attributes || {};\n  def.mathvariant = TexConstant.Variant.NORMAL;\n  const node = parser.create('token', 'mi', def, mchar.char);\n  parser.Push(node);\n}\n\n/**\n * Upright Greek characters.\n */\nnew CharacterMap('upgreek', mathchar0miNormal, {\n  upalpha:        '\\u03B1',\n  upbeta:         '\\u03B2',\n  upgamma:        '\\u03B3',\n  updelta:        '\\u03B4',\n  upepsilon:      '\\u03F5',\n  upzeta:         '\\u03B6',\n  upeta:          '\\u03B7',\n  uptheta:        '\\u03B8',\n  upiota:         '\\u03B9',\n  upkappa:        '\\u03BA',\n  uplambda:       '\\u03BB',\n  upmu:           '\\u03BC',\n  upnu:           '\\u03BD',\n  upxi:           '\\u03BE',\n  upomicron:      '\\u03BF',\n  uppi:           '\\u03C0',\n  uprho:          '\\u03C1',\n  upsigma:        '\\u03C3',\n  uptau:          '\\u03C4',\n  upupsilon:      '\\u03C5',\n  upphi:          '\\u03D5',\n  upchi:          '\\u03C7',\n  uppsi:          '\\u03C8',\n  upomega:        '\\u03C9',\n  upvarepsilon:   '\\u03B5',\n  upvartheta:     '\\u03D1',\n  upvarpi:        '\\u03D6',\n  upvarrho:       '\\u03F1',\n  upvarsigma:     '\\u03C2',\n  upvarphi:       '\\u03C6',\n\n  Upgamma:        '\\u0393',\n  Updelta:        '\\u0394',\n  Uptheta:        '\\u0398',\n  Uplambda:       '\\u039B',\n  Upxi:           '\\u039E',\n  Uppi:           '\\u03A0',\n  Upsigma:        '\\u03A3',\n  Upupsilon:      '\\u03A5',\n  Upphi:          '\\u03A6',\n  Uppsi:          '\\u03A8',\n  Upomega:        '\\u03A9'\n});\n\n\nexport const UpgreekConfiguration = Configuration.create(\n  'upgreek', {\n    handler: {macro: ['upgreek']},\n  }\n);\n\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the unicode package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {EnvList} from '../StackItem.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport ParseUtil from '../ParseUtil.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {numeric} from '../../../util/Entities.js';\n\n// Namespace\nexport let UnicodeMethods: Record<string, ParseMethod> = {};\n\nlet UnicodeCache: {[key: number]: [number, number, string, number]} = {};\n\n/**\n * Parse function for unicode macro.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the macro.\n */\nUnicodeMethods.Unicode = function(parser: TexParser, name: string) {\n  let HD = parser.GetBrackets(name);\n  let HDsplit = null;\n  let font = null;\n  if (HD) {\n    if (HD.replace(/ /g, '').\n        match(/^(\\d+(\\.\\d*)?|\\.\\d+),(\\d+(\\.\\d*)?|\\.\\d+)$/)) {\n      HDsplit = HD.replace(/ /g, '').split(/,/);\n      font = parser.GetBrackets(name);\n    } else {\n      font = HD;\n    }\n  }\n  let n = ParseUtil.trimSpaces(parser.GetArgument(name)).replace(/^0x/, 'x');\n  if (!n.match(/^(x[0-9A-Fa-f]+|[0-9]+)$/)) {\n    throw new TexError('BadUnicode', 'Argument to \\\\unicode must be a number');\n  }\n  let N = parseInt(n.match(/^x/) ? '0' + n : n);\n  if (!UnicodeCache[N]) {\n    UnicodeCache[N] = [800, 200, font, N];\n  } else if (!font) {\n    font = UnicodeCache[N][2];\n  }\n  if (HDsplit) {\n    UnicodeCache[N][0] = Math.floor(parseFloat(HDsplit[0]) * 1000);\n    UnicodeCache[N][1] = Math.floor(parseFloat(HDsplit[1]) * 1000);\n  }\n  let variant = parser.stack.env.font as string;\n  let def: EnvList = {};\n  if (font) {\n    UnicodeCache[N][2] = def.fontfamily = font.replace(/'/g, '\\'');\n    if (variant) {\n      if (variant.match(/bold/)) {\n        def.fontweight = 'bold';\n      }\n      if (variant.match(/italic|-mathit/)) {\n        def.fontstyle = 'italic';\n      }\n    }\n  } else if (variant) {\n    def.mathvariant = variant;\n  }\n  let node = parser.create('token', 'mtext', def, numeric(n));\n  NodeUtil.setProperty(node, 'unicode', true);\n  parser.Push(node);\n};\n\n\nnew CommandMap('unicode', {unicode: 'Unicode'}, UnicodeMethods);\n\n\nexport const UnicodeConfiguration = Configuration.create(\n  'unicode', {handler: {macro: ['unicode']}}\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the verb package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {TexConstant} from '../TexConstants.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport TexError from '../TexError.js';\n\n\n// Namespace\nexport let VerbMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Implements the verbatim notation \\verb|...|.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nVerbMethods.Verb = function(parser: TexParser, name: string) {\n  const c = parser.GetNext();\n  const start = ++parser.i;\n  if (c === '' ) {\n    throw new TexError('MissingArgFor', 'Missing argument for %1', name);\n  }\n  while (parser.i < parser.string.length &&\n         parser.string.charAt(parser.i) !== c) {\n    parser.i++;\n  }\n  if (parser.i === parser.string.length) {\n    throw new TexError('NoClosingDelim',\n                       'Can\\'t find closing delimiter for %1',\n                       parser.currentCS);\n  }\n  const text = parser.string.slice(start, parser.i).replace(/ /g, '\\u00A0');\n  parser.i++;\n  parser.Push(parser.create('token', 'mtext',\n                            {mathvariant: TexConstant.Variant.MONOSPACE},\n                            text));\n};\n\n\nnew CommandMap('verb', {verb: 'Verb'}, VerbMethods);\n\n\nexport const VerbConfiguration = Configuration.create(\n  'verb', {handler: {macro: ['verb']}}\n);\n", "/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Loads all the TeX extensions\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport './base/BaseConfiguration.js';\nimport './action/ActionConfiguration.js';\nimport './ams/AmsConfiguration.js';\nimport './amscd/AmsCdConfiguration.js';\nimport './bbox/BboxConfiguration.js';\nimport './boldsymbol/BoldsymbolConfiguration.js';\nimport './braket/BraketConfiguration.js';\nimport './bussproofs/BussproofsConfiguration.js';\nimport './cancel/CancelConfiguration.js';\nimport './cases/CasesConfiguration.js';\nimport './centernot/CenternotConfiguration.js';\nimport './color/ColorConfiguration.js';\nimport './colorv2/ColorV2Configuration.js';\nimport './colortbl/ColortblConfiguration.js';\nimport './configmacros/ConfigMacrosConfiguration.js';\nimport './empheq/EmpheqConfiguration.js';\nimport './enclose/EncloseConfiguration.js';\nimport './extpfeil/ExtpfeilConfiguration.js';\nimport './gensymb/GensymbConfiguration.js';\nimport './html/HtmlConfiguration.js';\nimport './mathtools/MathtoolsConfiguration.js';\nimport './mhchem/MhchemConfiguration.js';\nimport './newcommand/NewcommandConfiguration.js';\nimport './noerrors/NoErrorsConfiguration.js';\nimport './noundefined/NoUndefinedConfiguration.js';\nimport './physics/PhysicsConfiguration.js';\nimport './setoptions/SetOptionsConfiguration.js';\nimport './tagformat/TagFormatConfiguration.js';\nimport './textcomp/TextcompConfiguration.js';\nimport './textmacros/TextMacrosConfiguration.js';\nimport './upgreek/UpgreekConfiguration.js';\nimport './unicode/UnicodeConfiguration.js';\nimport './verb/VerbConfiguration.js';\n\ndeclare const MathJax: any;\nif (typeof MathJax !== 'undefined' && MathJax.loader) {\n  MathJax.loader.preLoad(\n    '[tex]/action',\n    '[tex]/ams',\n    '[tex]/amscd',\n    '[tex]/bbox',\n    '[tex]/boldsymbol',\n    '[tex]/braket',\n    '[tex]/bussproofs',\n    '[tex]/cancel',\n    '[tex]/cases',\n    '[tex]/centernot',\n    '[tex]/color',\n    '[tex]/colorv2',\n    '[tex]/colortbl',\n    '[tex]/empheq',\n    '[tex]/enclose',\n    '[tex]/extpfeil',\n    '[tex]/gensymb',\n    '[tex]/html',\n    '[tex]/mathtools',\n    '[tex]/mhchem',\n    '[tex]/newcommand',\n    '[tex]/noerrors',\n    '[tex]/noundefined',\n    '[tex]/physics',\n    '[tex]/upgreek',\n    '[tex]/unicode',\n    '[tex]/verb',\n    '[tex]/configmacros',\n    '[tex]/tagformat',\n    '[tex]/textcomp',\n    '[tex]/textmacros',\n    '[tex]/setoptions',\n  );\n}\n\nexport const AllPackages: string[] = [\n  'base',\n  'action',\n  'ams',\n  'amscd',\n  'bbox',\n  'boldsymbol',\n  'braket',\n  'bussproofs',\n  'cancel',\n  'cases',\n  'centernot',\n  'color',\n  'colortbl',\n  'empheq',\n  'enclose',\n  'extpfeil',\n  'gensymb',\n  'html',\n  'mathtools',\n  'mhchem',\n  'newcommand',\n  'noerrors',\n  'noundefined',\n  'upgreek',\n  'unicode',\n  'verb',\n  'configmacros',\n  'tagformat',\n  'textcomp',\n  'textmacros'\n];\n"],
  "mappings": "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",
  "names": ["MultlineItem", "FlalignItem", "AmsTags", "BraketItem", "_a", "ProofTreeItem", "CasesBeginItem", "CasesTags", "ColorModel", "ColorArrayItem", "config", "NewcommandUtil", "BeginEnvItem", "EmpheqBeginItem", "_a", "id", "TagFormat", "MultlinedItem", "_a", "mhchemParser", "input", "AutoOpen", "require", "TagFormat", "TextParser"]
}
