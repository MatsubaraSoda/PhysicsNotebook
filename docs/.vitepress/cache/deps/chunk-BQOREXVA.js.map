{
  "version": 3,
  "sources": ["../../../../node_modules/mathjax-full/ts/util/FunctionList.ts"],
  "sourcesContent": ["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implement FunctionList object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PrioritizedList, PrioritizedListItem} from './PrioritizedList.js';\n\n/*****************************************************************/\n/**\n *  The FunctionListItem interface (extends PrioritizedListItem<Function>)\n */\n\nexport interface FunctionListItem extends PrioritizedListItem<Function> {}\n\n/*****************************************************************/\n/**\n *  Implements the FunctionList class (extends PrioritizedList<Function>)\n */\n\nexport class FunctionList extends PrioritizedList<Function> {\n\n  /**\n   * Executes the functions in the list (in prioritized order),\n   *   passing the given data to the functions.  If any return\n   *   false, the list is terminated.\n   *\n   * @param {any[]} data  The array of arguments to pass to the functions\n   * @return {boolean}    False if any function stopped the list by\n   *                       returning false, true otherwise\n   */\n  public execute(...data: any[]): boolean {\n    for (const item of this) {\n      let result = item.item(...data);\n      if (result === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Executes the functions in the list (in prioritized order) asynchronously,\n   *   passing the given data to the functions, and doing the next function\n   *   only when the previous one completes.  If the function returns a\n   *   Promise, then use that to control the flow.  Otherwise, if the\n   *   function returns false, the list is terminated.\n   * This function returns a Promise.  If any function in the list fails,\n   *   the promise fails.  If any function returns false, the promise\n   *   succeeds, but passes false as its argument.  Otherwise it succeeds\n   *   and passes true.\n   *\n   * @param {any[]} data  The array of arguments to pass to the functions\n   * @return {Promise}    The promise that is satisfied when the function\n   *                       list completes (with argument true or false\n   *                       depending on whether some function returned\n   *                       false or not).\n   */\n  public asyncExecute(...data: any[]): Promise<void> {\n    let i = -1;\n    let items = this.items;\n    return new Promise((ok: Function, fail: Function) => {\n      (function execute() {\n        while (++i < items.length) {\n          let result = items[i].item(...data);\n          if (result instanceof Promise) {\n            result.then(execute).catch(err => fail(err));\n            return;\n          }\n          if (result === false) {\n            ok(false);\n            return;\n          }\n        }\n        ok(true);\n      })();\n    });\n  }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,QAAA,uBAAA;AAcA,QAAA,eAAA,SAAA,QAAA;AAAkC,gBAAAA,eAAA,MAAA;AAAlC,eAAAA,gBAAA;;MA2DA;AAhDS,MAAAA,cAAA,UAAA,UAAP,WAAA;;AAAe,YAAA,OAAA,CAAA;iBAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAc;AAAd,eAAA,EAAA,IAAA,UAAA,EAAA;;;AACb,mBAAmB,KAAA,SAAA,IAAI,GAAA,KAAA,GAAA,KAAA,GAAA,CAAA,GAAA,MAAA,KAAA,GAAA,KAAA,GAAE;AAApB,gBAAM,OAAI,GAAA;AACb,gBAAI,SAAS,KAAK,KAAI,MAAT,MAAI,cAAA,CAAA,GAAA,OAAS,IAAI,GAAA,KAAA,CAAA;AAC9B,gBAAI,WAAW,OAAO;AACpB,qBAAO;;;;;;;;;;;;AAGX,eAAO;MACT;AAmBO,MAAAA,cAAA,UAAA,eAAP,WAAA;AAAoB,YAAA,OAAA,CAAA;iBAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAc;AAAd,eAAA,EAAA,IAAA,UAAA,EAAA;;AAClB,YAAI,IAAI;AACR,YAAI,QAAQ,KAAK;AACjB,eAAO,IAAI,QAAQ,SAAC,IAAc,MAAc;AAC9C,WAAC,SAAS,UAAO;;AACf,mBAAO,EAAE,IAAI,MAAM,QAAQ;AACzB,kBAAI,UAAS,KAAA,MAAM,CAAC,GAAE,KAAI,MAAA,IAAA,cAAA,CAAA,GAAA,OAAI,IAAI,GAAA,KAAA,CAAA;AAClC,kBAAI,kBAAkB,SAAS;AAC7B,uBAAO,KAAK,OAAO,EAAE,MAAM,SAAA,KAAG;AAAI,yBAAA,KAAK,GAAG;gBAAR,CAAS;AAC3C;;AAEF,kBAAI,WAAW,OAAO;AACpB,mBAAG,KAAK;AACR;;;AAGJ,eAAG,IAAI;UACT,GAAE;QACJ,CAAC;MACH;AAEF,aAAAA;IAAA,EA3DkC,qBAAA,eAAe;AAApC,YAAA,eAAA;;;",
  "names": ["FunctionList"]
}
